<?php

// Generated by Haxe 3.3.0
class thx_color__Xyz_Xyz_Impl_ {
	public function __construct(){}
	static $whiteReference;
	static function toLab($this1) {
		$f = array(new _hx_lambda(array(), "thx_color__Xyz_Xyz_Impl__0"), 'execute');
		$x1 = $this1->a[0] / thx_color__Xyz_Xyz_Impl_::$whiteReference[0];
		$y1 = $this1->a[1] / thx_color__Xyz_Xyz_Impl_::$whiteReference[1];
		$z1 = $this1->a[2] / thx_color__Xyz_Xyz_Impl_::$whiteReference[2];
		$fy1 = call_user_func_array($f, array($y1));
		$l = 116 * $fy1 - 16;
		$tmp = call_user_func_array($f, array($x1));
		$a = 500 * ($tmp - $fy1);
		$tmp1 = call_user_func_array($f, array($z1));
		return (new _hx_array(array($l, $a, 200 * ($fy1 - $tmp1))));
	}
	static function toHunterLab($this1) {
		$tmp = Math::sqrt($this1[1]);
		$l = 10.0 * $tmp;
		$a = null;
		if(!_hx_equal($this1[1], 0)) {
			$tmp1 = 1.02 * $this1[0] - $this1[1];
			$tmp2 = Math::sqrt($this1[1]);
			$a = 17.5 * ($tmp1 / $tmp2);
		} else {
			$a = 0;
		}
		$b = null;
		if(!_hx_equal($this1[1], 0)) {
			$tmp3 = $this1->a[1] - .847 * $this1[2];
			$tmp4 = Math::sqrt($this1[1]);
			$b = 7.0 * ($tmp3 / $tmp4);
		} else {
			$b = 0;
		}
		return (new _hx_array(array($l, $a, $b)));
	}
	static function toYxy($this1) {
		$sum = $this1->a[0] + $this1[1] + $this1[2];
		$this2 = null;
		$tmp = $this1[1];
		$tmp1 = null;
		if(_hx_equal($sum, 0)) {
			$tmp1 = 1;
		} else {
			$tmp1 = $this1->a[0] / $sum;
		}
		$tmp2 = null;
		if(_hx_equal($sum, 0)) {
			$tmp2 = 1;
		} else {
			$tmp2 = $this1->a[1] / $sum;
		}
		$this2 = (new _hx_array(array($tmp, $tmp1, $tmp2)));
		return $this2;
	}
	function __toString() { return 'thx.color._Xyz.Xyz_Impl_'; }
}
thx_color__Xyz_Xyz_Impl_::$whiteReference = (new _hx_array(array(0.95047, 1, 1.08883)));
function thx_color__Xyz_Xyz_Impl__0($t) {
	{
		if($t > 0.0088564516790356311) {
			return Math::pow($t, 0.333333333333333315);
		} else {
			return 7.78703703703703543 * $t + 0.137931034482758619;
		}
	}
}
