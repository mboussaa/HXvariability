<?php

// Generated by Haxe 3.3.0
class haxe_ds_IntMap implements haxe_IMap, IteratorAggregate{
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->h = array();
	}}
	public $h;
	public function set($key, $value) {
		$this->h[$key] = $value;
	}
	public function get($key) {
		$tmp = array_key_exists($key, $this->h);
		if($tmp) {
			return $this->h[$key];
		} else {
			return null;
		}
	}
	public function exists($key) {
		return array_key_exists($key, $this->h);
	}
	public function remove($key) {
		$tmp = array_key_exists($key, $this->h);
		if($tmp) {
			unset($this->h[$key]);
			return true;
		} else {
			return false;
		}
	}
	public function keys() {
		return new _hx_array_iterator(array_keys($this->h));
	}
	public function iterator() {
		return new _hx_array_iterator(array_values($this->h));
	}
	public function toString() {
		$s = "{";
		$it = $this->keys();
		while(true) {
			$tmp = !$it->hasNext();
			if($tmp) {
				break;
			}
			$i = $it->next();
			$s .= _hx_string_rec($i, "");
			$s .= " => ";
			$tmp1 = $this->get($i);
			$tmp2 = Std::string($tmp1);
			$s .= _hx_string_or_null($tmp2);
			$tmp3 = $it->hasNext();
			if($tmp3) {
				$s .= ", ";
			}
			unset($tmp3,$tmp2,$tmp1,$tmp,$i);
		}
		return _hx_string_or_null($s) . "}";
	}
	public function getIterator() {
		return $this->iterator();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
