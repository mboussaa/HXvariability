<?php

// Generated by Haxe 3.3.0
class thx_culture_Culture {
	public function __construct($code, $dateTime, $ietf, $isNeutral, $iso2, $iso3, $isRightToLeft, $lcid, $nameCalendar, $nameEnglish, $nameNative, $nameRegionEnglish, $nameRegionNative, $number, $separatorList, $win3) {
		if(!php_Boot::$skip_constructor) {
		$this->code = $code;
		$this->dateTime = $dateTime;
		$this->ietf = $ietf;
		$this->isNeutral = $isNeutral;
		$this->iso2 = $iso2;
		$this->iso3 = $iso3;
		$this->isRightToLeft = $isRightToLeft;
		$this->lcid = $lcid;
		$this->nameCalendar = $nameCalendar;
		$this->nameEnglish = $nameEnglish;
		$this->nameNative = $nameNative;
		$this->nameRegionEnglish = $nameRegionEnglish;
		$this->nameRegionNative = $nameRegionNative;
		$this->number = $number;
		$this->separatorList = $separatorList;
		$this->win3 = $win3;
	}}
	public $code;
	public $dateTime;
	public $ietf;
	public $isNeutral;
	public $iso2;
	public $iso3;
	public $isRightToLeft;
	public $lcid;
	public $nameCalendar;
	public $nameDisplayEnglish;
	public $nameDisplayNative;
	public $nameEnglish;
	public $nameNative;
	public $nameRegionEnglish;
	public $nameRegionNative;
	public $number;
	public $separatorList;
	public $win3;
	public function toObject() {
		$tmp = null;
		if(null === $this->dateTime) {
			$tmp = null;
		} else {
			$tmp = $this->dateTime->toObject();
		}
		$tmp1 = null;
		if(null === $this->number) {
			$tmp1 = null;
		} else {
			$tmp1 = $this->number->toObject();
		}
		return _hx_anonymous(array("code" => $this->code, "dateTime" => $tmp, "ietf" => $this->ietf, "isNeutral" => $this->isNeutral, "iso2" => $this->iso2, "iso3" => $this->iso3, "isRightToLeft" => $this->isRightToLeft, "lcid" => $this->lcid, "nameCalendar" => $this->nameCalendar, "nameEnglish" => $this->nameEnglish, "nameNative" => $this->nameNative, "nameRegionEnglish" => $this->nameRegionEnglish, "nameRegionNative" => $this->nameRegionNative, "number" => $tmp1, "separatorList" => $this->separatorList, "win3" => $this->win3));
	}
	public function get_nameDisplayEnglish() {
		$tmp = null;
		if(null === $this->nameRegionEnglish) {
			$tmp = "";
		} else {
			$tmp = " (" . _hx_string_or_null($this->nameRegionEnglish) . ")";
		}
		return _hx_string_or_null($this->nameEnglish) . _hx_string_or_null($tmp);
	}
	public function get_nameDisplayNative() {
		$tmp = null;
		if(null === $this->nameRegionNative) {
			$tmp = "";
		} else {
			$tmp = " (" . _hx_string_or_null($this->nameRegionNative) . ")";
		}
		return _hx_string_or_null($this->nameNative) . _hx_string_or_null($tmp);
	}
	public function toString() {
		return $this->get_nameDisplayEnglish();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $invariant;
	static function fromObject($o) {
		$tmp = null;
		if(null === _hx_field($o, "dateTime")) {
			$tmp = null;
		} else {
			$tmp = thx_culture_DateFormatInfo::fromObject($o->dateTime);
		}
		$tmp1 = null;
		if(null === _hx_field($o, "number")) {
			$tmp1 = null;
		} else {
			$tmp1 = thx_culture_NumberFormatInfo::fromObject($o->number);
		}
		return new thx_culture_Culture($o->code, $tmp, $o->ietf, $o->isNeutral, $o->iso2, $o->iso3, $o->isRightToLeft, $o->lcid, $o->nameCalendar, $o->nameEnglish, $o->nameNative, $o->nameRegionEnglish, $o->nameRegionNative, $tmp1, $o->separatorList, $o->win3);
	}
	static $cultures;
	static $hlist;
	static function register($culture) {
		$code = thx_culture_Culture::getCodeKey($culture->code);
		$tmp = thx_culture_Culture::$cultures->exists($code);
		if($tmp) {
			return thx_culture_Culture::$cultures->get($code);
		}
		thx_culture_Culture::$hlist->push($culture);
		thx_culture_Culture::$cultures->set($code, $culture);
		{
			$key = thx_culture_Culture::getIso2Key($culture->iso2);
			thx_culture_Culture::$cultures->set($key, $culture);
		}
		{
			$key1 = thx_culture_Culture::getIso3Key($culture->iso3);
			thx_culture_Culture::$cultures->set($key1, $culture);
		}
		return $culture;
	}
	static function getByCode($code) {
		$key = thx_culture_Culture::getCodeKey($code);
		return thx_culture_Culture::$cultures->get($key);
	}
	static function getByIso2($iso2) {
		$key = thx_culture_Culture::getIso2Key($iso2);
		return thx_culture_Culture::$cultures->get($key);
	}
	static function getByIso3($iso3) {
		$key = thx_culture_Culture::getIso3Key($iso3);
		return thx_culture_Culture::$cultures->get($key);
	}
	static function iterator() {
		return thx_culture_Culture::$hlist->iterator();
	}
	static function getCodeKey($key) {
		$tmp = strtolower($key);
		return "C:" . _hx_string_or_null($tmp);
	}
	static function getIso2Key($key) {
		$tmp = strtolower($key);
		return "I2:" . _hx_string_or_null($tmp);
	}
	static function getIso3Key($key) {
		$tmp = strtolower($key);
		return "I3:" . _hx_string_or_null($tmp);
	}
	static $__properties__ = array("get_nameDisplayNative" => "get_nameDisplayNative","get_nameDisplayEnglish" => "get_nameDisplayEnglish");
	function __toString() { return $this->toString(); }
}
{
	thx_culture_Culture::$cultures = new haxe_ds_StringMap();
	thx_culture_Culture::$hlist = (new _hx_array(array()));
}
thx_culture_Culture::$invariant = new thx_culture_Culture("", thx_culture_DateFormatInfo::$invariant, "", false, "iv", "IVL", false, 127, "Gregorian", "Invariant Language", "Invariant Language", "Invariant Country", "Invariant Country", thx_culture_NumberFormatInfo::$invariant, ",", "IVL");
