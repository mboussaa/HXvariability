<?php

// Generated by Haxe 3.3.0
class thx_culture_TestEmbed {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testEmbed() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$itit = thx_culture_Culture::register(thx_culture_Culture::fromObject(_hx_anonymous(array("nameRegionNative" => "Italia", "separatorList" => ";", "nameNative" => "italiano", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 1, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => ".", "signPositive" => "+", "symbolPositiveInfinity" => "+Infinito", "patternNegativeCurrency" => 9, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => ".", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non un numero reale", "separatorGroupPercent" => ".", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinito", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Italian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dom", "lun", "mar", "mer", "gio", "ven", "sab"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("do", "lu", "ma", "me", "gi", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "calendario gregoriano", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))))), "win3" => "ITA", "nameRegionEnglish" => "Italy", "lcid" => 1040, "iso3" => "ita", "iso2" => "it", "ietf" => "it-IT", "code" => "it-IT"))));
			$tmp = $itit->get_nameDisplayNative();
			utest_Assert::equals("italiano (Italia)", $tmp, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 14, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbed")));
			utest_Assert::equals("italiano", $itit->nameNative, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 15, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbed")));
			utest_Assert::equals("Italia", $itit->nameRegionNative, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 16, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbed")));
			unset($tmp,$itit);
		}
	}
	public function testListLanguages() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$list = (new _hx_array(array("en-zw", "bo", "sk", "dsb", "smn-fi", "km", "sr-latn-ba", "es-cl", "be", "yo-ng", "en-nz", "mk-mk", "sma-no", "ca-es", "en", "en-ie", "cy-gb", "ar-bh", "zh-sg", "ky", "ar-tn", "uz-latn", "km-kh", "am", "gd", "te", "sms", "prs", "ka", "sl-si", "sma-se", "quz-bo", "ar-ye", "ar", "kl", "es-sv", "sw-ke", "sr-latn-cs", "hy-am", "rw", "or", "nl-be", "wo", "it-it", "bg-bg", "ar-ae", "ca", "arn-cl", "quz-pe", "ta", "fi", "da", "tzm", "vi-vn", "ar-sa", "es", "es-gt", "ar-sy", "sv", "ig-ng", "zu-za", "se", "mk", "de-at", "es-ve", "lb", "sr-latn", "yo", "moh", "cs", "am-et", "xh-za", "quz-ec", "xh", "gu-in", "mn-mong", "oc", "smn", "el-gr", "ba", "rw-rw", "en-ca", "mn-mn", "or-in", "br-fr", "cy", "pt-br", "ba-ru", "az-latn-az", "he-il", "ig", "ga-ie", "tn-za", "en-ph", "mn", "ja-jp", "zh-hans", "sms-fi", "nso-za", "mr-in", "se-no", "tg-cyrl", "en-sg", "as", "et-ee", "dsb-de", "ka-ge", "ms-bn", "es-uy", "be-by", "en-tt", "fil-ph", "tzm-latn", "gd-gb", "id", "ha-latn", "es-cr", "sq-al", "dv-mv", "zu", "es-bo", "ar-lb", "ga", "ps", "dv", "ug-cn", "prs-af", "de-de", "se-se", "lo", "fi-fi", "es-pa", "gl", "sah-ru", "az-cyrl-az", "sah", "tr", "ru-ru", "ky-kg", "fil", "ps-af", "ar-ma", "mi-nz", "fr-be", "ne-np", "uz-latn-uz", "ar-om", "sr-cyrl-rs", "zh-tw", "fr-fr", "nso", "pt", "es-ec", "mt", "en-in", "ar-jo", "en-029", "vi", "ko-kr", "it", "es-co", "co", "ha-latn-ng", "is", "ur-pk", "tt-ru", "es-ni", "se-fi", "en-us", "smj", "ms-my", "en-gb", "lt-lt", "th", "bs-cyrl", "gu", "ms", "cs-cz", "sq", "hsb-de", "ml-in", "fr-lu", "fo", "et", "co-fr", "sr-cyrl", "pl", "ko", "no", "en-my", "ar-eg", "fr", "iu-cans", "en-za", "sr-latn-me", "de-ch", "tzm-latn-dz", "pt-pt", "hr", "hr-ba", "te-in", "tk-tm", "bs-latn", "ar-ly", "es-hn", "zh-cht", "nb-no", "hr-hr", "ru", "kk-kz", "sl", "nb", "zh-hk", "si", "zh", "bo-cn", "nl", "es-mx", "uz-cyrl", "bs-latn-ba", "da-dk", "sr", "is-is", "es-es", "iu-latn-ca", "tk", "rm-ch", "mi", "uk-ua", "en-bz", "es-py", "ml", "smj-no", "bn-in", "id-id", "th-th", "smj-se", "pa-in", "bg", "lv", "az-latn", "pl-pl", "arn", "es-us", "moh-ca", "en-jm", "rm", "kn-in", "fa-ir", "he", "sa", "hy", "az", "nn", "ar-iq", "ha", "ar-dz", "fr-ch", "sr-latn-rs", "zh-chs", "tg", "sr-cyrl-me", "es-pr", "qut", "bs", "it-ch", "es-pe", "nn-no", "de", "uk", "hu-hu", "ug", "br", "quz", "pa", "fy", "nl-nl", "lv-lv", "ar-qa", "bn", "bs-cyrl-ba", "kn", "bn-bd", "ro-ro", "mr", "uz", "eu", "as-in", "sw", "ii", "tg-cyrl-tj", "ne", "sv-se", "iu", "mt-mt", "ro", "de-li", "ii-cn", "iu-cans-ca", "fr-ca", "uz-cyrl-uz", "lb-lu", "sr-cyrl-cs", "el", "ja", "kl-gl", "oc-fr", "syr-sy", "zh-mo", "tr-tr", "sma", "sk-sk", "ur", "eu-es", "hi", "gsw", "tn", "sa-in", "kok-in", "gsw-fr", "hu", "mn-cyrl", "kk", "tt", "es-ar", "ar-kw", "qut-gt", "lo-la", "syr", "de-lu", "az-cyrl", "fo-fo", "sv-fi", "fa", "iu-latn", "si-lk", "fy-nl", "en-au", "fr-mc", "mn-mong-cn", "sr-cyrl-ba", "ta-in", "kok", "zh-hant", "hi-in", "wo-sn", "zh-cn", "gl-es", "af-za", "es-do", "lt", "af", "hsb")));
			utest_Assert::contains("it", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 22, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("en", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 23, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("fr", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 24, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("it-it", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 25, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("en-us", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 26, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			utest_Assert::contains("en-gb", $list, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 27, "className" => "thx.culture.TestEmbed", "methodName" => "testListLanguages")));
			unset($list);
		}
	}
	public function testEmbedMany() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			{
				thx_culture_Culture::register(thx_culture_Culture::fromObject(_hx_anonymous(array("nameRegionNative" => null, "separatorList" => ";", "nameNative" => "italiano", "number" => null, "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => true, "nameEnglish" => "Italian", "dateTime" => null, "win3" => "ITA", "nameRegionEnglish" => null, "lcid" => 16, "iso3" => "ita", "iso2" => "it", "ietf" => "it", "code" => "it"))));
				thx_culture_Culture::register(thx_culture_Culture::fromObject(_hx_anonymous(array("nameRegionNative" => null, "separatorList" => ",", "nameNative" => "English", "number" => null, "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => true, "nameEnglish" => "English", "dateTime" => null, "win3" => "ENU", "nameRegionEnglish" => null, "lcid" => 9, "iso3" => "eng", "iso2" => "en", "ietf" => "en", "code" => "en"))));
				thx_culture_Culture::register(thx_culture_Culture::fromObject(_hx_anonymous(array("nameRegionNative" => null, "separatorList" => ";", "nameNative" => "français", "number" => null, "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => true, "nameEnglish" => "French", "dateTime" => null, "win3" => "FRA", "nameRegionEnglish" => null, "lcid" => 12, "iso3" => "fra", "iso2" => "fr", "ietf" => "fr", "code" => "fr"))));
				thx_culture_Culture::register(thx_culture_Culture::fromObject(_hx_anonymous(array("nameRegionNative" => "Italia", "separatorList" => ";", "nameNative" => "italiano", "number" => _hx_anonymous(array("patternPositiveCurrency" => 2, "patternPositivePercent" => 1, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 1, "separatorDecimalPercent" => ",", "separatorGroupNumber" => ".", "signPositive" => "+", "symbolPositiveInfinity" => "+Infinito", "patternNegativeCurrency" => 9, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => ".", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non un numero reale", "separatorGroupPercent" => ".", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinito", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "Italian", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dom", "lun", "mar", "mer", "gio", "ven", "sab"))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("do", "lu", "ma", "me", "gi", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstFourDayWeek", "nameCalendarNative" => "calendario gregoriano", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 2, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""))))), "win3" => "ITA", "nameRegionEnglish" => "Italy", "lcid" => 1040, "iso3" => "ita", "iso2" => "it", "ietf" => "it-IT", "code" => "it-IT"))));
				thx_culture_Culture::register(thx_culture_Culture::fromObject(_hx_anonymous(array("nameRegionNative" => "United Kingdom", "separatorList" => ",", "nameNative" => "English", "number" => _hx_anonymous(array("patternPositiveCurrency" => 0, "patternPositivePercent" => 0, "symbolCurrency" => "£", "signNegative" => "-", "patternNegativePercent" => 0, "separatorDecimalPercent" => ".", "separatorGroupNumber" => ",", "signPositive" => "+", "symbolPositiveInfinity" => "Infinity", "patternNegativeCurrency" => 1, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ".", "separatorGroupCurrency" => ",", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ".", "symbolNaN" => "NaN", "separatorGroupPercent" => ",", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infinity", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "English", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))), "patternMonthDay" => "dd MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))), "designatorPm" => "PM", "designatorAm" => "AM", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dd MMMM yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "Gregorian Calendar", "patternDateTimeFull" => "dd MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""))))), "win3" => "ENG", "nameRegionEnglish" => "United Kingdom", "lcid" => 2057, "iso3" => "eng", "iso2" => "en", "ietf" => "en-GB", "code" => "en-GB"))));
				thx_culture_Culture::register(thx_culture_Culture::fromObject(_hx_anonymous(array("nameRegionNative" => "France", "separatorList" => ";", "nameNative" => "français", "number" => _hx_anonymous(array("patternPositiveCurrency" => 3, "patternPositivePercent" => 0, "symbolCurrency" => "€", "signNegative" => "-", "patternNegativePercent" => 0, "separatorDecimalPercent" => ",", "separatorGroupNumber" => " ", "signPositive" => "+", "symbolPositiveInfinity" => "+Infini", "patternNegativeCurrency" => 8, "symbolPermille" => "‰", "groupSizesPercent" => (new _hx_array(array(3))), "separatorDecimalCurrency" => ",", "separatorGroupCurrency" => " ", "decimalDigitsPercent" => 2, "groupSizesCurrency" => (new _hx_array(array(3))), "patternNegativeNumber" => 1, "separatorDecimalNumber" => ",", "symbolNaN" => "Non Numérique", "separatorGroupPercent" => " ", "decimalDigitsCurrency" => 2, "symbolNegativeInfinity" => "-Infini", "decimalDigitsNumber" => 2, "groupSizesNumber" => (new _hx_array(array(3))), "symbolPercent" => "%")), "nameCalendar" => "Gregorian", "isRightToLeft" => false, "isNeutral" => false, "nameEnglish" => "French", "dateTime" => _hx_anonymous(array("nameDays" => (new _hx_array(array("dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"))), "patternMonthDay" => "d MMMM", "patternYearMonth" => "MMMM yyyy", "firstDayOfWeekIndex" => 1, "patternTimeLong" => "HH:mm:ss", "separatorTime" => ":", "patternTimeShort" => "HH:mm", "nameDaysAbbreviated" => (new _hx_array(array("dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."))), "designatorPm" => "", "designatorAm" => "", "nameMonthGenitivesAbbreviated" => (new _hx_array(array("janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""))), "separatorDate" => "/", "nameMonthGenitives" => (new _hx_array(array("janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""))), "firstDayOfWeekName" => "Monday", "nameDaysShortest" => (new _hx_array(array("di", "lu", "ma", "me", "je", "ve", "sa"))), "patternDateTimeSortable" => "yyyy'-'MM'-'dd'T'HH':'mm':'ss", "patternDateLong" => "dddd d MMMM yyyy", "calendarWeekRuleName" => "FirstDay", "nameCalendarNative" => "calendrier grégorien", "patternDateTimeFull" => "dddd d MMMM yyyy HH:mm:ss", "patternUniversalSortable" => "yyyy'-'MM'-'dd HH':'mm':'ss'Z'", "nameCalendar" => "Gregorian", "calendarWeekRuleIndex" => 0, "patternRfc1123" => "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", "patternDateShort" => "dd/MM/yyyy", "nameMonths" => (new _hx_array(array("janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""))), "nameMonthsAbbreviated" => (new _hx_array(array("janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""))))), "win3" => "FRA", "nameRegionEnglish" => "France", "lcid" => 1036, "iso3" => "fra", "iso2" => "fr", "ietf" => "fr-FR", "code" => "fr-FR"))));
			}
			$tmp = thx_culture_Culture::getByIso2("fr");
			utest_Assert::notNull($tmp, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 33, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbedMany")));
			$tmp1 = thx_culture_Culture::getByIso3("fra");
			utest_Assert::notNull($tmp1, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 34, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbedMany")));
			$tmp2 = thx_culture_Culture::getByCode("fr-fr");
			utest_Assert::notNull($tmp2, null, _hx_anonymous(array("fileName" => "TestEmbed.hx", "lineNumber" => 35, "className" => "thx.culture.TestEmbed", "methodName" => "testEmbedMany")));
			unset($tmp2,$tmp1,$tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.culture.TestEmbed'; }
}
