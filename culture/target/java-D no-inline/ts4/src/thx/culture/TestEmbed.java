// Generated by Haxe 3.3.0
package thx.culture;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TestEmbed extends haxe.lang.HxObject
{
	public TestEmbed(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TestEmbed(int i)
	{
		//line 7 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		thx.culture.TestEmbed.__hx_ctor_thx_culture_TestEmbed(this, i);
	}
	
	
	public static void __hx_ctor_thx_culture_TestEmbed(thx.culture.TestEmbed __temp_me36, int i)
	{
		//line 8 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		__temp_me36.x = i;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		return new thx.culture.TestEmbed(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		return new thx.culture.TestEmbed(((int) (haxe.lang.Runtime.toInt(arr.__get(0))) ));
	}
	
	
	public int x;
	
	public void testEmbed()
	{
		//line 12 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		int _g1 = 0;
		//line 12 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		int _g = this.x;
		//line 12 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		while (( _g1 < _g ))
		{
			//line 12 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			 ++ _g1;
			//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
			java.lang.Object __temp_stmt4 = null;
			//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
			{
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", ".", ".", ".", "-", "+", "\u20ac", "Non un numero reale", "-Infinito", "%", "\u2030", "+Infinito"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (9) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "", "", "Monday", "Gregorian", "calendario gregoriano", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				__temp_stmt4 = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it-IT", __temp_odecl2, "it-IT", false, false, "it", "ita", "Gregorian", "Italian", "italiano", "Italy", "Italia", __temp_odecl1, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1040) )) )});
			}
			
			//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
			thx.culture.Culture __temp_stmt3 = thx.culture.Culture.fromObject(__temp_stmt4);
			//line 13 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			thx.culture.Culture itit = thx.culture.Culture.register(__temp_stmt3);
			//line 14 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.equals("italiano (Italia)", itit.get_nameDisplayNative(), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbed"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (14) )) )}));
			//line 15 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.equals("italiano", itit.nameNative, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbed"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (15) )) )}));
			//line 16 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.equals("Italia", itit.nameRegionNative, null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbed"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (16) )) )}));
		}
		
	}
	
	
	public void testListLanguages()
	{
		//line 20 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		int _g1 = 0;
		//line 20 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		int _g = this.x;
		//line 20 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		while (( _g1 < _g ))
		{
			//line 20 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			 ++ _g1;
			//line 21 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			haxe.root.Array<java.lang.String> list = new haxe.root.Array<java.lang.String>(new java.lang.String[]{"en-zw", "bo", "sk", "dsb", "smn-fi", "km", "sr-latn-ba", "es-cl", "be", "yo-ng", "en-nz", "mk-mk", "sma-no", "ca-es", "en", "en-ie", "cy-gb", "ar-bh", "zh-sg", "ky", "ar-tn", "uz-latn", "km-kh", "am", "gd", "te", "sms", "prs", "ka", "sl-si", "sma-se", "quz-bo", "ar-ye", "ar", "kl", "es-sv", "sw-ke", "sr-latn-cs", "hy-am", "rw", "or", "nl-be", "wo", "it-it", "bg-bg", "ar-ae", "ca", "arn-cl", "quz-pe", "ta", "fi", "da", "tzm", "vi-vn", "ar-sa", "es", "es-gt", "ar-sy", "sv", "ig-ng", "zu-za", "se", "mk", "de-at", "es-ve", "lb", "sr-latn", "yo", "moh", "cs", "am-et", "xh-za", "quz-ec", "xh", "gu-in", "mn-mong", "oc", "smn", "el-gr", "ba", "rw-rw", "en-ca", "mn-mn", "or-in", "br-fr", "cy", "pt-br", "ba-ru", "az-latn-az", "he-il", "ig", "ga-ie", "tn-za", "en-ph", "mn", "ja-jp", "zh-hans", "sms-fi", "nso-za", "mr-in", "se-no", "tg-cyrl", "en-sg", "as", "et-ee", "dsb-de", "ka-ge", "ms-bn", "es-uy", "be-by", "en-tt", "fil-ph", "tzm-latn", "gd-gb", "id", "ha-latn", "es-cr", "sq-al", "dv-mv", "zu", "es-bo", "ar-lb", "ga", "ps", "dv", "ug-cn", "prs-af", "de-de", "se-se", "lo", "fi-fi", "es-pa", "gl", "sah-ru", "az-cyrl-az", "sah", "tr", "ru-ru", "ky-kg", "fil", "ps-af", "ar-ma", "mi-nz", "fr-be", "ne-np", "uz-latn-uz", "ar-om", "sr-cyrl-rs", "zh-tw", "fr-fr", "nso", "pt", "es-ec", "mt", "en-in", "ar-jo", "en-029", "vi", "ko-kr", "it", "es-co", "co", "ha-latn-ng", "is", "ur-pk", "tt-ru", "es-ni", "se-fi", "en-us", "smj", "ms-my", "en-gb", "lt-lt", "th", "bs-cyrl", "gu", "ms", "cs-cz", "sq", "hsb-de", "ml-in", "fr-lu", "fo", "et", "co-fr", "sr-cyrl", "pl", "ko", "no", "en-my", "ar-eg", "fr", "iu-cans", "en-za", "sr-latn-me", "de-ch", "tzm-latn-dz", "pt-pt", "hr", "hr-ba", "te-in", "tk-tm", "bs-latn", "ar-ly", "es-hn", "zh-cht", "nb-no", "hr-hr", "ru", "kk-kz", "sl", "nb", "zh-hk", "si", "zh", "bo-cn", "nl", "es-mx", "uz-cyrl", "bs-latn-ba", "da-dk", "sr", "is-is", "es-es", "iu-latn-ca", "tk", "rm-ch", "mi", "uk-ua", "en-bz", "es-py", "ml", "smj-no", "bn-in", "id-id", "th-th", "smj-se", "pa-in", "bg", "lv", "az-latn", "pl-pl", "arn", "es-us", "moh-ca", "en-jm", "rm", "kn-in", "fa-ir", "he", "sa", "hy", "az", "nn", "ar-iq", "ha", "ar-dz", "fr-ch", "sr-latn-rs", "zh-chs", "tg", "sr-cyrl-me", "es-pr", "qut", "bs", "it-ch", "es-pe", "nn-no", "de", "uk", "hu-hu", "ug", "br", "quz", "pa", "fy", "nl-nl", "lv-lv", "ar-qa", "bn", "bs-cyrl-ba", "kn", "bn-bd", "ro-ro", "mr", "uz", "eu", "as-in", "sw", "ii", "tg-cyrl-tj", "ne", "sv-se", "iu", "mt-mt", "ro", "de-li", "ii-cn", "iu-cans-ca", "fr-ca", "uz-cyrl-uz", "lb-lu", "sr-cyrl-cs", "el", "ja", "kl-gl", "oc-fr", "syr-sy", "zh-mo", "tr-tr", "sma", "sk-sk", "ur", "eu-es", "hi", "gsw", "tn", "sa-in", "kok-in", "gsw-fr", "hu", "mn-cyrl", "kk", "tt", "es-ar", "ar-kw", "qut-gt", "lo-la", "syr", "de-lu", "az-cyrl", "fo-fo", "sv-fi", "fa", "iu-latn", "si-lk", "fy-nl", "en-au", "fr-mc", "mn-mong-cn", "sr-cyrl-ba", "ta-in", "kok", "zh-hant", "hi-in", "wo-sn", "zh-cn", "gl-es", "af-za", "es-do", "lt", "af", "hsb"});
			//line 22 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("it"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (22) )) )})) ));
			//line 23 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("en"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (23) )) )})) ));
			//line 24 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("fr"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (24) )) )})) ));
			//line 25 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("it-it"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (25) )) )})) ));
			//line 26 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("en-us"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (26) )) )})) ));
			//line 27 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.contains(haxe.lang.Runtime.toString("en-gb"), ((haxe.root.Array<java.lang.String>) (list) ), haxe.lang.Runtime.toString(null), ((java.lang.Object) (new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testListLanguages"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (27) )) )})) ));
		}
		
	}
	
	
	public void testEmbedMany()
	{
		//line 31 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		int _g1 = 0;
		//line 31 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		int _g = this.x;
		//line 31 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		while (( _g1 < _g ))
		{
			//line 31 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			 ++ _g1;
			//line 32 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			{
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(thx.culture.Culture.fromObject(new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it", null, "it", true, false, "it", "ita", "Gregorian", "Italian", "italiano", null, null, null, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (16) )) )})));
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(thx.culture.Culture.fromObject(new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"en", null, "en", true, false, "en", "eng", "Gregorian", "English", "English", null, null, null, ",", "ENU"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (9) )) )})));
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(thx.culture.Culture.fromObject(new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"fr", null, "fr", true, false, "fr", "fra", "Gregorian", "French", "fran\u00e7ais", null, null, null, ";", "FRA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (12) )) )})));
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				java.lang.Object __temp_stmt7 = null;
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				{
					//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl1 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", ".", ".", ".", "-", "+", "\u20ac", "Non un numero reale", "-Infinito", "%", "\u2030", "+Infinito"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (9) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
					//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl2 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstFourDayWeek", "", "", "Monday", "Gregorian", "calendario gregoriano", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"domenica", "luned\u00ec", "marted\u00ec", "mercoled\u00ec", "gioved\u00ec", "venerd\u00ec", "sabato"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dom", "lun", "mar", "mer", "gio", "ven", "sab"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"do", "lu", "ma", "me", "gi", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (1) )) )});
					//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
					__temp_stmt7 = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"it-IT", __temp_odecl2, "it-IT", false, false, "it", "ita", "Gregorian", "Italian", "italiano", "Italy", "Italia", __temp_odecl1, ";", "ITA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1040) )) )});
				}
				
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(thx.culture.Culture.fromObject(__temp_stmt7));
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				java.lang.Object __temp_stmt8 = null;
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				{
					//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl3 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ".", ".", ".", ",", ",", ",", "-", "+", "\u00a3", "NaN", "-Infinity", "%", "\u2030", "Infinity"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (1) )) ), ((double) (((double) (1) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) )});
					//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl4 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "AM", "PM", "Monday", "Gregorian", "Gregorian Calendar", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}), "dd MMMM yyyy", "dd/MM/yyyy", "dd MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "dd MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (1) )) )});
					//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
					__temp_stmt8 = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"en-GB", __temp_odecl4, "en-GB", false, false, "en", "eng", "Gregorian", "English", "English", "United Kingdom", "United Kingdom", __temp_odecl3, ",", "ENG"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (2057) )) )});
				}
				
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(thx.culture.Culture.fromObject(__temp_stmt8));
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				java.lang.Object __temp_stmt9 = null;
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				{
					//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl5 = new haxe.lang.DynamicObject(new java.lang.String[]{"groupSizesCurrency", "groupSizesNumber", "groupSizesPercent", "separatorDecimalCurrency", "separatorDecimalNumber", "separatorDecimalPercent", "separatorGroupCurrency", "separatorGroupNumber", "separatorGroupPercent", "signNegative", "signPositive", "symbolCurrency", "symbolNaN", "symbolNegativeInfinity", "symbolPercent", "symbolPermille", "symbolPositiveInfinity"}, new java.lang.Object[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{3}), ",", ",", ",", "\u00a0", "\u00a0", "\u00a0", "-", "+", "\u20ac", "Non Num\u00e9rique", "-Infini", "%", "\u2030", "+Infini"}, new java.lang.String[]{"decimalDigitsCurrency", "decimalDigitsNumber", "decimalDigitsPercent", "patternNegativeCurrency", "patternNegativeNumber", "patternNegativePercent", "patternPositiveCurrency", "patternPositivePercent"}, new double[]{((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (2) )) ), ((double) (((double) (8) )) ), ((double) (((double) (1) )) ), ((double) (((double) (0) )) ), ((double) (((double) (3) )) ), ((double) (((double) (0) )) )});
					//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
					java.lang.Object __temp_odecl6 = new haxe.lang.DynamicObject(new java.lang.String[]{"calendarWeekRuleName", "designatorAm", "designatorPm", "firstDayOfWeekName", "nameCalendar", "nameCalendarNative", "nameDays", "nameDaysAbbreviated", "nameDaysShortest", "nameMonthGenitives", "nameMonthGenitivesAbbreviated", "nameMonths", "nameMonthsAbbreviated", "patternDateLong", "patternDateShort", "patternDateTimeFull", "patternDateTimeSortable", "patternMonthDay", "patternRfc1123", "patternTimeLong", "patternTimeShort", "patternUniversalSortable", "patternYearMonth", "separatorDate", "separatorTime"}, new java.lang.Object[]{"FirstDay", "", "", "Monday", "Gregorian", "calendrier gr\u00e9gorien", new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"di", "lu", "ma", "me", "je", "ve", "sa"}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janvier", "f\u00e9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\u00fbt", "septembre", "octobre", "novembre", "d\u00e9cembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janv.", "f\u00e9vr.", "mars", "avr.", "mai", "juin", "juil.", "ao\u00fbt", "sept.", "oct.", "nov.", "d\u00e9c.", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janvier", "f\u00e9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\u00fbt", "septembre", "octobre", "novembre", "d\u00e9cembre", ""}), new haxe.root.Array<java.lang.String>(new java.lang.String[]{"janv.", "f\u00e9vr.", "mars", "avr.", "mai", "juin", "juil.", "ao\u00fbt", "sept.", "oct.", "nov.", "d\u00e9c.", ""}), "dddd d MMMM yyyy", "dd/MM/yyyy", "dddd d MMMM yyyy HH:mm:ss", "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss", "d MMMM", "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'", "HH:mm:ss", "HH:mm", "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'", "MMMM yyyy", "/", ":"}, new java.lang.String[]{"calendarWeekRuleIndex", "firstDayOfWeekIndex"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (1) )) )});
					//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
					__temp_stmt9 = new haxe.lang.DynamicObject(new java.lang.String[]{"code", "dateTime", "ietf", "isNeutral", "isRightToLeft", "iso2", "iso3", "nameCalendar", "nameEnglish", "nameNative", "nameRegionEnglish", "nameRegionNative", "number", "separatorList", "win3"}, new java.lang.Object[]{"fr-FR", __temp_odecl6, "fr-FR", false, false, "fr", "fra", "Gregorian", "French", "fran\u00e7ais", "France", "France", __temp_odecl5, ";", "FRA"}, new java.lang.String[]{"lcid"}, new double[]{((double) (((double) (1036) )) )});
				}
				
				//line 36 "/HXvariability/culture/src/thx/culture/Embed.hx"
				thx.culture.Culture.register(thx.culture.Culture.fromObject(__temp_stmt9));
			}
			
			//line 33 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.notNull(thx.culture.Culture.getByIso2("fr"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbedMany"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (33) )) )}));
			//line 34 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.notNull(thx.culture.Culture.getByIso3("fra"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbedMany"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (34) )) )}));
			//line 35 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			utest.Assert.notNull(thx.culture.Culture.getByCode("fr-fr"), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx.culture.TestEmbed", "TestEmbed.hx", "testEmbedMany"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (35) )) )}));
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("x")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						this.x = ((int) (value) );
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						return value;
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("x")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						this.x = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						return value;
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case -739470234:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testEmbedMany")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEmbedMany")) );
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case 120:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("x")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						return this.x;
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case -1639087701:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testListLanguages")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testListLanguages")) );
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case -1204345497:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testEmbed")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "testEmbed")) );
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case 120:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("x")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						return ((double) (this.x) );
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			boolean __temp_executeDef1 = true;
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			switch (field.hashCode())
			{
				case -739470234:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testEmbedMany")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						this.testEmbedMany();
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case -1204345497:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testEmbed")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						this.testEmbed();
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
				case -1639087701:
				{
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					if (field.equals("testListLanguages")) 
					{
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						__temp_executeDef1 = false;
						//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
						this.testListLanguages();
					}
					
					//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
					break;
				}
				
				
			}
			
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			if (__temp_executeDef1) 
			{
				//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		baseArr.push("x");
		//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
		{
			//line 5 "/HXvariability/culture/test/thx/culture/TestEmbed.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


