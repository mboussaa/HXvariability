<?php

// Generated by Haxe 3.3.0
class haxe_EntryPoint {
	public function __construct(){}
	static $sleepLock;
	static $mutex;
	static $pending;
	static $threadCount = 0;
	static function wakeup() {}
	static function runInMainThread($f) {
		haxe_EntryPoint::$pending->push($f);
		haxe_EntryPoint::wakeup();
	}
	static function addThread($f) {
		haxe_EntryPoint::$threadCount++;
		haxe__EntryPoint_Thread::create(array(new _hx_lambda(array(&$f), "haxe_EntryPoint_0"), 'execute'));
	}
	static function processEvents() {
		while(true) {
			$f = haxe_EntryPoint::$pending->shift();
			if($f === null) {
				break;
			}
			call_user_func($f);
			unset($f);
		}
		$tmp = null;
		if(haxe_MainLoop::$pending === null) {
			$tmp = haxe_EntryPoint::$threadCount === 0;
		} else {
			$tmp = false;
		}
		if($tmp) {
			return -1;
		}
		return haxe_MainLoop::tick();
	}
	static function run() {
		while(true) {
			$nextTick = haxe_EntryPoint::processEvents();
			if($nextTick < 0) {
				break;
			}
			unset($nextTick);
		}
	}
	function __toString() { return 'haxe.EntryPoint'; }
}
haxe_EntryPoint::$sleepLock = new haxe__EntryPoint_Lock();
haxe_EntryPoint::$mutex = new haxe__EntryPoint_Mutex();
haxe_EntryPoint::$pending = new _hx_array(array());
function haxe_EntryPoint_0(&$f) {
	{
		call_user_func($f);
		haxe_EntryPoint::$threadCount--;
		if(haxe_EntryPoint::$threadCount === 0) {
			haxe_EntryPoint::wakeup();
		}
	}
}
