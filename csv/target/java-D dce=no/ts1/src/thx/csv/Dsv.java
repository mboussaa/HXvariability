// Generated by Haxe 3.3.0
package thx.csv;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Dsv extends haxe.lang.HxObject
{
	public Dsv(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Dsv()
	{
		//line 5 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		thx.csv.Dsv.__hx_ctor_thx_csv_Dsv(this);
	}
	
	
	public static void __hx_ctor_thx_csv_Dsv(thx.csv.Dsv __temp_me125)
	{
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.String>> decode(java.lang.String dsv, java.lang.Object options)
	{
		//line 7 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (( null == haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "quote", true)) )) 
		{
			//line 7 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			haxe.lang.Runtime.setField(options, "quote", "\"");
		}
		
		//line 8 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (( null == haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "escapedQuote", true)) )) 
		{
			//line 8 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			haxe.lang.Runtime.setField(options, "escapedQuote", ( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "quote", true)), "\"")) ? ("\"\"") : (( "\\" + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "quote", true)) )) ));
		}
		
		//line 9 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (( null == haxe.lang.Runtime.getField(options, "trimValues", true) )) 
		{
			//line 9 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			haxe.lang.Runtime.setField(options, "trimValues", false);
		}
		
		//line 10 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (( null == haxe.lang.Runtime.getField(options, "trimEmptyLines", true) )) 
		{
			//line 10 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			haxe.lang.Runtime.setField(options, "trimEmptyLines", true);
		}
		
		//line 11 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (haxe.lang.Runtime.toBool((haxe.lang.Runtime.getField(options, "trimEmptyLines", true)))) 
		{
			//line 12 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			dsv = thx.Strings.trimCharsRight(thx.Strings.trimCharsLeft(dsv, "\n\r"), "\n\r");
		}
		
		//line 13 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		haxe.root.Array<haxe.root.Array<java.lang.String>> result = ( (haxe.lang.Runtime.valEq(dsv, "")) ? (new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{})) : (new thx.csv.core.Parser(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "delimiter", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "quote", true)), haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "escapedQuote", true))).parse(dsv)) );
		//line 14 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (haxe.lang.Runtime.toBool((haxe.lang.Runtime.getField(options, "trimValues", true)))) 
		{
			//line 15 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			int _g = 0;
			//line 15 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			while (( _g < result.length ))
			{
				//line 15 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				haxe.root.Array<java.lang.String> row = result.__get(_g);
				//line 15 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				 ++ _g;
				//line 16 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				{
					//line 16 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					int _g2 = 0;
					//line 16 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					int _g1 = row.length;
					//line 16 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					while (( _g2 < _g1 ))
					{
						//line 16 "/HXvariability/csv/src/thx/csv/Dsv.hx"
						int i = _g2++;
						//line 17 "/HXvariability/csv/src/thx/csv/Dsv.hx"
						row.__set(i, row.__get(i).trim());
					}
					
				}
				
			}
			
		}
		
		//line 19 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		return result;
	}
	
	
	public static haxe.root.Array<java.lang.Object> decodeObjects(java.lang.String dsv, java.lang.Object options)
	{
		//line 23 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		return thx.csv.Dsv.arrayToObjects(thx.csv.Dsv.decode(dsv, options));
	}
	
	
	public static haxe.root.Array<java.lang.Object> arrayToObjects(haxe.root.Array<haxe.root.Array<java.lang.String>> arr)
	{
		//line 26 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		haxe.root.Array<java.lang.String> columns = arr.__get(0);
		//line 27 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (( null == columns )) 
		{
			//line 28 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			return new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		}
		
		//line 29 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		haxe.root.Array<java.lang.Object> result = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 29 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		int len = columns.length;
		//line 29 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		haxe.root.Array<java.lang.String> row = null;
		//line 29 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		java.lang.Object ob = null;
		//line 33 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		{
			//line 33 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			int _g1 = 1;
			//line 33 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			int _g = arr.length;
			//line 33 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			while (( _g1 < _g ))
			{
				//line 33 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				int r = _g1++;
				//line 34 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				ob = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{});
				//line 35 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				row = arr.__get(r);
				//line 36 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				{
					//line 36 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					int _g3 = 0;
					//line 36 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					while (( _g3 < len ))
					{
						//line 36 "/HXvariability/csv/src/thx/csv/Dsv.hx"
						int i = _g3++;
						//line 37 "/HXvariability/csv/src/thx/csv/Dsv.hx"
						haxe.root.Reflect.setField(ob, columns.__get(i), row.__get(i));
					}
					
				}
				
				//line 39 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				result.push(ob);
			}
			
		}
		
		//line 41 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		return result;
	}
	
	
	public static java.lang.String encode(haxe.root.Array<haxe.root.Array<java.lang.String>> data, java.lang.Object options)
	{
		//line 45 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (( null == haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "quote", true)) )) 
		{
			//line 45 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			haxe.lang.Runtime.setField(options, "quote", "\"");
		}
		
		//line 46 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (( null == haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "escapedQuote", true)) )) 
		{
			//line 46 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			haxe.lang.Runtime.setField(options, "escapedQuote", ( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "quote", true)), "\"")) ? ("\"\"") : (( "\\" + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "quote", true)) )) ));
		}
		
		//line 47 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (( null == haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "newline", true)) )) 
		{
			//line 47 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			haxe.lang.Runtime.setField(options, "newline", "\n");
		}
		
		//line 49 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		return ((haxe.root.Array<java.lang.String>) (((haxe.root.Array) (data.map(((haxe.lang.Function) (new thx.csv.Dsv_encode_49__Fun(options)) ))) )) ).join(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(options, "newline", true)));
	}
	
	
	public static java.lang.String encodeObjects(haxe.root.Array<java.lang.Object> data, java.lang.Object options)
	{
		//line 60 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		return thx.csv.Dsv.encode(thx.csv.Dsv.objectsToArray(data, new haxe.root.Array<java.lang.String>(new java.lang.String[]{})), options);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<java.lang.String>> objectsToArray(haxe.root.Array<java.lang.Object> objects, haxe.root.Array<java.lang.String> columns)
	{
		//line 63 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if (( null == columns )) 
		{
			//line 64 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			return thx.csv.Dsv.objectsToArray(objects, new haxe.root.Array<java.lang.String>(new java.lang.String[]{}));
		}
		
		//line 65 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		haxe.ds.StringMap<java.lang.Object> map = new haxe.ds.StringMap<java.lang.Object>();
		//line 65 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		haxe.root.Array<haxe.root.Array<java.lang.String>> result = new haxe.root.Array<haxe.root.Array<java.lang.String>>(new haxe.root.Array[]{columns});
		//line 65 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		haxe.root.Array<java.lang.String> collector = null;
		//line 65 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		haxe.root.Array<java.lang.String> row = null;
		//line 69 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		{
			//line 69 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			int _g1 = 0;
			//line 69 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			int _g = columns.length;
			//line 69 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			while (( _g1 < _g ))
			{
				//line 69 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				int i = _g1++;
				//line 70 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				map.set(columns.__get(i), i);
			}
			
		}
		
		//line 72 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		{
			//line 72 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			int _g2 = 0;
			//line 72 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			while (( _g2 < objects.length ))
			{
				//line 72 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				java.lang.Object object = objects.__get(_g2);
				//line 72 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				 ++ _g2;
				//line 73 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				collector = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
				//line 74 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				row = new haxe.root.Array<java.lang.String>(new java.lang.String[]{});
				//line 75 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				{
					//line 75 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					int _g11 = 0;
					//line 75 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					haxe.root.Array<java.lang.String> _g21 = haxe.root.Reflect.fields(object);
					//line 75 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					while (( _g11 < _g21.length ))
					{
						//line 75 "/HXvariability/csv/src/thx/csv/Dsv.hx"
						java.lang.String field = _g21.__get(_g11);
						//line 75 "/HXvariability/csv/src/thx/csv/Dsv.hx"
						 ++ _g11;
						//line 76 "/HXvariability/csv/src/thx/csv/Dsv.hx"
						java.lang.Object index = ((java.lang.Object) (map.get(field)) );
						//line 77 "/HXvariability/csv/src/thx/csv/Dsv.hx"
						if (( null == index )) 
						{
							//line 78 "/HXvariability/csv/src/thx/csv/Dsv.hx"
							collector.push(field);
						}
						else
						{
							//line 80 "/HXvariability/csv/src/thx/csv/Dsv.hx"
							row.__set(((int) (haxe.lang.Runtime.toInt(index)) ), haxe.lang.Runtime.toString(haxe.root.Reflect.field(object, field)));
						}
						
					}
					
				}
				
				//line 83 "/HXvariability/csv/src/thx/csv/Dsv.hx"
				if (( collector.length > 0 )) 
				{
					//line 85 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					return thx.csv.Dsv.objectsToArray(objects, columns.concat(collector));
				}
				else
				{
					//line 87 "/HXvariability/csv/src/thx/csv/Dsv.hx"
					result.push(row);
				}
				
			}
			
		}
		
		//line 90 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		return result;
	}
	
	
	public static boolean requiresQuotes(java.lang.String value, java.lang.String delimiter, java.lang.String quote)
	{
		//line 94 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		if ( ! ((( ( ( haxe.lang.StringExt.indexOf(value, delimiter, null) >= 0 ) || ( haxe.lang.StringExt.indexOf(value, quote, null) >= 0 ) ) || ( haxe.lang.StringExt.indexOf(value, "\n", null) >= 0 ) ))) ) 
		{
			//line 94 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			return ( haxe.lang.StringExt.indexOf(value, "\r", null) >= 0 );
		}
		else
		{
			//line 94 "/HXvariability/csv/src/thx/csv/Dsv.hx"
			return true;
		}
		
	}
	
	
	public static java.lang.String applyQuotes(java.lang.String value, java.lang.String quote, java.lang.String escapedQuote)
	{
		//line 98 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		value = haxe.root.StringTools.replace(value, quote, escapedQuote);
		//line 99 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		return ( ( ( "" + quote ) + value ) + quote );
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 5 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		return new thx.csv.Dsv(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 5 "/HXvariability/csv/src/thx/csv/Dsv.hx"
		return new thx.csv.Dsv();
	}
	
	
}


