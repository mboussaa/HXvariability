// Generated by Haxe 3.3.0
package thx._DateTimeUtc;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class DateTimeUtc_Impl_
{
	static
	{
		//line 29 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecond = 10000;
		//line 30 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64 = ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecond) );
		//line 31 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64 = ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) * ((long) (1000) ) )) );
		//line 32 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64 = ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) * ((long) (60) ) )) );
		//line 33 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64 = ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMinuteI64) ) * ((long) (60) ) )) );
		//line 34 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64 = ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerHourI64) ) * ((long) (24) ) )) );
		//line 49 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365});
		//line 50 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366});
	}
	
	public static int ticksPerMillisecond;
	
	public static long ticksPerMillisecondI64;
	
	public static long ticksPerSecondI64;
	
	public static long ticksPerMinuteI64;
	
	public static long ticksPerHourI64;
	
	public static long ticksPerDayI64;
	
	public static haxe.root.Array<java.lang.Object> daysToMonth365;
	
	public static haxe.root.Array<java.lang.Object> daysToMonth366;
	
	public static long fromInt64(long ticks)
	{
		//line 68 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (ticks) );
	}
	
	
	public static long create(int year, int month, int day, java.lang.Object hour, java.lang.Object minute, java.lang.Object second, java.lang.Object millisecond)
	{
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.Object __temp_millisecond33 = ( (haxe.lang.Runtime.eq(millisecond, null)) ? (((java.lang.Object) (0) )) : (millisecond) );
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.Object __temp_second32 = ( (haxe.lang.Runtime.eq(second, null)) ? (((java.lang.Object) (0) )) : (second) );
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.Object __temp_minute31 = ( (haxe.lang.Runtime.eq(minute, null)) ? (((java.lang.Object) (0) )) : (minute) );
		//line 102 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		java.lang.Object __temp_hour30 = ( (haxe.lang.Runtime.eq(hour, null)) ? (((java.lang.Object) (0) )) : (hour) );
		//line 103 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		__temp_second32 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_second32, ((int) (java.lang.Math.floor(( ((double) (haxe.lang.Runtime.toDouble(__temp_millisecond33)) ) / ((double) (1000) ) ))) ))) );
		//line 104 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		__temp_millisecond33 = ( ((int) (haxe.lang.Runtime.toInt(__temp_millisecond33)) ) % ((int) (1000) ) );
		//line 105 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( haxe.lang.Runtime.compare(__temp_millisecond33, 0) < 0 )) 
		{
			//line 106 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			__temp_millisecond33 = ((java.lang.Object) (haxe.lang.Runtime.plus(__temp_millisecond33, 1000)) );
		}
		
		//line 108 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		long ticks = ((long) (( ((long) (( ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.dateToTicks(year, month, day)) ) + ((long) (thx._Time.Time_Impl_.timeToTicks(((int) (haxe.lang.Runtime.toInt(__temp_hour30)) ), ((int) (haxe.lang.Runtime.toInt(__temp_minute31)) ), ((int) (haxe.lang.Runtime.toInt(__temp_second32)) ))) ) )) ) + ((long) (( haxe.lang.Runtime.toLong(__temp_millisecond33) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) )) );
		//line 112 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ((long) (ticks) );
	}
	
	
	public static boolean isLeapYear(int year)
	{
		//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ( year % 4 ) == 0 )) 
		{
			//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			if (( ( year % 100 ) == 0 )) 
			{
				//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return ( ( year % 400 ) == 0 );
			}
			else
			{
				//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				return true;
			}
			
		}
		else
		{
			//line 116 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return false;
		}
		
	}
	
	
	public static long dateToTicks(int year, int month, int day)
	{
		//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int[] month1 = new int[]{month};
		//line 118 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int[] year1 = new int[]{year};
		//line 119 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.lang.Function fixMonthYear = new thx._DateTimeUtc.DateTimeUtc_Impl__dateToTicks_119__Fun(year1, month1);
		//line 135 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		while (( day < 0 ))
		{
			//line 136 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			month1[0]--;
			//line 137 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			fixMonthYear.__hx_invoke0_o();
			//line 138 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			day += thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
		}
		
		//line 141 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		fixMonthYear.__hx_invoke0_o();
		//line 142 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		int days = 0;
		//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		while (true)
		{
			//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			days = thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
			//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			if ( ! ((( day > days ))) ) 
			{
				//line 143 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
				break;
			}
			
			//line 144 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			month1[0]++;
			//line 145 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			fixMonthYear.__hx_invoke0_o();
			//line 146 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			day -= days;
		}
		
		//line 149 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( day == 0 )) 
		{
			//line 150 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			month1[0] -= 1;
			//line 151 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			fixMonthYear.__hx_invoke0_o();
			//line 152 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			day = thx._DateTimeUtc.DateTimeUtc_Impl_.daysInMonth(year1[0], month1[0]);
		}
		
		//line 155 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		fixMonthYear.__hx_invoke0_o();
		//line 157 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return thx._DateTimeUtc.DateTimeUtc_Impl_.rawDateToTicks(year1[0], month1[0], day);
	}
	
	
	public static long rawDateToTicks(int year, int month, int day)
	{
		//line 161 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.root.Array<java.lang.Object> days = ( (thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(year)) ? (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366) : (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365) );
		//line 162 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		if (( ( day >= 1 ) && ( day <= ( ((int) (haxe.lang.Runtime.toInt(days.__get(month))) ) - ((int) (haxe.lang.Runtime.toInt(days.__get(( month - 1 )))) ) ) ) )) 
		{
			//line 163 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			int y = ( year - 1 );
			//line 164 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			int n = ( ( ( ( ( ( ( y * 365 ) + ((int) (( y / 4 )) ) ) - ((int) (( y / 100 )) ) ) + ((int) (( y / 400 )) ) ) + ((int) (haxe.lang.Runtime.toInt(days.__get(( month - 1 )))) ) ) + day ) - 1 );
			//line 165 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
			return ((long) (( ((long) (n) ) * ((long) (thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerDayI64) ) )) );
		}
		
		//line 167 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		throw haxe.lang.HaxeException.wrap(new thx.Error(( ( ( ( ( "bad year/month/day " + year ) + "/" ) + month ) + "/" ) + day ), null, new haxe.lang.DynamicObject(new java.lang.String[]{"className", "fileName", "methodName"}, new java.lang.Object[]{"thx._DateTimeUtc.DateTimeUtc_Impl_", "DateTimeUtc.hx", "rawDateToTicks"}, new java.lang.String[]{"lineNumber"}, new double[]{((double) (((double) (167) )) )})));
	}
	
	
	public static int daysInMonth(int year, int month)
	{
		//line 171 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		haxe.root.Array<java.lang.Object> days = ( (thx._DateTimeUtc.DateTimeUtc_Impl_.isLeapYear(year)) ? (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth366) : (thx._DateTimeUtc.DateTimeUtc_Impl_.daysToMonth365) );
		//line 172 "/usr/lib/haxe/lib/thx,core/0,40,1/src/thx/DateTimeUtc.hx"
		return ( ((int) (haxe.lang.Runtime.toInt(days.__get(month))) ) - ((int) (haxe.lang.Runtime.toInt(days.__get(( month - 1 )))) ) );
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}


