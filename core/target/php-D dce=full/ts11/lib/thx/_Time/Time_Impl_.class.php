<?php

// Generated by Haxe 3.3.0
class thx__Time_Time_Impl_ {
	public function __construct(){}
	static $zero;
	static function timeToTicks($hours, $minutes, $seconds) {
		$x = $hours * 3600;
		$x1 = new haxe__Int64____Int64($x >> 31, $x);
		$a = $x1;
		$x2 = $minutes * 60;
		$x3 = new haxe__Int64____Int64($x2 >> 31, $x2);
		$b = $x3;
		$high = $a->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $a->low) < 0) {
			++$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x4 = new haxe__Int64____Int64($high, $low);
		$a1 = $x4;
		$x5 = new haxe__Int64____Int64($seconds >> 31, $seconds);
		$b1 = $x5;
		$high1 = $a1->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $a1->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $a1->low) < 0) {
			++$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x6 = new haxe__Int64____Int64($high1, $low1);
		$totalSeconds = $x6;
		$b2 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$al = $totalSeconds->low & 65535;
		$ah = _hx_shift_right($totalSeconds->low, 16);
		$bl = $b2->low & 65535;
		$bh = _hx_shift_right($b2->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low2 = $p00;
		$high2 = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp2 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $p01) < 0) {
			++$high2;
			$tmp3 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp4 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp5 = $low2 + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $p10) < 0) {
			++$high2;
			$tmp6 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp7 = $high2 + (haxe__Int32_Int32_Impl_::mul($totalSeconds->low, $b2->high) + haxe__Int32_Int32_Impl_::mul($totalSeconds->high, $b2->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high2 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x7 = new haxe__Int64____Int64($high2, $low2);
		return $x7;
	}
	static function create($hours, $minutes = null, $seconds = null, $milliseconds = null) {
		if($milliseconds === null) {
			$milliseconds = 0;
		}
		if($seconds === null) {
			$seconds = 0;
		}
		if($minutes === null) {
			$minutes = 0;
		}
		$a = thx__Time_Time_Impl_::timeToTicks($hours, $minutes, $seconds);
		$x = new haxe__Int64____Int64($milliseconds >> 31, $milliseconds);
		$a1 = $x;
		$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$al = $a1->low & 65535;
		$ah = _hx_shift_right($a1->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a1->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a1->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		$b1 = $x1;
		$high1 = $a->high + $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $a->low + $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $a->low) < 0) {
			++$high1;
			$tmp6 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high1, $low1);
		return $x2;
	}
	function __toString() { return 'thx._Time.Time_Impl_'; }
}
thx__Time_Time_Impl_::$zero = thx__Time_Time_Impl__0();
function thx__Time_Time_Impl__0() {
	{
		$x = new haxe__Int64____Int64(0, 0);
		return $x;
	}
}
