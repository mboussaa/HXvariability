<?php

// Generated by Haxe 3.3.0
class thx__DateTimeUtc_DateTimeUtc_Impl_ {
	public function __construct(){}
	static $ticksPerMillisecond = 10000;
	static $ticksPerMillisecondI64;
	static $ticksPerSecondI64;
	static $ticksPerMinuteI64;
	static $ticksPerHourI64;
	static $ticksPerDayI64;
	static $daysToMonth365;
	static $daysToMonth366;
	static function fromInt64($ticks) {
		return $ticks;
	}
	static function create($year, $month, $day, $hour = null, $minute = null, $second = null, $millisecond = null) {
		if($millisecond === null) {
			$millisecond = 0;
		}
		if($second === null) {
			$second = 0;
		}
		if($minute === null) {
			$minute = 0;
		}
		if($hour === null) {
			$hour = 0;
		}
		$tmp = Math::floor($millisecond / 1000);
		$second += $tmp;
		$millisecond = _hx_mod($millisecond, 1000);
		$tmp1 = $millisecond < 0;
		if($tmp1) {
			$millisecond += 1000;
		}
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::dateToTicks($year, $month, $day);
		$b = thx__Time_Time_Impl_::timeToTicks($hour, $minute, $second);
		$high = $a->high + $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $a->low + $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $a->low) < 0) {
			++$high;
			$tmp2 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$a1 = $x;
		$x1 = new haxe__Int64____Int64($millisecond >> 31, $millisecond);
		$a2 = $x1;
		$b1 = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$al = $a2->low & 65535;
		$ah = _hx_shift_right($a2->low, 16);
		$bl = $b1->low & 65535;
		$bh = _hx_shift_right($b1->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low1 = $p00;
		$high1 = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $p01) < 0) {
			++$high1;
			$tmp4 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp6 = $low1 + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $tmp6 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low1, $p10) < 0) {
			++$high1;
			$tmp7 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp8 = $high1 + (haxe__Int32_Int32_Impl_::mul($a2->low, $b1->high) + haxe__Int32_Int32_Impl_::mul($a2->high, $b1->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high1 = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x2 = new haxe__Int64____Int64($high1, $low1);
		$b2 = $x2;
		$high2 = $a1->high + $b2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $a1->low + $b2->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low2, $a1->low) < 0) {
			++$high2;
			$tmp9 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x3 = new haxe__Int64____Int64($high2, $low2);
		return $x3;
	}
	static function isLeapYear($year) {
		if(_hx_mod($year, 4) === 0) {
			if(_hx_mod($year, 100) === 0) {
				return _hx_mod($year, 400) === 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	static function dateToTicks($year, $month, $day) {
		$fixMonthYear = array(new _hx_lambda(array(&$month, &$year), "thx__DateTimeUtc_DateTimeUtc_Impl__0"), 'execute');
		while($day < 0) {
			--$month;
			call_user_func($fixMonthYear);
			$day += thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($year, $month);
		}
		call_user_func($fixMonthYear);
		$days = null;
		while(true) {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($year, $month);
			if(!($day > $days)) {
				break;
			}
			++$month;
			call_user_func($fixMonthYear);
			$day -= $days;
		}
		if($day === 0) {
			--$month;
			call_user_func($fixMonthYear);
			$day = thx__DateTimeUtc_DateTimeUtc_Impl_::daysInMonth($year, $month);
		}
		call_user_func($fixMonthYear);
		return thx__DateTimeUtc_DateTimeUtc_Impl_::rawDateToTicks($year, $month, $day);
	}
	static function rawDateToTicks($year, $month, $day) {
		$days = null;
		if(thx__DateTimeUtc_DateTimeUtc_Impl_::isLeapYear($year)) {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth366;
		} else {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth365;
		}
		$tmp = null;
		if($day >= 1) {
			$tmp = $day <= $days->a[$month] - $days[$month - 1];
		} else {
			$tmp = false;
		}
		if($tmp) {
			$y = $year - 1;
			$tmp1 = $y * 365;
			$tmp2 = Std::int($y / 4);
			$tmp3 = $tmp1 + $tmp2;
			$tmp4 = Std::int($y / 100);
			$tmp5 = $tmp3 - $tmp4;
			$tmp6 = Std::int($y / 400);
			$n = $tmp5 + $tmp6 + $days[$month - 1] + $day - 1;
			$x = new haxe__Int64____Int64($n >> 31, $n);
			$a = $x;
			$b = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64;
			$al = $a->low & 65535;
			$ah = _hx_shift_right($a->low, 16);
			$bl = $b->low & 65535;
			$bh = _hx_shift_right($b->low, 16);
			$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
			$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
			$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
			$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
			$low = $p00;
			$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp7 = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p01 = $tmp7 >> haxe__Int32_Int32_Impl_::$extraBits;
			$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
				++$high;
				$tmp8 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp8 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp9 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
			$p10 = $tmp9 >> haxe__Int32_Int32_Impl_::$extraBits;
			$tmp10 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
			$low = $tmp10 >> haxe__Int32_Int32_Impl_::$extraBits;
			if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
				++$high;
				$tmp11 = $high << haxe__Int32_Int32_Impl_::$extraBits;
				$high = $tmp11 >> haxe__Int32_Int32_Impl_::$extraBits;
			}
			$tmp12 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp12 >> haxe__Int32_Int32_Impl_::$extraBits;
			$x1 = new haxe__Int64____Int64($high, $low);
			return $x1;
		}
		throw new HException(new thx_Error("bad year/month/day " . _hx_string_rec($year, "") . "/" . _hx_string_rec($month, "") . "/" . _hx_string_rec($day, ""), null, _hx_anonymous(array("fileName" => "DateTimeUtc.hx", "lineNumber" => 167, "className" => "thx._DateTimeUtc.DateTimeUtc_Impl_", "methodName" => "rawDateToTicks"))));
	}
	static function daysInMonth($year, $month) {
		$days = null;
		if(thx__DateTimeUtc_DateTimeUtc_Impl_::isLeapYear($year)) {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth366;
		} else {
			$days = thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth365;
		}
		return $days->a[$month] - $days[$month - 1];
	}
	function __toString() { return 'thx._DateTimeUtc.DateTimeUtc_Impl_'; }
}
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64 = thx__DateTimeUtc_DateTimeUtc_Impl__1();
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64 = thx__DateTimeUtc_DateTimeUtc_Impl__2();
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64 = thx__DateTimeUtc_DateTimeUtc_Impl__3();
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64 = thx__DateTimeUtc_DateTimeUtc_Impl__4();
thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerDayI64 = thx__DateTimeUtc_DateTimeUtc_Impl__5();
thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth365 = (new _hx_array(array(0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365)));
thx__DateTimeUtc_DateTimeUtc_Impl_::$daysToMonth366 = (new _hx_array(array(0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366)));
function thx__DateTimeUtc_DateTimeUtc_Impl__0(&$month, &$year) {
	{
		if($month === 0) {
			--$year;
			$month = 12;
		} else {
			if($month < 0) {
				$month = -$month;
				$years = Math::ceil($month / 12);
				$year -= $years;
				$month = $years * 12 - $month;
			} else {
				if($month > 12) {
					$years1 = Math::floor($month / 12);
					$year += $years1;
					$month -= $years1 * 12;
				}
			}
		}
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__1() {
	{
		$x = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecond;
		$x1 = new haxe__Int64____Int64($x >> 31, $x);
		return $x1;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__2() {
	{
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMillisecondI64;
		$x = new haxe__Int64____Int64(0, 1000);
		$b = $x;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		return $x1;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__3() {
	{
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerSecondI64;
		$x = new haxe__Int64____Int64(0, 60);
		$b = $x;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		return $x1;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__4() {
	{
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerMinuteI64;
		$x = new haxe__Int64____Int64(0, 60);
		$b = $x;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		return $x1;
	}
}
function thx__DateTimeUtc_DateTimeUtc_Impl__5() {
	{
		$a = thx__DateTimeUtc_DateTimeUtc_Impl_::$ticksPerHourI64;
		$x = new haxe__Int64____Int64(0, 24);
		$b = $x;
		$al = $a->low & 65535;
		$ah = _hx_shift_right($a->low, 16);
		$bl = $b->low & 65535;
		$bh = _hx_shift_right($b->low, 16);
		$p00 = haxe__Int32_Int32_Impl_::mul($al, $bl);
		$p10 = haxe__Int32_Int32_Impl_::mul($ah, $bl);
		$p01 = haxe__Int32_Int32_Impl_::mul($al, $bh);
		$p11 = haxe__Int32_Int32_Impl_::mul($ah, $bh);
		$low = $p00;
		$high = ($p11 + (_hx_shift_right($p01, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) + (_hx_shift_right($p10, 16)) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp = $p01 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p01 = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $p00 + $p01 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p01) < 0) {
			++$high;
			$tmp1 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp2 = $p10 << 16 << haxe__Int32_Int32_Impl_::$extraBits;
		$p10 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		$tmp3 = $low + $p10 << haxe__Int32_Int32_Impl_::$extraBits;
		$low = $tmp3 >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($low, $p10) < 0) {
			++$high;
			$tmp4 = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp4 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$tmp5 = $high + (haxe__Int32_Int32_Impl_::mul($a->low, $b->high) + haxe__Int32_Int32_Impl_::mul($a->high, $b->low) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits;
		$high = $tmp5 >> haxe__Int32_Int32_Impl_::$extraBits;
		$x1 = new haxe__Int64____Int64($high, $low);
		return $x1;
	}
}
