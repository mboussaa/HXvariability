<?php

// Generated by Haxe 3.3.0
class thx_TestDateTime {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
		$this->offset = thx__Time_Time_Impl_::create(-6, 0, 0, 0);
		$offset = $this->offset;
		$dateTime = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2015, 7, 26, 21, 40, 30, 0);
		$this1 = (new _hx_array(array($dateTime, $offset)));
		$this2 = $this1[0];
		$b = $offset;
		$high = $this2->high - $b->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low = $this2->low - $b->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this2->low, $b->low) < 0) {
			--$high;
			$tmp = $high << haxe__Int32_Int32_Impl_::$extraBits;
			$high = $tmp >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x = new haxe__Int64____Int64($high, $low);
		$this->date = (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x), $this1[1])));
		$offset1 = $this->offset;
		$dateTime1 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2015, 7, 27, 16, 40, 30, 0);
		$this3 = (new _hx_array(array($dateTime1, $offset1)));
		$this4 = $this3[0];
		$b1 = $offset1;
		$high1 = $this4->high - $b1->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low1 = $this4->low - $b1->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this4->low, $b1->low) < 0) {
			--$high1;
			$tmp1 = $high1 << haxe__Int32_Int32_Impl_::$extraBits;
			$high1 = $tmp1 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x1 = new haxe__Int64____Int64($high1, $low1);
		$this->tomorrow = (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x1), $this3[1])));
		$offset2 = thx__Time_Time_Impl_::$zero;
		$dateTime2 = thx__DateTimeUtc_DateTimeUtc_Impl_::create(2015, 7, 27, 3, 40, 30, 0);
		$this5 = (new _hx_array(array($dateTime2, $offset2)));
		$this6 = $this5[0];
		$b2 = $offset2;
		$high2 = $this6->high - $b2->high << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		$low2 = $this6->low - $b2->low << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		if(haxe__Int32_Int32_Impl_::ucompare($this6->low, $b2->low) < 0) {
			--$high2;
			$tmp2 = $high2 << haxe__Int32_Int32_Impl_::$extraBits;
			$high2 = $tmp2 >> haxe__Int32_Int32_Impl_::$extraBits;
		}
		$x2 = new haxe__Int64____Int64($high2, $low2);
		$this->dateutc = (new _hx_array(array(thx__DateTimeUtc_DateTimeUtc_Impl_::fromInt64($x2), $this5[1])));
	}}
	public $offset;
	public $date;
	public $tomorrow;
	public $dateutc;
	public $x;
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.TestDateTime'; }
}
