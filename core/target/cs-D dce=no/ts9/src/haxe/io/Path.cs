// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.io {
	public class Path : global::haxe.lang.HxObject {
		
		public Path(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Path(string path) {
			global::haxe.io.Path.__hx_ctor_haxe_io_Path(this, path);
		}
		
		
		public static void __hx_ctor_haxe_io_Path(global::haxe.io.Path __temp_me91, string path) {
			unchecked {
				switch (path) {
					case ".":
					case "..":
					{
						__temp_me91.dir = path;
						__temp_me91.file = "";
						return;
					}
					
					
				}
				
				int c1 = global::haxe.lang.StringExt.lastIndexOf(path, "/", default(global::haxe.lang.Null<int>));
				int c2 = global::haxe.lang.StringExt.lastIndexOf(path, "\\", default(global::haxe.lang.Null<int>));
				if (( c1 < c2 )) {
					__temp_me91.dir = global::haxe.lang.StringExt.substr(path, 0, new global::haxe.lang.Null<int>(c2, true));
					path = global::haxe.lang.StringExt.substr(path, ( c2 + 1 ), default(global::haxe.lang.Null<int>));
					__temp_me91.backslash = true;
				}
				else if (( c2 < c1 )) {
					__temp_me91.dir = global::haxe.lang.StringExt.substr(path, 0, new global::haxe.lang.Null<int>(c1, true));
					path = global::haxe.lang.StringExt.substr(path, ( c1 + 1 ), default(global::haxe.lang.Null<int>));
				}
				else {
					__temp_me91.dir = null;
				}
				
				int cp = global::haxe.lang.StringExt.lastIndexOf(path, ".", default(global::haxe.lang.Null<int>));
				if (( cp != -1 )) {
					__temp_me91.ext = global::haxe.lang.StringExt.substr(path, ( cp + 1 ), default(global::haxe.lang.Null<int>));
					__temp_me91.file = global::haxe.lang.StringExt.substr(path, 0, new global::haxe.lang.Null<int>(cp, true));
				}
				else {
					__temp_me91.ext = null;
					__temp_me91.file = path;
				}
				
			}
		}
		
		
		public static string withoutExtension(string path) {
			global::haxe.io.Path s = new global::haxe.io.Path(((string) (path) ));
			s.ext = null;
			return s.toString();
		}
		
		
		public static string withoutDirectory(string path) {
			global::haxe.io.Path s = new global::haxe.io.Path(((string) (path) ));
			s.dir = null;
			return s.toString();
		}
		
		
		public static string directory(string path) {
			global::haxe.io.Path s = new global::haxe.io.Path(((string) (path) ));
			if (string.Equals(s.dir, null)) {
				return "";
			}
			
			return s.dir;
		}
		
		
		public static string extension(string path) {
			global::haxe.io.Path s = new global::haxe.io.Path(((string) (path) ));
			if (string.Equals(s.ext, null)) {
				return "";
			}
			
			return s.ext;
		}
		
		
		public static string withExtension(string path, string ext) {
			global::haxe.io.Path s = new global::haxe.io.Path(((string) (path) ));
			s.ext = ext;
			return s.toString();
		}
		
		
		public static string @join(global::Array<object> paths) {
			unchecked {
				global::Array<object> paths1 = paths.filter(( (( global::haxe.io.Path_join_190__Fun.__hx_current != null )) ? (global::haxe.io.Path_join_190__Fun.__hx_current) : (global::haxe.io.Path_join_190__Fun.__hx_current = ((global::haxe.io.Path_join_190__Fun) (new global::haxe.io.Path_join_190__Fun()) )) ));
				if (( paths1.length == 0 )) {
					return "";
				}
				
				string path = global::haxe.lang.Runtime.toString(paths1[0]);
				{
					int _g1 = 1;
					int _g = paths1.length;
					while (( _g1 < _g )) {
						int i = _g1++;
						path = global::haxe.io.Path.addTrailingSlash(path);
						path = global::haxe.lang.Runtime.concat(path, global::haxe.lang.Runtime.toString(paths1[i]));
					}
					
				}
				
				return global::haxe.io.Path.normalize(path);
			}
		}
		
		
		public static string normalize(string path) {
			unchecked {
				path = global::haxe.lang.StringExt.split(path, "\\").@join("/");
				if (string.Equals(path, "/")) {
					return "/";
				}
				
				global::Array<object> target = new global::Array<object>(new object[]{});
				{
					int _g = 0;
					global::Array<object> _g1 = global::haxe.lang.StringExt.split(path, "/");
					while (( _g < _g1.length )) {
						string token = global::haxe.lang.Runtime.toString(_g1[_g]);
						 ++ _g;
						if (( ( string.Equals(token, "..") && ( target.length > 0 ) ) &&  ! (string.Equals(global::haxe.lang.Runtime.toString(target[( target.length - 1 )]), ".."))  )) {
							target.pop();
						}
						else if ( ! (string.Equals(token, ".")) ) {
							target.push(token);
						}
						
					}
					
				}
				
				string tmp = target.@join("/");
				new global::EReg("([^:])/+", "g").replace(tmp, global::haxe.lang.Runtime.concat("$1", "/"));
				global::System.Text.StringBuilder acc_b = new global::System.Text.StringBuilder();
				bool colon = false;
				bool slashes = false;
				{
					int _g11 = 0;
					int _g2 = tmp.Length;
					while (( _g11 < _g2 )) {
						global::haxe.lang.Null<int> _g21 = global::haxe.lang.StringExt.charCodeAt(tmp, _g11++);
						if ( ! (_g21.hasValue) ) {
							colon = false;
							if (slashes) {
								acc_b.Append(((string) ("/") ));
								slashes = false;
							}
							
							acc_b.Append(((string) (global::Std.@string(new string(((char) ((_g21).@value) ), 1))) ));
						}
						else {
							switch (((_g21)).@value) {
								case 47:
								{
									if ( ! (colon) ) {
										slashes = true;
									}
									else {
										colon = false;
										if (slashes) {
											acc_b.Append(((string) ("/") ));
											slashes = false;
										}
										
										acc_b.Append(((string) (global::Std.@string(new string(((char) ((_g21).@value) ), 1))) ));
									}
									
									break;
								}
								
								
								case 58:
								{
									acc_b.Append(((string) (":") ));
									colon = true;
									break;
								}
								
								
								default:
								{
									colon = false;
									if (slashes) {
										acc_b.Append(((string) ("/") ));
										slashes = false;
									}
									
									acc_b.Append(((string) (global::Std.@string(new string(((char) ((_g21).@value) ), 1))) ));
									break;
								}
								
							}
							
						}
						
					}
					
				}
				
				return acc_b.ToString();
			}
		}
		
		
		public static string addTrailingSlash(string path) {
			unchecked {
				if (( path.Length == 0 )) {
					return "/";
				}
				
				int c1 = global::haxe.lang.StringExt.lastIndexOf(path, "/", default(global::haxe.lang.Null<int>));
				int c2 = global::haxe.lang.StringExt.lastIndexOf(path, "\\", default(global::haxe.lang.Null<int>));
				if (( c1 < c2 )) {
					if (( c2 != ( path.Length - 1 ) )) {
						return global::haxe.lang.Runtime.concat(path, "\\");
					}
					else {
						return path;
					}
					
				}
				else if (( c1 != ( path.Length - 1 ) )) {
					return global::haxe.lang.Runtime.concat(path, "/");
				}
				else {
					return path;
				}
				
			}
		}
		
		
		public static string removeTrailingSlashes(string path) {
			unchecked {
				while (true) {
					global::haxe.lang.Null<int> _g = global::haxe.lang.StringExt.charCodeAt(path, ( path.Length - 1 ));
					if ( ! (_g.hasValue) ) {
						break;
					}
					else {
						switch (((_g)).@value) {
							case 47:
							case 92:
							{
								path = global::haxe.lang.StringExt.substr(path, 0, new global::haxe.lang.Null<int>(-1, true));
								break;
							}
							
							
							default:
							{
								goto label1;
							}
							
						}
						
					}
					
				}
				
				label1: {};
				return path;
			}
		}
		
		
		public static bool isAbsolute(string path) {
			unchecked {
				if (path.StartsWith("/")) {
					return true;
				}
				
				if (string.Equals(global::haxe.lang.StringExt.charAt(path, 1), ":")) {
					return true;
				}
				
				return false;
			}
		}
		
		
		public static string unescape(string path) {
			return new global::EReg("-x([0-9][0-9])", "g").map(path, ( (( global::haxe.io.Path_unescape_309__Fun.__hx_current != null )) ? (global::haxe.io.Path_unescape_309__Fun.__hx_current) : (global::haxe.io.Path_unescape_309__Fun.__hx_current = ((global::haxe.io.Path_unescape_309__Fun) (new global::haxe.io.Path_unescape_309__Fun()) )) ));
		}
		
		
		public static string escape(string path, global::haxe.lang.Null<bool> allowSlashes) {
			bool __temp_allowSlashes90 = ( ( ! (allowSlashes.hasValue) ) ? (false) : ((allowSlashes).@value) );
			return (( (__temp_allowSlashes90) ? (new global::EReg("[^A-Za-z0-9_/\\\\\\.]", "g")) : (new global::EReg("[^A-Za-z0-9_\\.]", "g")) )).map(path, ( (( global::haxe.io.Path_escape_314__Fun.__hx_current != null )) ? (global::haxe.io.Path_escape_314__Fun.__hx_current) : (global::haxe.io.Path_escape_314__Fun.__hx_current = ((global::haxe.io.Path_escape_314__Fun) (new global::haxe.io.Path_escape_314__Fun()) )) ));
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::haxe.io.Path(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::haxe.io.Path(global::haxe.lang.Runtime.toString(arr[0]));
		}
		
		
		public string dir;
		
		public string file;
		
		public string ext;
		
		public bool backslash;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat((( (string.Equals(this.dir, null)) ? ("") : (global::haxe.lang.Runtime.concat(this.dir, (( (this.backslash) ? ("\\") : ("/") )))) )), this.file), (( (string.Equals(this.ext, null)) ? ("") : (global::haxe.lang.Runtime.concat(".", this.ext)) )));
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1212528822:
					{
						this.backslash = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 5049505:
					{
						this.ext = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1136381564:
					{
						this.file = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 4996429:
					{
						this.dir = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 1212528822:
					{
						return this.backslash;
					}
					
					
					case 5049505:
					{
						return this.ext;
					}
					
					
					case 1136381564:
					{
						return this.file;
					}
					
					
					case 4996429:
					{
						return this.dir;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("backslash");
			baseArr.push("ext");
			baseArr.push("file");
			baseArr.push("dir");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.io {
	public class Path_join_190__Fun : global::haxe.lang.Function {
		
		public Path_join_190__Fun() : base(1, 0) {
		}
		
		
		public static global::haxe.io.Path_join_190__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			string s = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.toString(__fn_float1)) : (global::haxe.lang.Runtime.toString(__fn_dyn1)) );
			if ( ! (string.Equals(s, null)) ) {
				return  ! (string.Equals(s, "")) ;
			}
			else {
				return false;
			}
			
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.io {
	public class Path_unescape_309__Fun : global::haxe.lang.Function {
		
		public Path_unescape_309__Fun() : base(1, 0) {
		}
		
		
		public static global::haxe.io.Path_unescape_309__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				global::EReg regex = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::EReg) (((object) (__fn_float1) )) )) : (((global::EReg) (__fn_dyn1) )) );
				return new string(((char) ((global::Std.parseInt(regex.matched(1))).@value) ), 1);
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.io {
	public class Path_escape_314__Fun : global::haxe.lang.Function {
		
		public Path_escape_314__Fun() : base(1, 0) {
		}
		
		
		public static global::haxe.io.Path_escape_314__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			global::EReg v = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::EReg) (((object) (__fn_float1) )) )) : (((global::EReg) (__fn_dyn1) )) );
			return global::haxe.lang.Runtime.concat("-x", global::haxe.lang.Runtime.toString((global::haxe.lang.StringExt.charCodeAt(v.matched(0), 0)).toDynamic()));
		}
		
		
	}
}


