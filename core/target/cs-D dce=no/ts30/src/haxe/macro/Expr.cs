// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Constant : global::haxe.lang.ParamEnum {
		
		public Constant(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"CInt", "CFloat", "CString", "CIdent", "CRegexp"};
		
		public static global::haxe.macro.Constant CInt(string v) {
			return new global::haxe.macro.Constant(0, new object[]{v});
		}
		
		
		public static global::haxe.macro.Constant CFloat(string f) {
			unchecked {
				return new global::haxe.macro.Constant(1, new object[]{f});
			}
		}
		
		
		public static global::haxe.macro.Constant CString(string s) {
			unchecked {
				return new global::haxe.macro.Constant(2, new object[]{s});
			}
		}
		
		
		public static global::haxe.macro.Constant CIdent(string s) {
			unchecked {
				return new global::haxe.macro.Constant(3, new object[]{s});
			}
		}
		
		
		public static global::haxe.macro.Constant CRegexp(string r, string opt) {
			unchecked {
				return new global::haxe.macro.Constant(4, new object[]{r, opt});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.Constant.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Binop : global::haxe.lang.ParamEnum {
		
		public Binop(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"OpAdd", "OpMult", "OpDiv", "OpSub", "OpAssign", "OpEq", "OpNotEq", "OpGt", "OpGte", "OpLt", "OpLte", "OpAnd", "OpOr", "OpXor", "OpBoolAnd", "OpBoolOr", "OpShl", "OpShr", "OpUShr", "OpMod", "OpAssignOp", "OpInterval", "OpArrow"};
		
		public static readonly global::haxe.macro.Binop OpAdd = new global::haxe.macro.Binop(0, null);
		
		public static readonly global::haxe.macro.Binop OpMult = new global::haxe.macro.Binop(1, null);
		
		public static readonly global::haxe.macro.Binop OpDiv = new global::haxe.macro.Binop(2, null);
		
		public static readonly global::haxe.macro.Binop OpSub = new global::haxe.macro.Binop(3, null);
		
		public static readonly global::haxe.macro.Binop OpAssign = new global::haxe.macro.Binop(4, null);
		
		public static readonly global::haxe.macro.Binop OpEq = new global::haxe.macro.Binop(5, null);
		
		public static readonly global::haxe.macro.Binop OpNotEq = new global::haxe.macro.Binop(6, null);
		
		public static readonly global::haxe.macro.Binop OpGt = new global::haxe.macro.Binop(7, null);
		
		public static readonly global::haxe.macro.Binop OpGte = new global::haxe.macro.Binop(8, null);
		
		public static readonly global::haxe.macro.Binop OpLt = new global::haxe.macro.Binop(9, null);
		
		public static readonly global::haxe.macro.Binop OpLte = new global::haxe.macro.Binop(10, null);
		
		public static readonly global::haxe.macro.Binop OpAnd = new global::haxe.macro.Binop(11, null);
		
		public static readonly global::haxe.macro.Binop OpOr = new global::haxe.macro.Binop(12, null);
		
		public static readonly global::haxe.macro.Binop OpXor = new global::haxe.macro.Binop(13, null);
		
		public static readonly global::haxe.macro.Binop OpBoolAnd = new global::haxe.macro.Binop(14, null);
		
		public static readonly global::haxe.macro.Binop OpBoolOr = new global::haxe.macro.Binop(15, null);
		
		public static readonly global::haxe.macro.Binop OpShl = new global::haxe.macro.Binop(16, null);
		
		public static readonly global::haxe.macro.Binop OpShr = new global::haxe.macro.Binop(17, null);
		
		public static readonly global::haxe.macro.Binop OpUShr = new global::haxe.macro.Binop(18, null);
		
		public static readonly global::haxe.macro.Binop OpMod = new global::haxe.macro.Binop(19, null);
		
		public static global::haxe.macro.Binop OpAssignOp(global::haxe.macro.Binop op) {
			unchecked {
				return new global::haxe.macro.Binop(20, new object[]{op});
			}
		}
		
		
		public static readonly global::haxe.macro.Binop OpInterval = new global::haxe.macro.Binop(21, null);
		
		public static readonly global::haxe.macro.Binop OpArrow = new global::haxe.macro.Binop(22, null);
		
		public override string getTag() {
			return global::haxe.macro.Binop.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Unop : global::haxe.lang.Enum {
		
		public Unop(int index) : base(index) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"OpIncrement", "OpDecrement", "OpNot", "OpNeg", "OpNegBits"};
		
		public static readonly global::haxe.macro.Unop OpIncrement = new global::haxe.macro.Unop(0);
		
		public static readonly global::haxe.macro.Unop OpDecrement = new global::haxe.macro.Unop(1);
		
		public static readonly global::haxe.macro.Unop OpNot = new global::haxe.macro.Unop(2);
		
		public static readonly global::haxe.macro.Unop OpNeg = new global::haxe.macro.Unop(3);
		
		public static readonly global::haxe.macro.Unop OpNegBits = new global::haxe.macro.Unop(4);
		
		public override string getTag() {
			return global::haxe.macro.Unop.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class ExprDef : global::haxe.lang.ParamEnum {
		
		public ExprDef(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"EConst", "EArray", "EBinop", "EField", "EParenthesis", "EObjectDecl", "EArrayDecl", "ECall", "ENew", "EUnop", "EVars", "EFunction", "EBlock", "EFor", "EIn", "EIf", "EWhile", "ESwitch", "ETry", "EReturn", "EBreak", "EContinue", "EUntyped", "EThrow", "ECast", "EDisplay", "EDisplayNew", "ETernary", "ECheckType", "EMeta"};
		
		public static global::haxe.macro.ExprDef EConst(global::haxe.macro.Constant c) {
			return new global::haxe.macro.ExprDef(0, new object[]{c});
		}
		
		
		public static global::haxe.macro.ExprDef EArray(object e1, object e2) {
			unchecked {
				return new global::haxe.macro.ExprDef(1, new object[]{e1, e2});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EBinop(global::haxe.macro.Binop op, object e1, object e2) {
			unchecked {
				return new global::haxe.macro.ExprDef(2, new object[]{op, e1, e2});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EField(object e, string field) {
			unchecked {
				return new global::haxe.macro.ExprDef(3, new object[]{e, field});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EParenthesis(object e) {
			unchecked {
				return new global::haxe.macro.ExprDef(4, new object[]{e});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EObjectDecl(global::Array<object> fields) {
			unchecked {
				return new global::haxe.macro.ExprDef(5, new object[]{fields});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EArrayDecl(global::Array<object> values) {
			unchecked {
				return new global::haxe.macro.ExprDef(6, new object[]{values});
			}
		}
		
		
		public static global::haxe.macro.ExprDef ECall(object e, global::Array<object> @params) {
			unchecked {
				return new global::haxe.macro.ExprDef(7, new object[]{e, @params});
			}
		}
		
		
		public static global::haxe.macro.ExprDef ENew(object t, global::Array<object> @params) {
			unchecked {
				return new global::haxe.macro.ExprDef(8, new object[]{t, @params});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EUnop(global::haxe.macro.Unop op, bool postFix, object e) {
			unchecked {
				return new global::haxe.macro.ExprDef(9, new object[]{op, postFix, e});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EVars(global::Array<object> vars) {
			unchecked {
				return new global::haxe.macro.ExprDef(10, new object[]{vars});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EFunction(string name, object f) {
			unchecked {
				return new global::haxe.macro.ExprDef(11, new object[]{name, f});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EBlock(global::Array<object> exprs) {
			unchecked {
				return new global::haxe.macro.ExprDef(12, new object[]{exprs});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EFor(object it, object expr) {
			unchecked {
				return new global::haxe.macro.ExprDef(13, new object[]{it, expr});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EIn(object e1, object e2) {
			unchecked {
				return new global::haxe.macro.ExprDef(14, new object[]{e1, e2});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EIf(object econd, object eif, object eelse) {
			unchecked {
				return new global::haxe.macro.ExprDef(15, new object[]{econd, eif, eelse});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EWhile(object econd, object e, bool normalWhile) {
			unchecked {
				return new global::haxe.macro.ExprDef(16, new object[]{econd, e, normalWhile});
			}
		}
		
		
		public static global::haxe.macro.ExprDef ESwitch(object e, global::Array<object> cases, object edef) {
			unchecked {
				return new global::haxe.macro.ExprDef(17, new object[]{e, cases, edef});
			}
		}
		
		
		public static global::haxe.macro.ExprDef ETry(object e, global::Array<object> catches) {
			unchecked {
				return new global::haxe.macro.ExprDef(18, new object[]{e, catches});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EReturn(object e) {
			unchecked {
				return new global::haxe.macro.ExprDef(19, new object[]{e});
			}
		}
		
		
		public static readonly global::haxe.macro.ExprDef EBreak = new global::haxe.macro.ExprDef(20, null);
		
		public static readonly global::haxe.macro.ExprDef EContinue = new global::haxe.macro.ExprDef(21, null);
		
		public static global::haxe.macro.ExprDef EUntyped(object e) {
			unchecked {
				return new global::haxe.macro.ExprDef(22, new object[]{e});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EThrow(object e) {
			unchecked {
				return new global::haxe.macro.ExprDef(23, new object[]{e});
			}
		}
		
		
		public static global::haxe.macro.ExprDef ECast(object e, global::haxe.macro.ComplexType t) {
			unchecked {
				return new global::haxe.macro.ExprDef(24, new object[]{e, t});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EDisplay(object e, bool isCall) {
			unchecked {
				return new global::haxe.macro.ExprDef(25, new object[]{e, isCall});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EDisplayNew(object t) {
			unchecked {
				return new global::haxe.macro.ExprDef(26, new object[]{t});
			}
		}
		
		
		public static global::haxe.macro.ExprDef ETernary(object econd, object eif, object eelse) {
			unchecked {
				return new global::haxe.macro.ExprDef(27, new object[]{econd, eif, eelse});
			}
		}
		
		
		public static global::haxe.macro.ExprDef ECheckType(object e, global::haxe.macro.ComplexType t) {
			unchecked {
				return new global::haxe.macro.ExprDef(28, new object[]{e, t});
			}
		}
		
		
		public static global::haxe.macro.ExprDef EMeta(object s, object e) {
			unchecked {
				return new global::haxe.macro.ExprDef(29, new object[]{s, e});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.ExprDef.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class ComplexType : global::haxe.lang.ParamEnum {
		
		public ComplexType(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"TPath", "TFunction", "TAnonymous", "TParent", "TExtend", "TOptional"};
		
		public static global::haxe.macro.ComplexType TPath(object p) {
			return new global::haxe.macro.ComplexType(0, new object[]{p});
		}
		
		
		public static global::haxe.macro.ComplexType TFunction(global::Array<object> args, global::haxe.macro.ComplexType ret) {
			unchecked {
				return new global::haxe.macro.ComplexType(1, new object[]{args, ret});
			}
		}
		
		
		public static global::haxe.macro.ComplexType TAnonymous(global::Array<object> fields) {
			unchecked {
				return new global::haxe.macro.ComplexType(2, new object[]{fields});
			}
		}
		
		
		public static global::haxe.macro.ComplexType TParent(global::haxe.macro.ComplexType t) {
			unchecked {
				return new global::haxe.macro.ComplexType(3, new object[]{t});
			}
		}
		
		
		public static global::haxe.macro.ComplexType TExtend(global::Array<object> p, global::Array<object> fields) {
			unchecked {
				return new global::haxe.macro.ComplexType(4, new object[]{p, fields});
			}
		}
		
		
		public static global::haxe.macro.ComplexType TOptional(global::haxe.macro.ComplexType t) {
			unchecked {
				return new global::haxe.macro.ComplexType(5, new object[]{t});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.ComplexType.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class TypeParam : global::haxe.lang.ParamEnum {
		
		public TypeParam(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"TPType", "TPExpr"};
		
		public static global::haxe.macro.TypeParam TPType(global::haxe.macro.ComplexType t) {
			return new global::haxe.macro.TypeParam(0, new object[]{t});
		}
		
		
		public static global::haxe.macro.TypeParam TPExpr(object e) {
			unchecked {
				return new global::haxe.macro.TypeParam(1, new object[]{e});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.TypeParam.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Access : global::haxe.lang.Enum {
		
		public Access(int index) : base(index) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"APublic", "APrivate", "AStatic", "AOverride", "ADynamic", "AInline", "AMacro"};
		
		public static readonly global::haxe.macro.Access APublic = new global::haxe.macro.Access(0);
		
		public static readonly global::haxe.macro.Access APrivate = new global::haxe.macro.Access(1);
		
		public static readonly global::haxe.macro.Access AStatic = new global::haxe.macro.Access(2);
		
		public static readonly global::haxe.macro.Access AOverride = new global::haxe.macro.Access(3);
		
		public static readonly global::haxe.macro.Access ADynamic = new global::haxe.macro.Access(4);
		
		public static readonly global::haxe.macro.Access AInline = new global::haxe.macro.Access(5);
		
		public static readonly global::haxe.macro.Access AMacro = new global::haxe.macro.Access(6);
		
		public override string getTag() {
			return global::haxe.macro.Access.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class FieldType : global::haxe.lang.ParamEnum {
		
		public FieldType(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"FVar", "FFun", "FProp"};
		
		public static global::haxe.macro.FieldType FVar(global::haxe.macro.ComplexType t, object e) {
			return new global::haxe.macro.FieldType(0, new object[]{t, e});
		}
		
		
		public static global::haxe.macro.FieldType FFun(object f) {
			unchecked {
				return new global::haxe.macro.FieldType(1, new object[]{f});
			}
		}
		
		
		public static global::haxe.macro.FieldType FProp(string @get, string @set, global::haxe.macro.ComplexType t, object e) {
			unchecked {
				return new global::haxe.macro.FieldType(2, new object[]{@get, @set, t, e});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.FieldType.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class TypeDefKind : global::haxe.lang.ParamEnum {
		
		public TypeDefKind(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"TDEnum", "TDStructure", "TDClass", "TDAlias", "TDAbstract"};
		
		public static readonly global::haxe.macro.TypeDefKind TDEnum = new global::haxe.macro.TypeDefKind(0, null);
		
		public static readonly global::haxe.macro.TypeDefKind TDStructure = new global::haxe.macro.TypeDefKind(1, null);
		
		public static global::haxe.macro.TypeDefKind TDClass(object superClass, global::Array<object> interfaces, global::haxe.lang.Null<bool> isInterface) {
			unchecked {
				return new global::haxe.macro.TypeDefKind(2, new object[]{superClass, interfaces, (isInterface).toDynamic()});
			}
		}
		
		
		public static global::haxe.macro.TypeDefKind TDAlias(global::haxe.macro.ComplexType t) {
			unchecked {
				return new global::haxe.macro.TypeDefKind(3, new object[]{t});
			}
		}
		
		
		public static global::haxe.macro.TypeDefKind TDAbstract(global::haxe.macro.ComplexType tthis, global::Array<object> @from, global::Array<object> to) {
			unchecked {
				return new global::haxe.macro.TypeDefKind(4, new object[]{tthis, @from, to});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.TypeDefKind.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Error : global::haxe.lang.HxObject {
		
		public Error(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Error(string m, object p) {
			global::haxe.macro.Error.__hx_ctor_haxe_macro_Error(this, m, p);
		}
		
		
		public static void __hx_ctor_haxe_macro_Error(global::haxe.macro.Error __temp_me84, string m, object p) {
			__temp_me84.message = m;
			__temp_me84.pos = p;
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::haxe.macro.Error(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			unchecked {
				return new global::haxe.macro.Error(global::haxe.lang.Runtime.toString(arr[0]), arr[1]);
			}
		}
		
		
		public string message;
		
		public object pos;
		
		public virtual string toString() {
			return this.message;
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5594516:
					{
						this.pos = ((object) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5594516:
					{
						this.pos = ((object) (@value) );
						return @value;
					}
					
					
					case 437335495:
					{
						this.message = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 5594516:
					{
						return this.pos;
					}
					
					
					case 437335495:
					{
						return this.message;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5594516:
					{
						return ((double) (global::haxe.lang.Runtime.toDouble(this.pos)) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("pos");
			baseArr.push("message");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class ImportMode : global::haxe.lang.ParamEnum {
		
		public ImportMode(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"INormal", "IAsName", "IAll"};
		
		public static readonly global::haxe.macro.ImportMode INormal = new global::haxe.macro.ImportMode(0, null);
		
		public static global::haxe.macro.ImportMode IAsName(string alias) {
			unchecked {
				return new global::haxe.macro.ImportMode(1, new object[]{alias});
			}
		}
		
		
		public static readonly global::haxe.macro.ImportMode IAll = new global::haxe.macro.ImportMode(2, null);
		
		public override string getTag() {
			return global::haxe.macro.ImportMode.__hx_constructs[this.index];
		}
		
		
	}
}


