// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class Type : global::haxe.lang.ParamEnum {
		
		public Type(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"TMono", "TEnum", "TInst", "TType", "TFun", "TAnonymous", "TDynamic", "TLazy", "TAbstract"};
		
		public static global::haxe.macro.Type TMono(object t) {
			return new global::haxe.macro.Type(0, new object[]{t});
		}
		
		
		public static global::haxe.macro.Type TEnum(object t, global::Array<object> @params) {
			unchecked {
				return new global::haxe.macro.Type(1, new object[]{t, @params});
			}
		}
		
		
		public static global::haxe.macro.Type TInst(object t, global::Array<object> @params) {
			unchecked {
				return new global::haxe.macro.Type(2, new object[]{t, @params});
			}
		}
		
		
		public static global::haxe.macro.Type TType(object t, global::Array<object> @params) {
			unchecked {
				return new global::haxe.macro.Type(3, new object[]{t, @params});
			}
		}
		
		
		public static global::haxe.macro.Type TFun(global::Array<object> args, global::haxe.macro.Type ret) {
			unchecked {
				return new global::haxe.macro.Type(4, new object[]{args, ret});
			}
		}
		
		
		public static global::haxe.macro.Type TAnonymous(object a) {
			unchecked {
				return new global::haxe.macro.Type(5, new object[]{a});
			}
		}
		
		
		public static global::haxe.macro.Type TDynamic(global::haxe.macro.Type t) {
			unchecked {
				return new global::haxe.macro.Type(6, new object[]{t});
			}
		}
		
		
		public static global::haxe.macro.Type TLazy(global::haxe.lang.Function f) {
			unchecked {
				return new global::haxe.macro.Type(7, new object[]{f});
			}
		}
		
		
		public static global::haxe.macro.Type TAbstract(object t, global::Array<object> @params) {
			unchecked {
				return new global::haxe.macro.Type(8, new object[]{t, @params});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.Type.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class AnonStatus : global::haxe.lang.ParamEnum {
		
		public AnonStatus(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"AClosed", "AOpened", "AConst", "AExtend", "AClassStatics", "AEnumStatics", "AAbstractStatics"};
		
		public static readonly global::haxe.macro.AnonStatus AClosed = new global::haxe.macro.AnonStatus(0, null);
		
		public static readonly global::haxe.macro.AnonStatus AOpened = new global::haxe.macro.AnonStatus(1, null);
		
		public static readonly global::haxe.macro.AnonStatus AConst = new global::haxe.macro.AnonStatus(2, null);
		
		public static global::haxe.macro.AnonStatus AExtend(object tl) {
			unchecked {
				return new global::haxe.macro.AnonStatus(3, new object[]{tl});
			}
		}
		
		
		public static global::haxe.macro.AnonStatus AClassStatics(object t) {
			unchecked {
				return new global::haxe.macro.AnonStatus(4, new object[]{t});
			}
		}
		
		
		public static global::haxe.macro.AnonStatus AEnumStatics(object t) {
			unchecked {
				return new global::haxe.macro.AnonStatus(5, new object[]{t});
			}
		}
		
		
		public static global::haxe.macro.AnonStatus AAbstractStatics(object t) {
			unchecked {
				return new global::haxe.macro.AnonStatus(6, new object[]{t});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.AnonStatus.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class ClassKind : global::haxe.lang.ParamEnum {
		
		public ClassKind(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"KNormal", "KTypeParameter", "KExtension", "KExpr", "KGeneric", "KGenericInstance", "KMacroType", "KAbstractImpl", "KGenericBuild"};
		
		public static readonly global::haxe.macro.ClassKind KNormal = new global::haxe.macro.ClassKind(0, null);
		
		public static global::haxe.macro.ClassKind KTypeParameter(global::Array<object> constraints) {
			unchecked {
				return new global::haxe.macro.ClassKind(1, new object[]{constraints});
			}
		}
		
		
		public static global::haxe.macro.ClassKind KExtension(object cl, global::Array<object> @params) {
			unchecked {
				return new global::haxe.macro.ClassKind(2, new object[]{cl, @params});
			}
		}
		
		
		public static global::haxe.macro.ClassKind KExpr(object expr) {
			unchecked {
				return new global::haxe.macro.ClassKind(3, new object[]{expr});
			}
		}
		
		
		public static readonly global::haxe.macro.ClassKind KGeneric = new global::haxe.macro.ClassKind(4, null);
		
		public static global::haxe.macro.ClassKind KGenericInstance(object cl, global::Array<object> @params) {
			unchecked {
				return new global::haxe.macro.ClassKind(5, new object[]{cl, @params});
			}
		}
		
		
		public static readonly global::haxe.macro.ClassKind KMacroType = new global::haxe.macro.ClassKind(6, null);
		
		public static global::haxe.macro.ClassKind KAbstractImpl(object a) {
			unchecked {
				return new global::haxe.macro.ClassKind(7, new object[]{a});
			}
		}
		
		
		public static readonly global::haxe.macro.ClassKind KGenericBuild = new global::haxe.macro.ClassKind(8, null);
		
		public override string getTag() {
			return global::haxe.macro.ClassKind.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class FieldKind : global::haxe.lang.ParamEnum {
		
		public FieldKind(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"FVar", "FMethod"};
		
		public static global::haxe.macro.FieldKind FVar(global::haxe.macro.VarAccess read, global::haxe.macro.VarAccess write) {
			return new global::haxe.macro.FieldKind(0, new object[]{read, write});
		}
		
		
		public static global::haxe.macro.FieldKind FMethod(global::haxe.macro.MethodKind k) {
			unchecked {
				return new global::haxe.macro.FieldKind(1, new object[]{k});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.FieldKind.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class VarAccess : global::haxe.lang.ParamEnum {
		
		public VarAccess(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"AccNormal", "AccNo", "AccNever", "AccResolve", "AccCall", "AccInline", "AccRequire"};
		
		public static readonly global::haxe.macro.VarAccess AccNormal = new global::haxe.macro.VarAccess(0, null);
		
		public static readonly global::haxe.macro.VarAccess AccNo = new global::haxe.macro.VarAccess(1, null);
		
		public static readonly global::haxe.macro.VarAccess AccNever = new global::haxe.macro.VarAccess(2, null);
		
		public static readonly global::haxe.macro.VarAccess AccResolve = new global::haxe.macro.VarAccess(3, null);
		
		public static readonly global::haxe.macro.VarAccess AccCall = new global::haxe.macro.VarAccess(4, null);
		
		public static readonly global::haxe.macro.VarAccess AccInline = new global::haxe.macro.VarAccess(5, null);
		
		public static global::haxe.macro.VarAccess AccRequire(string r, string msg) {
			unchecked {
				return new global::haxe.macro.VarAccess(6, new object[]{r, msg});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.VarAccess.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class MethodKind : global::haxe.lang.Enum {
		
		public MethodKind(int index) : base(index) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"MethNormal", "MethInline", "MethDynamic", "MethMacro"};
		
		public static readonly global::haxe.macro.MethodKind MethNormal = new global::haxe.macro.MethodKind(0);
		
		public static readonly global::haxe.macro.MethodKind MethInline = new global::haxe.macro.MethodKind(1);
		
		public static readonly global::haxe.macro.MethodKind MethDynamic = new global::haxe.macro.MethodKind(2);
		
		public static readonly global::haxe.macro.MethodKind MethMacro = new global::haxe.macro.MethodKind(3);
		
		public override string getTag() {
			return global::haxe.macro.MethodKind.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class TConstant : global::haxe.lang.ParamEnum {
		
		public TConstant(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"TInt", "TFloat", "TString", "TBool", "TNull", "TThis", "TSuper"};
		
		public static global::haxe.macro.TConstant TInt(int i) {
			return new global::haxe.macro.TConstant(0, new object[]{i});
		}
		
		
		public static global::haxe.macro.TConstant TFloat(string s) {
			unchecked {
				return new global::haxe.macro.TConstant(1, new object[]{s});
			}
		}
		
		
		public static global::haxe.macro.TConstant TString(string s) {
			unchecked {
				return new global::haxe.macro.TConstant(2, new object[]{s});
			}
		}
		
		
		public static global::haxe.macro.TConstant TBool(bool b) {
			unchecked {
				return new global::haxe.macro.TConstant(3, new object[]{b});
			}
		}
		
		
		public static readonly global::haxe.macro.TConstant TNull = new global::haxe.macro.TConstant(4, null);
		
		public static readonly global::haxe.macro.TConstant TThis = new global::haxe.macro.TConstant(5, null);
		
		public static readonly global::haxe.macro.TConstant TSuper = new global::haxe.macro.TConstant(6, null);
		
		public override string getTag() {
			return global::haxe.macro.TConstant.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class ModuleType : global::haxe.lang.ParamEnum {
		
		public ModuleType(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"TClassDecl", "TEnumDecl", "TTypeDecl", "TAbstract"};
		
		public static global::haxe.macro.ModuleType TClassDecl(object c) {
			return new global::haxe.macro.ModuleType(0, new object[]{c});
		}
		
		
		public static global::haxe.macro.ModuleType TEnumDecl(object e) {
			unchecked {
				return new global::haxe.macro.ModuleType(1, new object[]{e});
			}
		}
		
		
		public static global::haxe.macro.ModuleType TTypeDecl(object t) {
			unchecked {
				return new global::haxe.macro.ModuleType(2, new object[]{t});
			}
		}
		
		
		public static global::haxe.macro.ModuleType TAbstract(object a) {
			unchecked {
				return new global::haxe.macro.ModuleType(3, new object[]{a});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.ModuleType.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class FieldAccess : global::haxe.lang.ParamEnum {
		
		public FieldAccess(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"FInstance", "FStatic", "FAnon", "FDynamic", "FClosure", "FEnum"};
		
		public static global::haxe.macro.FieldAccess FInstance(object c, global::Array<object> @params, object cf) {
			return new global::haxe.macro.FieldAccess(0, new object[]{c, @params, cf});
		}
		
		
		public static global::haxe.macro.FieldAccess FStatic(object c, object cf) {
			unchecked {
				return new global::haxe.macro.FieldAccess(1, new object[]{c, cf});
			}
		}
		
		
		public static global::haxe.macro.FieldAccess FAnon(object cf) {
			unchecked {
				return new global::haxe.macro.FieldAccess(2, new object[]{cf});
			}
		}
		
		
		public static global::haxe.macro.FieldAccess FDynamic(string s) {
			unchecked {
				return new global::haxe.macro.FieldAccess(3, new object[]{s});
			}
		}
		
		
		public static global::haxe.macro.FieldAccess FClosure(object c, object cf) {
			unchecked {
				return new global::haxe.macro.FieldAccess(4, new object[]{c, cf});
			}
		}
		
		
		public static global::haxe.macro.FieldAccess FEnum(object e, object ef) {
			unchecked {
				return new global::haxe.macro.FieldAccess(5, new object[]{e, ef});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.FieldAccess.__hx_constructs[this.index];
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.macro {
	public class TypedExprDef : global::haxe.lang.ParamEnum {
		
		public TypedExprDef(int index, object[] @params) : base(index, @params) {
		}
		
		
		public static readonly string[] __hx_constructs = new string[]{"TConst", "TLocal", "TArray", "TBinop", "TField", "TTypeExpr", "TParenthesis", "TObjectDecl", "TArrayDecl", "TCall", "TNew", "TUnop", "TFunction", "TVar", "TBlock", "TFor", "TIf", "TWhile", "TSwitch", "TTry", "TReturn", "TBreak", "TContinue", "TThrow", "TCast", "TMeta", "TEnumParameter"};
		
		public static global::haxe.macro.TypedExprDef TConst(global::haxe.macro.TConstant c) {
			return new global::haxe.macro.TypedExprDef(0, new object[]{c});
		}
		
		
		public static global::haxe.macro.TypedExprDef TLocal(object v) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(1, new object[]{v});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TArray(object e1, object e2) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(2, new object[]{e1, e2});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TBinop(global::haxe.macro.Binop op, object e1, object e2) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(3, new object[]{op, e1, e2});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TField(object e, global::haxe.macro.FieldAccess fa) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(4, new object[]{e, fa});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TTypeExpr(global::haxe.macro.ModuleType m) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(5, new object[]{m});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TParenthesis(object e) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(6, new object[]{e});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TObjectDecl(global::Array<object> fields) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(7, new object[]{fields});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TArrayDecl(global::Array<object> el) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(8, new object[]{el});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TCall(object e, global::Array<object> el) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(9, new object[]{e, el});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TNew(object c, global::Array<object> @params, global::Array<object> el) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(10, new object[]{c, @params, el});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TUnop(global::haxe.macro.Unop op, bool postFix, object e) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(11, new object[]{op, postFix, e});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TFunction(object tfunc) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(12, new object[]{tfunc});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TVar(object v, object expr) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(13, new object[]{v, expr});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TBlock(global::Array<object> el) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(14, new object[]{el});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TFor(object v, object e1, object e2) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(15, new object[]{v, e1, e2});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TIf(object econd, object eif, object eelse) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(16, new object[]{econd, eif, eelse});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TWhile(object econd, object e, bool normalWhile) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(17, new object[]{econd, e, normalWhile});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TSwitch(object e, global::Array<object> cases, object edef) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(18, new object[]{e, cases, edef});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TTry(object e, global::Array<object> catches) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(19, new object[]{e, catches});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TReturn(object e) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(20, new object[]{e});
			}
		}
		
		
		public static readonly global::haxe.macro.TypedExprDef TBreak = new global::haxe.macro.TypedExprDef(21, null);
		
		public static readonly global::haxe.macro.TypedExprDef TContinue = new global::haxe.macro.TypedExprDef(22, null);
		
		public static global::haxe.macro.TypedExprDef TThrow(object e) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(23, new object[]{e});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TCast(object e, global::haxe.macro.ModuleType m) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(24, new object[]{e, m});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TMeta(object m, object e1) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(25, new object[]{m, e1});
			}
		}
		
		
		public static global::haxe.macro.TypedExprDef TEnumParameter(object e1, object ef, int index) {
			unchecked {
				return new global::haxe.macro.TypedExprDef(26, new object[]{e1, ef, index});
			}
		}
		
		
		public override string getTag() {
			return global::haxe.macro.TypedExprDef.__hx_constructs[this.index];
		}
		
		
	}
}


