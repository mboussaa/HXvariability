// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe {
	public class Utf8 : global::haxe.lang.HxObject {
		
		public Utf8(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Utf8(global::haxe.lang.Null<int> size) {
			global::haxe.Utf8.__hx_ctor_haxe_Utf8(this, size);
		}
		
		
		public static void __hx_ctor_haxe_Utf8(global::haxe.Utf8 __temp_me48, global::haxe.lang.Null<int> size) {
			__temp_me48.__b = "";
		}
		
		
		public static void iter(string s, global::haxe.lang.Function chars) {
			int _g1 = 0;
			int _g = s.Length;
			while (( _g1 < _g )) {
				chars.__hx_invoke1_o(default(double), (global::haxe.lang.StringExt.charCodeAt(s, _g1++)).toDynamic());
			}
			
		}
		
		
		public static string encode(string s) {
			throw global::haxe.lang.HaxeException.wrap("Not implemented");
		}
		
		
		public static string decode(string s) {
			throw global::haxe.lang.HaxeException.wrap("Not implemented");
		}
		
		
		public static int charCodeAt(string s, int index) {
			return (global::haxe.lang.StringExt.charCodeAt(s, index)).@value;
		}
		
		
		public static bool validate(string s) {
			return true;
		}
		
		
		public static int length(string s) {
			return s.Length;
		}
		
		
		public static int compare(string a, string b) {
			unchecked {
				if (( string.Compare(((string) (a) ), ((string) (b) )) > 0 )) {
					return 1;
				}
				else if (string.Equals(a, b)) {
					return 0;
				}
				else {
					return -1;
				}
				
			}
		}
		
		
		public static string sub(string s, int pos, int len) {
			return global::haxe.lang.StringExt.substr(s, pos, new global::haxe.lang.Null<int>(len, true));
		}
		
		
		public static new object __hx_createEmpty() {
			return new global::haxe.Utf8(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::haxe.Utf8(global::haxe.lang.Null<object>.ofDynamic<int>(arr[0]));
		}
		
		
		public string __b;
		
		public void addChar(int c) {
			unchecked {
				{
					global::haxe.Utf8 __temp_dynop1 = this;
					__temp_dynop1.__b = global::haxe.lang.Runtime.concat(__temp_dynop1.__b, new string(((char) (c) ), 1));
				}
				
			}
		}
		
		
		public string toString() {
			return this.__b;
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 4745538:
					{
						this.__b = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 2113708439:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addChar", 2113708439)) );
					}
					
					
					case 4745538:
					{
						return this.__b;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 2113708439:
					{
						this.addChar(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("__b");
			{
				base.__hx_getFields(baseArr);
			}
			
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


