<?php

// Generated by Haxe 3.3.0
class haxe_io_Input {
	public function __construct(){}
	public $bigEndian;
	public function readByte() {
		throw new HException("Not implemented");
	}
	public function readBytes($s, $pos, $len) {
		$k = $len;
		$b = $s->b;
		$tmp = null;
		$tmp1 = null;
		if($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $pos + $len > $s->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		while($k > 0) {
			{
				$val = $this->readByte();
				$b->s[$pos] = chr($val);
				unset($val);
			}
			++$pos;
			--$k;
		}
		return $len;
	}
	public function close() {}
	public function set_bigEndian($b) {
		$this->bigEndian = $b;
		return $b;
	}
	public function readAll($bufsize = null) {
		$tmp = $bufsize === null;
		if($tmp) {
			$bufsize = 8192;
		}
		$buf = haxe_io_Bytes::alloc($bufsize);
		$total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				$len = $this->readBytes($buf, 0, $bufsize);
				if($len === 0) {
					throw new HException(haxe_io_Error::$Blocked);
				}
				{
					$tmp1 = null;
					if($len >= 0) {
						$tmp1 = $len > $buf->length;
					} else {
						$tmp1 = true;
					}
					if($tmp1) {
						throw new HException(haxe_io_Error::$OutsideBounds);
					}
					$s = substr($buf->b->s, 0, $len);
					$x = new php__BytesData_Wrapper($s);
					$total->b .= _hx_string_or_null($x->s);
					unset($x,$tmp1,$s);
				}
				unset($len);
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof haxe_io_Eof){} else throw $__hx__e;;
		}
		return $total->getBytes();
	}
	public function readFullBytes($s, $pos, $len) {
		while($len > 0) {
			$k = $this->readBytes($s, $pos, $len);
			$pos += $k;
			$len -= $k;
			unset($k);
		}
	}
	public function read($nbytes) {
		$s = haxe_io_Bytes::alloc($nbytes);
		$p = 0;
		while($nbytes > 0) {
			$k = $this->readBytes($s, $p, $nbytes);
			if($k === 0) {
				throw new HException(haxe_io_Error::$Blocked);
			}
			$p += $k;
			$nbytes -= $k;
			unset($k);
		}
		return $s;
	}
	public function readUntil($end) {
		$buf = new StringBuf();
		$last = null;
		while(true) {
			$last = $this->readByte();
			if(!($last !== $end)) {
				break;
			}
			$buf->b .= _hx_string_or_null(chr($last));
		}
		return $buf->b;
	}
	public function readLine() {
		$buf = new StringBuf();
		$last = null;
		$s = null;
		try {
			while(true) {
				$last = $this->readByte();
				if(!($last !== 10)) {
					break;
				}
				$buf->b .= _hx_string_or_null(chr($last));
			}
			$s = $buf->b;
			$tmp = strlen($s) - 1;
			$tmp1 = _hx_char_code_at($s, $tmp);
			if($tmp1 === 13) {
				$s = _hx_substr($s, 0, -1);
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof haxe_io_Eof){
				$s = $buf->b;
				if(strlen($s) === 0) {
					throw new HException($e);
				}
			} else throw $__hx__e;;
		}
		return $s;
	}
	public function readFloat() {
		$tmp = $this->readInt32();
		return haxe_io_FPHelper::i32ToFloat($tmp);
	}
	public function readDouble() {
		$i1 = $this->readInt32();
		$i2 = $this->readInt32();
		$tmp = $this->bigEndian;
		if($tmp) {
			return haxe_io_FPHelper::i64ToDouble($i2, $i1);
		} else {
			return haxe_io_FPHelper::i64ToDouble($i1, $i2);
		}
	}
	public function readInt8() {
		$n = $this->readByte();
		if($n >= 128) {
			return $n - 256;
		}
		return $n;
	}
	public function readInt16() {
		$ch1 = $this->readByte();
		$ch2 = $this->readByte();
		$n = null;
		if($this->bigEndian) {
			$n = $ch2 | $ch1 << 8;
		} else {
			$n = $ch1 | $ch2 << 8;
		}
		if(($n & 32768) !== 0) {
			return $n - 65536;
		}
		return $n;
	}
	public function readUInt16() {
		$ch1 = $this->readByte();
		$ch2 = $this->readByte();
		if($this->bigEndian) {
			return $ch2 | $ch1 << 8;
		} else {
			return $ch1 | $ch2 << 8;
		}
	}
	public function readInt24() {
		$ch1 = $this->readByte();
		$ch2 = $this->readByte();
		$ch3 = $this->readByte();
		$n = null;
		if($this->bigEndian) {
			$n = $ch3 | $ch2 << 8 | $ch1 << 16;
		} else {
			$n = $ch1 | $ch2 << 8 | $ch3 << 16;
		}
		if(($n & 8388608) !== 0) {
			return $n - 16777216;
		}
		return $n;
	}
	public function readUInt24() {
		$ch1 = $this->readByte();
		$ch2 = $this->readByte();
		$ch3 = $this->readByte();
		if($this->bigEndian) {
			return $ch3 | $ch2 << 8 | $ch1 << 16;
		} else {
			return $ch1 | $ch2 << 8 | $ch3 << 16;
		}
	}
	public function readInt32() {
		$ch1 = $this->readByte();
		$ch2 = $this->readByte();
		$ch3 = $this->readByte();
		$ch4 = $this->readByte();
		$n = null;
		if($this->bigEndian) {
			$n = $ch4 | $ch3 << 8 | $ch2 << 16 | $ch1 << 24;
		} else {
			$n = $ch1 | $ch2 << 8 | $ch3 << 16 | $ch4 << 24;
		}
		if(($n & -2147483648) !== 0) {
			return $n | -2147483648;
		} else {
			return $n;
		}
	}
	public function readString($len) {
		$b = haxe_io_Bytes::alloc($len);
		$this->readFullBytes($b, 0, $len);
		return $b->toString();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("set_bigEndian" => "set_bigEndian");
	function __toString() { return 'haxe.io.Input'; }
}
