<?php

// Generated by Haxe 3.3.0
class haxe_macro_Printer {
	public function __construct($tabString = null) {
		if(!php_Boot::$skip_constructor) {
		if($tabString === null) {
			$tabString = "\x09";
		}
		$this->tabs = "";
		$this->tabString = $tabString;
	}}
	public $tabs;
	public $tabString;
	public function printUnop($op) {
		switch($op->index) {
		case 0:{
			return "++";
		}break;
		case 1:{
			return "--";
		}break;
		case 2:{
			return "!";
		}break;
		case 3:{
			return "-";
		}break;
		case 4:{
			return "~";
		}break;
		}
	}
	public function printBinop($op) {
		$tmp = $op->index;
		switch($tmp) {
		case 0:{
			return "+";
		}break;
		case 1:{
			return "*";
		}break;
		case 2:{
			return "/";
		}break;
		case 3:{
			return "-";
		}break;
		case 4:{
			return "=";
		}break;
		case 5:{
			return "==";
		}break;
		case 6:{
			return "!=";
		}break;
		case 7:{
			return ">";
		}break;
		case 8:{
			return ">=";
		}break;
		case 9:{
			return "<";
		}break;
		case 10:{
			return "<=";
		}break;
		case 11:{
			return "&";
		}break;
		case 12:{
			return "|";
		}break;
		case 13:{
			return "^";
		}break;
		case 14:{
			return "&&";
		}break;
		case 15:{
			return "||";
		}break;
		case 16:{
			return "<<";
		}break;
		case 17:{
			return ">>";
		}break;
		case 18:{
			return ">>>";
		}break;
		case 19:{
			return "%";
		}break;
		case 20:{
			$tmp1 = $this->printBinop(_hx_deref($op)->params[0]);
			return _hx_string_or_null($tmp1) . "=";
		}break;
		case 21:{
			return "...";
		}break;
		case 22:{
			return "=>";
		}break;
		}
	}
	public function escapeString($s, $delim) {
		$s1 = str_replace("\x0A", "\\n", $s);
		$s2 = str_replace("\x09", "\\t", $s1);
		$s3 = str_replace("'", "\\'", $s2);
		$s4 = str_replace("\"", "\\\"", $s3);
		$tmp = str_replace("\x00", "\\x00", $s4);
		return _hx_string_or_null($delim) . _hx_string_or_null($tmp) . _hx_string_or_null($delim);
	}
	public function printFormatString($s) {
		return $this->escapeString($s, "'");
	}
	public function printString($s) {
		return $this->escapeString($s, "\"");
	}
	public function printConstant($c) {
		$tmp = $c->index;
		switch($tmp) {
		case 0:{
			return _hx_deref($c)->params[0];
		}break;
		case 1:{
			return _hx_deref($c)->params[0];
		}break;
		case 2:{
			return $this->printString(_hx_deref($c)->params[0]);
		}break;
		case 3:{
			return _hx_deref($c)->params[0];
		}break;
		case 4:{
			return "~/" . _hx_string_or_null(_hx_deref($c)->params[0]) . "/" . _hx_string_or_null(_hx_deref($c)->params[1]);
		}break;
		}
	}
	public function printTypeParam($param) {
		$tmp = $param->index;
		switch($tmp) {
		case 0:{
			return $this->printComplexType(_hx_deref($param)->params[0]);
		}break;
		case 1:{
			return $this->printExpr(_hx_deref($param)->params[0]);
		}break;
		}
	}
	public function printTypePath($tp) {
		$tmp = null;
		$tmp1 = $tp->pack->length > 0;
		if($tmp1) {
			$tmp2 = $tp->pack->join(".");
			$tmp = _hx_string_or_null($tmp2) . ".";
		} else {
			$tmp = "";
		}
		$tmp3 = _hx_string_or_null($tmp) . _hx_string_or_null($tp->name);
		$tmp4 = null;
		if($tp->sub !== null) {
			$tmp4 = "." . _hx_string_or_null($tp->sub);
		} else {
			$tmp4 = "";
		}
		$tmp5 = _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4);
		$tmp6 = null;
		if($tp->params === null) {
			$tmp6 = "";
		} else {
			$tmp7 = $tp->params->length > 0;
			if($tmp7) {
				$tmp8 = $tp->params->map((isset($this->printTypeParam) ? $this->printTypeParam: array($this, "printTypeParam")))->join(", ");
				$tmp6 = "<" . _hx_string_or_null($tmp8) . ">";
			} else {
				$tmp6 = "";
			}
		}
		return _hx_string_or_null($tmp5) . _hx_string_or_null($tmp6);
	}
	public function printComplexType($ct) {
		$tmp = $ct->index;
		switch($tmp) {
		case 0:{
			return $this->printTypePath(_hx_deref($ct)->params[0]);
		}break;
		case 1:{
			$ret = _hx_deref($ct)->params[1];
			$args = _hx_deref($ct)->params[0];
			$tmp1 = null;
			$tmp2 = $args->length > 0;
			if($tmp2) {
				$tmp1 = $args->map((isset($this->printComplexType) ? $this->printComplexType: array($this, "printComplexType")))->join(" -> ");
			} else {
				$tmp1 = "Void";
			}
			$tmp3 = _hx_string_or_null($tmp1) . " -> ";
			$tmp4 = $this->printComplexType($ret);
			return _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4);
		}break;
		case 2:{
			$fields = _hx_deref($ct)->params[0];
			$_g = (new _hx_array(array()));
			{
				$_g1 = 0;
				while($_g1 < $fields->length) {
					$f = $fields[$_g1];
					++$_g1;
					$tmp5 = $this->printField($f);
					$_g->push(_hx_string_or_null($tmp5) . "; ");
					unset($tmp5,$f);
				}
			}
			$tmp6 = $_g->join("");
			return "{ " . _hx_string_or_null($tmp6) . "}";
		}break;
		case 3:{
			$tmp7 = $this->printComplexType(_hx_deref($ct)->params[0]);
			return "(" . _hx_string_or_null($tmp7) . ")";
		}break;
		case 4:{
			$fields1 = _hx_deref($ct)->params[1];
			$tmp8 = _hx_deref($ct)->params[0]->map((isset($this->printTypePath) ? $this->printTypePath: array($this, "printTypePath")))->join(" >, ");
			$tmp9 = "{> " . _hx_string_or_null($tmp8) . ", ";
			$tmp10 = $fields1->map((isset($this->printField) ? $this->printField: array($this, "printField")))->join(", ");
			return _hx_string_or_null($tmp9) . _hx_string_or_null($tmp10) . " }";
		}break;
		case 5:{
			$tmp11 = $this->printComplexType(_hx_deref($ct)->params[0]);
			return "?" . _hx_string_or_null($tmp11);
		}break;
		}
	}
	public function printMetadata($meta) {
		$tmp = "@" . _hx_string_or_null($meta->name);
		$tmp1 = null;
		$tmp2 = null;
		if($meta->params !== null) {
			$tmp2 = $meta->params->length > 0;
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			$tmp3 = $this->printExprs($meta->params, ", ");
			$tmp1 = "(" . _hx_string_or_null($tmp3) . ")";
		} else {
			$tmp1 = "";
		}
		return _hx_string_or_null($tmp) . _hx_string_or_null($tmp1);
	}
	public function printAccess($access) {
		switch($access->index) {
		case 0:{
			return "public";
		}break;
		case 1:{
			return "private";
		}break;
		case 2:{
			return "static";
		}break;
		case 3:{
			return "override";
		}break;
		case 4:{
			return "dynamic";
		}break;
		case 5:{
			return "inline";
		}break;
		case 6:{
			return "macro";
		}break;
		}
	}
	public function printField($field) {
		$tmp = null;
		$tmp1 = null;
		if($field->doc !== null) {
			$tmp1 = $field->doc !== "";
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp2 = "/**\x0A" . _hx_string_or_null($this->tabs) . _hx_string_or_null($this->tabString);
			$s = $field->doc;
			$by = "\x0A" . _hx_string_or_null($this->tabs) . _hx_string_or_null($this->tabString);
			$tmp3 = str_replace("\x0A", $by, $s);
			$tmp = _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . "\x0A" . _hx_string_or_null($this->tabs) . "**/\x0A" . _hx_string_or_null($this->tabs);
		} else {
			$tmp = "";
		}
		$tmp4 = null;
		$tmp5 = null;
		if($field->meta !== null) {
			$tmp5 = $field->meta->length > 0;
		} else {
			$tmp5 = false;
		}
		if($tmp5) {
			$tmp6 = $field->meta->map((isset($this->printMetadata) ? $this->printMetadata: array($this, "printMetadata")));
			$tmp7 = $tmp6->join("\x0A" . _hx_string_or_null($this->tabs));
			$tmp4 = _hx_string_or_null($tmp7) . _hx_string_or_null(("\x0A" . _hx_string_or_null($this->tabs)));
		} else {
			$tmp4 = "";
		}
		$tmp8 = _hx_string_or_null($tmp) . _hx_string_or_null($tmp4);
		$tmp9 = null;
		$tmp10 = null;
		if($field->access !== null) {
			$tmp10 = $field->access->length > 0;
		} else {
			$tmp10 = false;
		}
		if($tmp10) {
			$tmp11 = $field->access->map((isset($this->printAccess) ? $this->printAccess: array($this, "printAccess")))->join(" ");
			$tmp9 = _hx_string_or_null($tmp11) . " ";
		} else {
			$tmp9 = "";
		}
		$tmp12 = _hx_string_or_null($tmp8) . _hx_string_or_null($tmp9);
		$_g = $field->kind;
		$tmp13 = null;
		$tmp14 = $_g->index;
		switch($tmp14) {
		case 0:{
			$eo = _hx_deref($_g)->params[1];
			$t = _hx_deref($_g)->params[0];
			$tmp15 = "var " . _hx_string_or_null($field->name);
			$tmp16 = $this->opt($t, (isset($this->printComplexType) ? $this->printComplexType: array($this, "printComplexType")), " : ");
			$tmp17 = _hx_string_or_null($tmp15) . _hx_string_or_null($tmp16);
			$tmp18 = $this->opt($eo, (isset($this->printExpr) ? $this->printExpr: array($this, "printExpr")), " = ");
			$tmp13 = _hx_string_or_null($tmp17) . _hx_string_or_null($tmp18);
		}break;
		case 1:{
			$func = _hx_deref($_g)->params[0];
			$tmp19 = "function " . _hx_string_or_null($field->name);
			$tmp20 = $this->printFunction($func);
			$tmp13 = _hx_string_or_null($tmp19) . _hx_string_or_null($tmp20);
		}break;
		case 2:{
			$eo1 = _hx_deref($_g)->params[3];
			$t1 = _hx_deref($_g)->params[2];
			$tmp21 = "var " . _hx_string_or_null($field->name) . "(" . _hx_string_or_null(_hx_deref($_g)->params[0]) . ", " . _hx_string_or_null(_hx_deref($_g)->params[1]) . ")";
			$tmp22 = $this->opt($t1, (isset($this->printComplexType) ? $this->printComplexType: array($this, "printComplexType")), " : ");
			$tmp23 = _hx_string_or_null($tmp21) . _hx_string_or_null($tmp22);
			$tmp24 = $this->opt($eo1, (isset($this->printExpr) ? $this->printExpr: array($this, "printExpr")), " = ");
			$tmp13 = _hx_string_or_null($tmp23) . _hx_string_or_null($tmp24);
		}break;
		}
		return _hx_string_or_null($tmp12) . _hx_string_or_null($tmp13);
	}
	public function printTypeParamDecl($tpd) {
		$tmp = null;
		$tmp1 = null;
		if($tpd->params !== null) {
			$tmp1 = $tpd->params->length > 0;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp2 = $tpd->params->map((isset($this->printTypeParamDecl) ? $this->printTypeParamDecl: array($this, "printTypeParamDecl")))->join(", ");
			$tmp = "<" . _hx_string_or_null($tmp2) . ">";
		} else {
			$tmp = "";
		}
		$tmp3 = _hx_string_or_null($tpd->name) . _hx_string_or_null($tmp);
		$tmp4 = null;
		$tmp5 = null;
		if($tpd->constraints !== null) {
			$tmp5 = $tpd->constraints->length > 0;
		} else {
			$tmp5 = false;
		}
		if($tmp5) {
			$tmp6 = $tpd->constraints->map((isset($this->printComplexType) ? $this->printComplexType: array($this, "printComplexType")))->join(", ");
			$tmp4 = ":(" . _hx_string_or_null($tmp6) . ")";
		} else {
			$tmp4 = "";
		}
		return _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4);
	}
	public function printFunctionArg($arg) {
		$tmp = null;
		if($arg->opt) {
			$tmp = "?";
		} else {
			$tmp = "";
		}
		$tmp1 = _hx_string_or_null($tmp) . _hx_string_or_null($arg->name);
		$tmp2 = $this->opt($arg->type, (isset($this->printComplexType) ? $this->printComplexType: array($this, "printComplexType")), ":");
		$tmp3 = _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2);
		$tmp4 = $this->opt($arg->value, (isset($this->printExpr) ? $this->printExpr: array($this, "printExpr")), " = ");
		return _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4);
	}
	public function printFunction($func) {
		$tmp = null;
		if($func->params === null) {
			$tmp = "";
		} else {
			$tmp1 = $func->params->length > 0;
			if($tmp1) {
				$tmp2 = $func->params->map((isset($this->printTypeParamDecl) ? $this->printTypeParamDecl: array($this, "printTypeParamDecl")))->join(", ");
				$tmp = "<" . _hx_string_or_null($tmp2) . ">";
			} else {
				$tmp = "";
			}
		}
		$tmp3 = _hx_string_or_null($tmp) . "(";
		$tmp4 = $func->args->map((isset($this->printFunctionArg) ? $this->printFunctionArg: array($this, "printFunctionArg")))->join(", ");
		$tmp5 = _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4) . ")";
		$tmp6 = $this->opt($func->ret, (isset($this->printComplexType) ? $this->printComplexType: array($this, "printComplexType")), ":");
		$tmp7 = _hx_string_or_null($tmp5) . _hx_string_or_null($tmp6);
		$tmp8 = $this->opt($func->expr, (isset($this->printExpr) ? $this->printExpr: array($this, "printExpr")), " ");
		return _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8);
	}
	public function printVar($v) {
		$tmp = $this->opt($v->type, (isset($this->printComplexType) ? $this->printComplexType: array($this, "printComplexType")), ":");
		$tmp1 = _hx_string_or_null($v->name) . _hx_string_or_null($tmp);
		$tmp2 = $this->opt($v->expr, (isset($this->printExpr) ? $this->printExpr: array($this, "printExpr")), " = ");
		return _hx_string_or_null($tmp1) . _hx_string_or_null($tmp2);
	}
	public function printExpr($e) {
		$_gthis = $this;
		if($e === null) {
			return "#NULL";
		} else {
			$_g = $e->expr;
			$tmp = $_g->index;
			switch($tmp) {
			case 0:{
				return $this->printConstant(_hx_deref($_g)->params[0]);
			}break;
			case 1:{
				$e2 = _hx_deref($_g)->params[1];
				$tmp1 = $this->printExpr(_hx_deref($_g)->params[0]);
				$tmp2 = "" . _hx_string_or_null($tmp1) . "[";
				$tmp3 = $this->printExpr($e2);
				return _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3) . "]";
			}break;
			case 2:{
				$e21 = _hx_deref($_g)->params[2];
				$e1 = _hx_deref($_g)->params[1];
				$op = _hx_deref($_g)->params[0];
				$tmp4 = $this->printExpr($e1);
				$tmp5 = "" . _hx_string_or_null($tmp4) . " ";
				$tmp6 = $this->printBinop($op);
				$tmp7 = _hx_string_or_null($tmp5) . _hx_string_or_null($tmp6) . " ";
				$tmp8 = $this->printExpr($e21);
				return _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8);
			}break;
			case 3:{
				$n = _hx_deref($_g)->params[1];
				$tmp9 = $this->printExpr(_hx_deref($_g)->params[0]);
				return "" . _hx_string_or_null($tmp9) . "." . _hx_string_or_null($n);
			}break;
			case 4:{
				$tmp10 = $this->printExpr(_hx_deref($_g)->params[0]);
				return "(" . _hx_string_or_null($tmp10) . ")";
			}break;
			case 5:{
				$tmp11 = _hx_deref($_g)->params[0]->map(array(new _hx_lambda(array(&$_gthis), "haxe_macro_Printer_0"), 'execute'))->join(", ");
				return "{ " . _hx_string_or_null($tmp11) . " }";
			}break;
			case 6:{
				$tmp14 = $this->printExprs(_hx_deref($_g)->params[0], ", ");
				return "[" . _hx_string_or_null($tmp14) . "]";
			}break;
			case 7:{
				$el = _hx_deref($_g)->params[1];
				$tmp15 = $this->printExpr(_hx_deref($_g)->params[0]);
				$tmp16 = "" . _hx_string_or_null($tmp15) . "(";
				$tmp17 = $this->printExprs($el, ", ");
				return _hx_string_or_null($tmp16) . _hx_string_or_null($tmp17) . ")";
			}break;
			case 8:{
				$el1 = _hx_deref($_g)->params[1];
				$tmp18 = $this->printTypePath(_hx_deref($_g)->params[0]);
				$tmp19 = "new " . _hx_string_or_null($tmp18) . "(";
				$tmp20 = $this->printExprs($el1, ", ");
				return _hx_string_or_null($tmp19) . _hx_string_or_null($tmp20) . ")";
			}break;
			case 9:{
				switch(_hx_deref($_g)->params[1]) {
				case false:{
					$e11 = _hx_deref($_g)->params[2];
					$tmp21 = $this->printUnop(_hx_deref($_g)->params[0]);
					$tmp22 = $this->printExpr($e11);
					return _hx_string_or_null($tmp21) . _hx_string_or_null($tmp22);
				}break;
				case true:{
					$e12 = _hx_deref($_g)->params[2];
					$op1 = _hx_deref($_g)->params[0];
					$tmp23 = $this->printExpr($e12);
					$tmp24 = $this->printUnop($op1);
					return _hx_string_or_null($tmp23) . _hx_string_or_null($tmp24);
				}break;
				}
			}break;
			case 10:{
				$tmp25 = _hx_deref($_g)->params[0]->map((isset($this->printVar) ? $this->printVar: array($this, "printVar")))->join(", ");
				return "var " . _hx_string_or_null($tmp25);
			}break;
			case 11:{
				$func = _hx_deref($_g)->params[1];
				$no = _hx_deref($_g)->params[0];
				if($no !== null) {
					$tmp26 = "function " . _hx_string_or_null($no);
					$tmp27 = $this->printFunction($func);
					return _hx_string_or_null($tmp26) . _hx_string_or_null($tmp27);
				} else {
					$tmp28 = $this->printFunction(_hx_deref($_g)->params[1]);
					return "function" . _hx_string_or_null($tmp28);
				}
			}break;
			case 12:{
				$tmp29 = _hx_deref($_g)->params[0]->length === 0;
				if($tmp29) {
					return "{ }";
				} else {
					$el2 = _hx_deref($_g)->params[0];
					$old = $this->tabs;
					$this->tabs .= _hx_string_or_null($this->tabString);
					$tmp30 = "{\x0A" . _hx_string_or_null($this->tabs);
					$tmp31 = $this->printExprs($el2, ";\x0A" . _hx_string_or_null($this->tabs));
					$s = _hx_string_or_null($tmp30) . _hx_string_or_null($tmp31);
					$this->tabs = $old;
					return _hx_string_or_null($s) . _hx_string_or_null((";\x0A" . _hx_string_or_null($this->tabs) . "}"));
				}
			}break;
			case 13:{
				$e22 = _hx_deref($_g)->params[1];
				$tmp32 = $this->printExpr(_hx_deref($_g)->params[0]);
				$tmp33 = "for (" . _hx_string_or_null($tmp32) . ") ";
				$tmp34 = $this->printExpr($e22);
				return _hx_string_or_null($tmp33) . _hx_string_or_null($tmp34);
			}break;
			case 14:{
				$e23 = _hx_deref($_g)->params[1];
				$tmp35 = $this->printExpr(_hx_deref($_g)->params[0]);
				$tmp36 = "" . _hx_string_or_null($tmp35) . " in ";
				$tmp37 = $this->printExpr($e23);
				return _hx_string_or_null($tmp36) . _hx_string_or_null($tmp37);
			}break;
			case 15:{
				if(_hx_deref($_g)->params[2] === null) {
					$econd = _hx_deref($_g)->params[0];
					$eif = _hx_deref($_g)->params[1];
					$tmp38 = $this->printExpr($econd);
					$tmp39 = "if (" . _hx_string_or_null($tmp38) . ") ";
					$tmp40 = $this->printExpr($eif);
					return _hx_string_or_null($tmp39) . _hx_string_or_null($tmp40);
				} else {
					$econd1 = _hx_deref($_g)->params[0];
					$eif1 = _hx_deref($_g)->params[1];
					$eelse = _hx_deref($_g)->params[2];
					$tmp41 = $this->printExpr($econd1);
					$tmp42 = "if (" . _hx_string_or_null($tmp41) . ") ";
					$tmp43 = $this->printExpr($eif1);
					$tmp44 = _hx_string_or_null($tmp42) . _hx_string_or_null($tmp43) . " else ";
					$tmp45 = $this->printExpr($eelse);
					return _hx_string_or_null($tmp44) . _hx_string_or_null($tmp45);
				}
			}break;
			case 16:{
				switch(_hx_deref($_g)->params[2]) {
				case false:{
					$econd2 = _hx_deref($_g)->params[0];
					$tmp46 = $this->printExpr(_hx_deref($_g)->params[1]);
					$tmp47 = "do " . _hx_string_or_null($tmp46) . " while (";
					$tmp48 = $this->printExpr($econd2);
					return _hx_string_or_null($tmp47) . _hx_string_or_null($tmp48) . ")";
				}break;
				case true:{
					$econd3 = _hx_deref($_g)->params[0];
					$e13 = _hx_deref($_g)->params[1];
					$tmp49 = $this->printExpr($econd3);
					$tmp50 = "while (" . _hx_string_or_null($tmp49) . ") ";
					$tmp51 = $this->printExpr($e13);
					return _hx_string_or_null($tmp50) . _hx_string_or_null($tmp51);
				}break;
				}
			}break;
			case 17:{
				$edef = _hx_deref($_g)->params[2];
				$cl = _hx_deref($_g)->params[1];
				$e14 = _hx_deref($_g)->params[0];
				$old1 = $this->tabs;
				$this->tabs .= _hx_string_or_null($this->tabString);
				$tmp52 = $this->printExpr($e14);
				$tmp53 = "switch " . _hx_string_or_null($tmp52) . " {\x0A" . _hx_string_or_null($this->tabs);
				$tmp54 = $cl->map(array(new _hx_lambda(array(&$_gthis), "haxe_macro_Printer_1"), 'execute'));
				$tmp62 = $tmp54->join("\x0A" . _hx_string_or_null($this->tabs));
				$s1 = _hx_string_or_null($tmp53) . _hx_string_or_null($tmp62);
				if($edef !== null) {
					$tmp63 = "\x0A" . _hx_string_or_null($this->tabs) . "default:";
					$tmp64 = null;
					if($edef->expr === null) {
						$tmp64 = "";
					} else {
						$tmp65 = $this->printExpr($edef);
						$tmp64 = _hx_string_or_null($tmp65) . ";";
					}
					$s1 .= _hx_string_or_null($tmp63) . _hx_string_or_null($tmp64);
				}
				$this->tabs = $old1;
				return _hx_string_or_null($s1) . _hx_string_or_null(("\x0A" . _hx_string_or_null($this->tabs) . "}"));
			}break;
			case 18:{
				$cl1 = _hx_deref($_g)->params[1];
				$tmp66 = $this->printExpr(_hx_deref($_g)->params[0]);
				$tmp67 = "try " . _hx_string_or_null($tmp66);
				$tmp68 = $cl1->map(array(new _hx_lambda(array(&$_gthis), "haxe_macro_Printer_2"), 'execute'))->join("");
				return _hx_string_or_null($tmp67) . _hx_string_or_null($tmp68);
			}break;
			case 19:{
				$tmp73 = $this->opt(_hx_deref($_g)->params[0], (isset($this->printExpr) ? $this->printExpr: array($this, "printExpr")), " ");
				return "return" . _hx_string_or_null($tmp73);
			}break;
			case 20:{
				return "break";
			}break;
			case 21:{
				return "continue";
			}break;
			case 22:{
				$tmp74 = $this->printExpr(_hx_deref($_g)->params[0]);
				return "untyped " . _hx_string_or_null($tmp74);
			}break;
			case 23:{
				$tmp75 = $this->printExpr(_hx_deref($_g)->params[0]);
				return "throw " . _hx_string_or_null($tmp75);
			}break;
			case 24:{
				$cto = _hx_deref($_g)->params[1];
				$e15 = _hx_deref($_g)->params[0];
				if($cto !== null) {
					$tmp76 = $this->printExpr($e15);
					$tmp77 = "cast(" . _hx_string_or_null($tmp76) . ", ";
					$tmp78 = $this->printComplexType($cto);
					return _hx_string_or_null($tmp77) . _hx_string_or_null($tmp78) . ")";
				} else {
					$tmp79 = $this->printExpr(_hx_deref($_g)->params[0]);
					return "cast " . _hx_string_or_null($tmp79);
				}
			}break;
			case 25:{
				$tmp80 = $this->printExpr(_hx_deref($_g)->params[0]);
				return "#DISPLAY(" . _hx_string_or_null($tmp80) . ")";
			}break;
			case 26:{
				$tmp81 = $this->printTypePath(_hx_deref($_g)->params[0]);
				return "#DISPLAY(" . _hx_string_or_null($tmp81) . ")";
			}break;
			case 27:{
				$eelse1 = _hx_deref($_g)->params[2];
				$eif2 = _hx_deref($_g)->params[1];
				$tmp82 = $this->printExpr(_hx_deref($_g)->params[0]);
				$tmp83 = "" . _hx_string_or_null($tmp82) . " ? ";
				$tmp84 = $this->printExpr($eif2);
				$tmp85 = _hx_string_or_null($tmp83) . _hx_string_or_null($tmp84) . " : ";
				$tmp86 = $this->printExpr($eelse1);
				return _hx_string_or_null($tmp85) . _hx_string_or_null($tmp86);
			}break;
			case 28:{
				$ct = _hx_deref($_g)->params[1];
				$tmp87 = $this->printExpr(_hx_deref($_g)->params[0]);
				$tmp88 = "(" . _hx_string_or_null($tmp87) . " : ";
				$tmp89 = $this->printComplexType($ct);
				return _hx_string_or_null($tmp88) . _hx_string_or_null($tmp89) . ")";
			}break;
			case 29:{
				$e16 = _hx_deref($_g)->params[1];
				$tmp90 = $this->printMetadata(_hx_deref($_g)->params[0]);
				$tmp91 = _hx_string_or_null($tmp90) . " ";
				$tmp92 = $this->printExpr($e16);
				return _hx_string_or_null($tmp91) . _hx_string_or_null($tmp92);
			}break;
			}
		}
	}
	public function printExprs($el, $sep) {
		return $el->map((isset($this->printExpr) ? $this->printExpr: array($this, "printExpr")))->join($sep);
	}
	public function printExtension($tpl, $fields) {
		$tmp = "{\x0A" . _hx_string_or_null($this->tabs) . ">";
		$tmp1 = $tpl->map((isset($this->printTypePath) ? $this->printTypePath: array($this, "printTypePath")));
		$tmp2 = $tmp1->join(",\x0A" . _hx_string_or_null($this->tabs) . ">");
		$tmp3 = _hx_string_or_null($tmp) . _hx_string_or_null($tmp2) . ",";
		$tmp4 = null;
		$tmp5 = $fields->length > 0;
		if($tmp5) {
			$tmp6 = "\x0A" . _hx_string_or_null($this->tabs);
			$tmp7 = $fields->map((isset($this->printField) ? $this->printField: array($this, "printField")));
			$tmp8 = $tmp7->join(";\x0A" . _hx_string_or_null($this->tabs));
			$tmp4 = _hx_string_or_null($tmp6) . _hx_string_or_null($tmp8) . ";\x0A}";
		} else {
			$tmp4 = "\x0A}";
		}
		return _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4);
	}
	public function printStructure($fields) {
		$tmp = $fields->length === 0;
		if($tmp) {
			return "{ }";
		} else {
			$tmp1 = "{\x0A" . _hx_string_or_null($this->tabs);
			$tmp2 = $fields->map((isset($this->printField) ? $this->printField: array($this, "printField")));
			$tmp3 = $tmp2->join(";\x0A" . _hx_string_or_null($this->tabs));
			return _hx_string_or_null($tmp1) . _hx_string_or_null($tmp3) . ";\x0A}";
		}
	}
	public function printTypeDefinition($t, $printPackage = null) {
		if($printPackage === null) {
			$printPackage = true;
		}
		$old = $this->tabs;
		$this->tabs = $this->tabString;
		$str = null;
		if($t === null) {
			$str = "#NULL";
		} else {
			$tmp = null;
			$tmp1 = null;
			$tmp2 = null;
			if($printPackage) {
				$tmp2 = $t->pack->length > 0;
			} else {
				$tmp2 = false;
			}
			if($tmp2) {
				$tmp1 = $t->pack[0] !== "";
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				$tmp3 = $t->pack->join(".");
				$tmp = "package " . _hx_string_or_null($tmp3) . ";\x0A";
			} else {
				$tmp = "";
			}
			$tmp4 = null;
			$tmp5 = null;
			if($t->meta !== null) {
				$tmp5 = $t->meta->length > 0;
			} else {
				$tmp5 = false;
			}
			if($tmp5) {
				$tmp6 = $t->meta->map((isset($this->printMetadata) ? $this->printMetadata: array($this, "printMetadata")))->join(" ");
				$tmp4 = _hx_string_or_null($tmp6) . " ";
			} else {
				$tmp4 = "";
			}
			$tmp7 = _hx_string_or_null($tmp) . _hx_string_or_null($tmp4);
			$tmp8 = null;
			if($t->isExtern) {
				$tmp8 = "extern ";
			} else {
				$tmp8 = "";
			}
			$tmp9 = _hx_string_or_null($tmp7) . _hx_string_or_null($tmp8);
			$_g = $t->kind;
			$tmp10 = null;
			$tmp11 = $_g->index;
			switch($tmp11) {
			case 0:{
				$tmp12 = "enum " . _hx_string_or_null($t->name);
				$tmp13 = null;
				$tmp14 = $t->params->length > 0;
				if($tmp14) {
					$tmp15 = $t->params->map((isset($this->printTypeParamDecl) ? $this->printTypeParamDecl: array($this, "printTypeParamDecl")))->join(", ");
					$tmp13 = "<" . _hx_string_or_null($tmp15) . ">";
				} else {
					$tmp13 = "";
				}
				$tmp16 = _hx_string_or_null($tmp12) . _hx_string_or_null($tmp13) . " {\x0A";
				$_g1 = (new _hx_array(array()));
				{
					$_g11 = 0;
					$_g2 = $t->fields;
					while($_g11 < $_g2->length) {
						$field = $_g2[$_g11];
						++$_g11;
						$tmp17 = null;
						$tmp18 = null;
						if($field->doc !== null) {
							$tmp18 = $field->doc !== "";
						} else {
							$tmp18 = false;
						}
						if($tmp18) {
							$tmp19 = "/**\x0A" . _hx_string_or_null($this->tabs) . _hx_string_or_null($this->tabString);
							$s = $field->doc;
							$by = "\x0A" . _hx_string_or_null($this->tabs) . _hx_string_or_null($this->tabString);
							$tmp20 = str_replace("\x0A", $by, $s);
							$tmp17 = _hx_string_or_null($tmp19) . _hx_string_or_null($tmp20) . "\x0A" . _hx_string_or_null($this->tabs) . "**/\x0A" . _hx_string_or_null($this->tabs);
							unset($tmp20,$tmp19,$s,$by);
						} else {
							$tmp17 = "";
						}
						$tmp21 = _hx_string_or_null($this->tabs) . _hx_string_or_null($tmp17);
						$tmp22 = null;
						$tmp23 = null;
						if($field->meta !== null) {
							$tmp23 = $field->meta->length > 0;
						} else {
							$tmp23 = false;
						}
						if($tmp23) {
							$tmp24 = $field->meta->map((isset($this->printMetadata) ? $this->printMetadata: array($this, "printMetadata")))->join(" ");
							$tmp22 = _hx_string_or_null($tmp24) . " ";
							unset($tmp24);
						} else {
							$tmp22 = "";
						}
						$tmp25 = _hx_string_or_null($tmp21) . _hx_string_or_null($tmp22);
						$_g3 = $field->kind;
						$tmp26 = null;
						$tmp27 = $_g3->index;
						switch($tmp27) {
						case 0:{
							$tmp28 = $this->opt(_hx_deref($_g3)->params[0], (isset($this->printComplexType) ? $this->printComplexType: array($this, "printComplexType")), ":");
							$tmp26 = _hx_string_or_null($field->name) . _hx_string_or_null($tmp28);
						}break;
						case 1:{
							$tmp29 = $this->printFunction(_hx_deref($_g3)->params[0]);
							$tmp26 = _hx_string_or_null($field->name) . _hx_string_or_null($tmp29);
						}break;
						case 2:{
							throw new HException("FProp is invalid for TDEnum.");
						}break;
						}
						$_g1->push(_hx_string_or_null($tmp25) . _hx_string_or_null($tmp26) . ";");
						unset($tmp27,$tmp26,$tmp25,$tmp23,$tmp22,$tmp21,$tmp18,$tmp17,$field,$_g3);
					}
				}
				$tmp30 = $_g1->join("\x0A");
				$tmp10 = _hx_string_or_null($tmp16) . _hx_string_or_null($tmp30) . "\x0A}";
			}break;
			case 1:{
				$tmp31 = "typedef " . _hx_string_or_null($t->name);
				$tmp32 = null;
				$tmp33 = $t->params->length > 0;
				if($tmp33) {
					$tmp34 = $t->params->map((isset($this->printTypeParamDecl) ? $this->printTypeParamDecl: array($this, "printTypeParamDecl")))->join(", ");
					$tmp32 = "<" . _hx_string_or_null($tmp34) . ">";
				} else {
					$tmp32 = "";
				}
				$tmp35 = _hx_string_or_null($tmp31) . _hx_string_or_null($tmp32) . " = {\x0A";
				$_g4 = (new _hx_array(array()));
				{
					$_g12 = 0;
					$_g21 = $t->fields;
					while($_g12 < $_g21->length) {
						$f = $_g21[$_g12];
						++$_g12;
						$tmp36 = $this->printField($f);
						$_g4->push(_hx_string_or_null($this->tabs) . _hx_string_or_null($tmp36) . ";");
						unset($tmp36,$f);
					}
				}
				$tmp37 = $_g4->join("\x0A");
				$tmp10 = _hx_string_or_null($tmp35) . _hx_string_or_null($tmp37) . "\x0A}";
			}break;
			case 2:{
				$isInterface = _hx_deref($_g)->params[2];
				$interfaces = _hx_deref($_g)->params[1];
				$superClass = _hx_deref($_g)->params[0];
				$tmp38 = null;
				if($isInterface) {
					$tmp38 = "interface ";
				} else {
					$tmp38 = "class ";
				}
				$tmp39 = _hx_string_or_null($tmp38) . _hx_string_or_null($t->name);
				$tmp40 = null;
				$tmp41 = null;
				if($t->params !== null) {
					$tmp41 = $t->params->length > 0;
				} else {
					$tmp41 = false;
				}
				if($tmp41) {
					$tmp42 = $t->params->map((isset($this->printTypeParamDecl) ? $this->printTypeParamDecl: array($this, "printTypeParamDecl")))->join(", ");
					$tmp40 = "<" . _hx_string_or_null($tmp42) . ">";
				} else {
					$tmp40 = "";
				}
				$tmp43 = _hx_string_or_null($tmp39) . _hx_string_or_null($tmp40);
				$tmp44 = null;
				if($superClass !== null) {
					$tmp45 = $this->printTypePath($superClass);
					$tmp44 = " extends " . _hx_string_or_null($tmp45);
				} else {
					$tmp44 = "";
				}
				$tmp46 = _hx_string_or_null($tmp43) . _hx_string_or_null($tmp44);
				$tmp47 = null;
				if($interfaces !== null) {
					$tmp48 = null;
					if($isInterface) {
						$_g5 = (new _hx_array(array()));
						{
							$_g13 = 0;
							while($_g13 < $interfaces->length) {
								$tp = $interfaces[$_g13];
								++$_g13;
								$tmp49 = $this->printTypePath($tp);
								$_g5->push(" extends " . _hx_string_or_null($tmp49));
								unset($tp,$tmp49);
							}
						}
						$tmp48 = $_g5;
					} else {
						$_g6 = (new _hx_array(array()));
						{
							$_g14 = 0;
							while($_g14 < $interfaces->length) {
								$tp1 = $interfaces[$_g14];
								++$_g14;
								$tmp50 = $this->printTypePath($tp1);
								$_g6->push(" implements " . _hx_string_or_null($tmp50));
								unset($tp1,$tmp50);
							}
						}
						$tmp48 = $_g6;
					}
					$tmp47 = $tmp48->join("");
				} else {
					$tmp47 = "";
				}
				$tmp51 = _hx_string_or_null($tmp46) . _hx_string_or_null($tmp47) . " {\x0A";
				$_g7 = (new _hx_array(array()));
				{
					$_g15 = 0;
					$_g22 = $t->fields;
					while($_g15 < $_g22->length) {
						$f1 = $_g22[$_g15];
						++$_g15;
						$fstr = $this->printField($f1);
						$tmp52 = _hx_string_or_null($this->tabs) . _hx_string_or_null($fstr);
						$_g31 = $f1->kind;
						$tmp53 = null;
						switch($_g31->index) {
						case 1:{
							if(_hx_field(_hx_deref($_g31)->params[0], "expr") === null) {
								$tmp53 = ";";
							} else {
								if(_hx_deref($_g31)->params[0]->expr->expr->index === 12) {
									$tmp53 = "";
								} else {
									$tmp53 = ";";
								}
							}
						}break;
						case 0:case 2:{
							$tmp53 = ";";
						}break;
						}
						$_g7->push(_hx_string_or_null($tmp52) . _hx_string_or_null($tmp53));
						unset($tmp53,$tmp52,$fstr,$f1,$_g31);
					}
				}
				$tmp54 = $_g7->join("\x0A");
				$tmp10 = _hx_string_or_null($tmp51) . _hx_string_or_null($tmp54) . "\x0A}";
			}break;
			case 3:{
				$ct = _hx_deref($_g)->params[0];
				$tmp55 = "typedef " . _hx_string_or_null($t->name);
				$tmp56 = null;
				$tmp57 = $t->params->length > 0;
				if($tmp57) {
					$tmp58 = $t->params->map((isset($this->printTypeParamDecl) ? $this->printTypeParamDecl: array($this, "printTypeParamDecl")))->join(", ");
					$tmp56 = "<" . _hx_string_or_null($tmp58) . ">";
				} else {
					$tmp56 = "";
				}
				$tmp59 = _hx_string_or_null($tmp55) . _hx_string_or_null($tmp56) . " = ";
				$tmp60 = null;
				$tmp61 = $ct->index;
				switch($tmp61) {
				case 2:{
					$tmp60 = $this->printStructure(_hx_deref($ct)->params[0]);
				}break;
				case 4:{
					$tmp60 = $this->printExtension(_hx_deref($ct)->params[0], _hx_deref($ct)->params[1]);
				}break;
				default:{
					$tmp60 = $this->printComplexType($ct);
				}break;
				}
				$tmp10 = _hx_string_or_null($tmp59) . _hx_string_or_null($tmp60) . ";";
			}break;
			case 4:{
				$to = _hx_deref($_g)->params[2];
				$from = _hx_deref($_g)->params[1];
				$tthis = _hx_deref($_g)->params[0];
				$tmp62 = "abstract " . _hx_string_or_null($t->name);
				$tmp63 = null;
				$tmp64 = $t->params->length > 0;
				if($tmp64) {
					$tmp65 = $t->params->map((isset($this->printTypeParamDecl) ? $this->printTypeParamDecl: array($this, "printTypeParamDecl")))->join(", ");
					$tmp63 = "<" . _hx_string_or_null($tmp65) . ">";
				} else {
					$tmp63 = "";
				}
				$tmp66 = _hx_string_or_null($tmp62) . _hx_string_or_null($tmp63);
				$tmp67 = null;
				if($tthis === null) {
					$tmp67 = "";
				} else {
					$tmp68 = $this->printComplexType($tthis);
					$tmp67 = "(" . _hx_string_or_null($tmp68) . ")";
				}
				$tmp69 = _hx_string_or_null($tmp66) . _hx_string_or_null($tmp67);
				$tmp70 = null;
				if($from === null) {
					$tmp70 = "";
				} else {
					$_g8 = (new _hx_array(array()));
					{
						$_g16 = 0;
						while($_g16 < $from->length) {
							$f2 = $from[$_g16];
							++$_g16;
							$tmp71 = $this->printComplexType($f2);
							$_g8->push(" from " . _hx_string_or_null($tmp71));
							unset($tmp71,$f2);
						}
					}
					$tmp70 = $_g8->join("");
				}
				$tmp72 = _hx_string_or_null($tmp69) . _hx_string_or_null($tmp70);
				$tmp73 = null;
				if($to === null) {
					$tmp73 = "";
				} else {
					$_g9 = (new _hx_array(array()));
					{
						$_g17 = 0;
						while($_g17 < $to->length) {
							$t1 = $to[$_g17];
							++$_g17;
							$tmp74 = $this->printComplexType($t1);
							$_g9->push(" to " . _hx_string_or_null($tmp74));
							unset($tmp74,$t1);
						}
					}
					$tmp73 = $_g9->join("");
				}
				$tmp75 = _hx_string_or_null($tmp72) . _hx_string_or_null($tmp73) . " {\x0A";
				$_g10 = (new _hx_array(array()));
				{
					$_g18 = 0;
					$_g23 = $t->fields;
					while($_g18 < $_g23->length) {
						$f3 = $_g23[$_g18];
						++$_g18;
						$fstr1 = $this->printField($f3);
						$tmp76 = _hx_string_or_null($this->tabs) . _hx_string_or_null($fstr1);
						$_g32 = $f3->kind;
						$tmp77 = null;
						switch($_g32->index) {
						case 1:{
							if(_hx_field(_hx_deref($_g32)->params[0], "expr") === null) {
								$tmp77 = ";";
							} else {
								$tmp77 = "";
							}
						}break;
						case 0:case 2:{
							$tmp77 = ";";
						}break;
						default:{
							$tmp77 = "";
						}break;
						}
						$_g10->push(_hx_string_or_null($tmp76) . _hx_string_or_null($tmp77));
						unset($tmp77,$tmp76,$fstr1,$f3,$_g32);
					}
				}
				$tmp78 = $_g10->join("\x0A");
				$tmp10 = _hx_string_or_null($tmp75) . _hx_string_or_null($tmp78) . "\x0A}";
			}break;
			}
			$str = _hx_string_or_null($tmp9) . _hx_string_or_null($tmp10);
		}
		$this->tabs = $old;
		return $str;
	}
	public function opt($v, $f, $prefix = null) {
		if($prefix === null) {
			$prefix = "";
		}
		if($v === null) {
			return "";
		} else {
			$tmp = call_user_func_array($f, array($v));
			return _hx_string_or_null($prefix) . _hx_string_or_null($tmp);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'haxe.macro.Printer'; }
}
function haxe_macro_Printer_0(&$_gthis, $fld) {
	{
		$tmp12 = "" . _hx_string_or_null($fld->field) . " : ";
		$tmp13 = $_gthis->printExpr($fld->expr);
		return _hx_string_or_null($tmp12) . _hx_string_or_null($tmp13);
	}
}
function haxe_macro_Printer_1(&$_gthis, $c) {
	{
		$tmp55 = $_gthis->printExprs($c->values, ", ");
		$tmp56 = "case " . _hx_string_or_null($tmp55);
		$tmp57 = null;
		if(_hx_field($c, "guard") !== null) {
			$tmp58 = $_gthis->printExpr($c->guard);
			$tmp57 = " if (" . _hx_string_or_null($tmp58) . "):";
		} else {
			$tmp57 = ":";
		}
		$tmp59 = _hx_string_or_null($tmp56) . _hx_string_or_null($tmp57);
		$tmp60 = null;
		if(_hx_field($c, "expr") !== null) {
			$tmp61 = $_gthis->opt($c->expr, (isset($_gthis->printExpr) ? $_gthis->printExpr: array($_gthis, "printExpr")), null);
			$tmp60 = _hx_string_or_null($tmp61) . ";";
		} else {
			$tmp60 = "";
		}
		return _hx_string_or_null($tmp59) . _hx_string_or_null($tmp60);
	}
}
function haxe_macro_Printer_2(&$_gthis, $c1) {
	{
		$tmp69 = " catch(" . _hx_string_or_null($c1->name) . ":";
		$tmp70 = $_gthis->printComplexType($c1->type);
		$tmp71 = _hx_string_or_null($tmp69) . _hx_string_or_null($tmp70) . ") ";
		$tmp72 = $_gthis->printExpr($c1->expr);
		return _hx_string_or_null($tmp71) . _hx_string_or_null($tmp72);
	}
}
