<?php

// Generated by Haxe 3.3.0
class StringBuf {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->b = "";
	}}
	public $b;
	public function get_length() {
		return strlen($this->b);
	}
	public function add($x) {
		$tmp = is_null($x);
		if($tmp) {
			$x = "null";
		} else {
			$tmp1 = is_bool($x);
			if($tmp1) {
				$tmp2 = null;
				if($x) {
					$tmp2 = "true";
				} else {
					$tmp2 = "false";
				}
				$x = $tmp2;
			}
		}
		$this->b .= Std::string($x);
	}
	public function addSub($s, $pos, $len = null) {
		$this->b .= _hx_string_or_null(_hx_substr($s, $pos, $len));
	}
	public function addChar($c) {
		$this->b .= _hx_string_or_null(chr($c));
	}
	public function toString() {
		return $this->b;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("get_length" => "get_length");
	function __toString() { return $this->toString(); }
}
