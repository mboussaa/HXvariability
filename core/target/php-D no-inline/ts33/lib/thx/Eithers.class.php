<?php

// Generated by Haxe 3.3.0
class thx_Eithers {
	public function __construct(){}
	static function isLeft($either) {
		switch(Type::enumIndex($either)) {
		case 0:{
			return true;
		}break;
		case 1:{
			return false;
		}break;
		}
	}
	static function isRight($either) {
		switch(Type::enumIndex($either)) {
		case 0:{
			return false;
		}break;
		case 1:{
			return true;
		}break;
		}
	}
	static function toLeft($either) {
		switch(Type::enumIndex($either)) {
		case 0:{
			return haxe_ds_Option::Some(_hx_deref($either)->params[0]);
		}break;
		case 1:{
			return haxe_ds_Option::$None;
		}break;
		}
	}
	static function toRight($either) {
		switch(Type::enumIndex($either)) {
		case 0:{
			return haxe_ds_Option::$None;
		}break;
		case 1:{
			return haxe_ds_Option::Some(_hx_deref($either)->params[0]);
		}break;
		}
	}
	static function toLeftUnsafe($either) {
		switch(Type::enumIndex($either)) {
		case 0:{
			return _hx_deref($either)->params[0];
		}break;
		case 1:{
			return null;
		}break;
		}
	}
	static function toRightUnsafe($either) {
		switch(Type::enumIndex($either)) {
		case 0:{
			return null;
		}break;
		case 1:{
			return _hx_deref($either)->params[0];
		}break;
		}
	}
	static function map($either, $f) {
		switch(Type::enumIndex($either)) {
		case 0:{
			return thx_Either::Left(_hx_deref($either)->params[0]);
		}break;
		case 1:{
			$tmp = call_user_func_array($f, array(_hx_deref($either)->params[0]));
			return thx_Either::Right($tmp);
		}break;
		}
	}
	static function flatMap($either, $f) {
		switch(Type::enumIndex($either)) {
		case 0:{
			return thx_Either::Left(_hx_deref($either)->params[0]);
		}break;
		case 1:{
			return call_user_func_array($f, array(_hx_deref($either)->params[0]));
		}break;
		}
	}
	static function leftMap($either, $f) {
		switch(Type::enumIndex($either)) {
		case 0:{
			$tmp = call_user_func_array($f, array(_hx_deref($either)->params[0]));
			return thx_Either::Left($tmp);
		}break;
		case 1:{
			return thx_Either::Right(_hx_deref($either)->params[0]);
		}break;
		}
	}
	static function orThrow($either, $message) {
		switch(Type::enumIndex($either)) {
		case 0:{
			$v = _hx_deref($either)->params[0];
			$tmp = "" . _hx_string_or_null($message) . ": ";
			$tmp1 = Std::string($v);
			throw new HException(new thx_Error(_hx_string_or_null($tmp) . _hx_string_or_null($tmp1), null, _hx_anonymous(array("fileName" => "Eithers.hx", "lineNumber" => 93, "className" => "thx.Eithers", "methodName" => "orThrow"))));
		}break;
		case 1:{
			return _hx_deref($either)->params[0];
		}break;
		}
	}
	static function toVNel($either) {
		switch(Type::enumIndex($either)) {
		case 0:{
			$tmp = thx__Nel_Nel_Impl_::pure(_hx_deref($either)->params[0]);
			return thx_Either::Left($tmp);
		}break;
		case 1:{
			return thx_Either::Right(_hx_deref($either)->params[0]);
		}break;
		}
	}
	static function cata($either, $l, $r) {
		switch(Type::enumIndex($either)) {
		case 0:{
			return call_user_func_array($l, array(_hx_deref($either)->params[0]));
		}break;
		case 1:{
			return call_user_func_array($r, array(_hx_deref($either)->params[0]));
		}break;
		}
	}
	function __toString() { return 'thx.Eithers'; }
}
