<?php

// Generated by Haxe 3.3.0
class thx_fp_TestList {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testFoldLeft() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_ListImpl::Cons(3, thx_fp_ListImpl::$Nil);
			$tmp1 = thx_fp_ListImpl::Cons(2, $tmp);
			$list = thx_fp_ListImpl::Cons(1, $tmp1);
			$tmp2 = thx_fp__List_List_Impl_::foldLeft($list, 0, array(new _hx_lambda(array(), "thx_fp_TestList_0"), 'execute'));
			utest_Assert::equals(6, $tmp2, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 17, "className" => "thx.fp.TestList", "methodName" => "testFoldLeft")));
			$tmp3 = thx_fp__List_List_Impl_::foldLeft($list, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestList_1"), 'execute'));
			utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 19, "className" => "thx.fp.TestList", "methodName" => "testFoldLeft")));
			unset($tmp3,$tmp2,$tmp1,$tmp,$list);
		}
	}
	public function testToArray() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_ListImpl::Cons(3, thx_fp_ListImpl::$Nil);
			$tmp1 = thx_fp_ListImpl::Cons(2, $tmp);
			$list = thx_fp_ListImpl::Cons(1, $tmp1);
			$tmp2 = thx_fp__List_List_Impl_::foldLeft($list, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestList_2"), 'execute'));
			utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 28, "className" => "thx.fp.TestList", "methodName" => "testToArray")));
			unset($tmp2,$tmp1,$tmp,$list);
		}
	}
	public function testIntersperse() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_ListImpl::Cons(3, thx_fp_ListImpl::$Nil);
			$tmp1 = thx_fp_ListImpl::Cons(2, $tmp);
			$list = thx_fp_ListImpl::Cons(1, $tmp1);
			$interspersed = thx_fp__List_List_Impl_::intersperse($list, 0);
			$tmp2 = thx_fp_ListImpl::Cons(3, thx_fp_ListImpl::$Nil);
			$tmp3 = thx_fp_ListImpl::Cons(0, $tmp2);
			$tmp4 = thx_fp_ListImpl::Cons(2, $tmp3);
			$tmp5 = thx_fp_ListImpl::Cons(0, $tmp4);
			$tmp6 = thx_fp_ListImpl::Cons(1, $tmp5);
			utest_Assert::same($tmp6, $interspersed, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 35, "className" => "thx.fp.TestList", "methodName" => "testIntersperse")));
			unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$list,$interspersed);
		}
	}
	public function testFromArray() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$arr = (new _hx_array(array(1, 2, 3, 4)));
			$_e = $arr;
			$tmp = array(new _hx_lambda(array(&$_e), "thx_fp_TestList_3"), 'execute');
			$this1 = call_user_func_array($tmp, array(array(new _hx_lambda(array(), "thx_fp_TestList_4"), 'execute'), thx_fp__List_List_Impl_::hempty()));
			$tmp1 = thx_fp__List_List_Impl_::foldLeft($this1, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestList_5"), 'execute'));
			utest_Assert::same($arr, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 41, "className" => "thx.fp.TestList", "methodName" => "testFromArray")));
			unset($tmp1,$tmp,$this1,$arr,$_e);
		}
	}
	public function testConcat() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_ListImpl::Cons(2, thx_fp_ListImpl::$Nil);
			$l1 = thx_fp_ListImpl::Cons(1, $tmp);
			$tmp1 = thx_fp_ListImpl::Cons(4, thx_fp_ListImpl::$Nil);
			$l2 = thx_fp_ListImpl::Cons(3, $tmp1);
			$l = thx_fp__List_List_Impl_::concat($l1, $l2);
			$tmp2 = thx_fp_ListImpl::Cons(4, thx_fp_ListImpl::$Nil);
			$tmp3 = thx_fp_ListImpl::Cons(3, $tmp2);
			$tmp4 = thx_fp_ListImpl::Cons(2, $tmp3);
			$tmp5 = thx_fp_ListImpl::Cons(1, $tmp4);
			utest_Assert::same($tmp5, $l, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 49, "className" => "thx.fp.TestList", "methodName" => "testConcat")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$l2,$l1,$l);
		}
	}
	public function testToString() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_ListImpl::Cons(3, thx_fp_ListImpl::$Nil);
			$tmp1 = thx_fp_ListImpl::Cons(2, $tmp);
			$list = thx_fp_ListImpl::Cons(1, $tmp1);
			$tmp2 = thx_fp_IntList::toString($list);
			utest_Assert::same("[1,2,3]", $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 55, "className" => "thx.fp.TestList", "methodName" => "testToString")));
			$tmp3 = thx_fp_ListImpl::Cons("3", thx_fp_ListImpl::$Nil);
			$tmp4 = thx_fp_ListImpl::Cons("2", $tmp3);
			$list1 = thx_fp_ListImpl::Cons("1", $tmp4);
			$tmp5 = thx_fp_StringList::toString($list1);
			utest_Assert::same("[1,2,3]", $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 58, "className" => "thx.fp.TestList", "methodName" => "testToString")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$list1,$list);
		}
	}
	public function testMap() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_ListImpl::Cons(3, thx_fp_ListImpl::$Nil);
			$tmp1 = thx_fp_ListImpl::Cons(2, $tmp);
			$list = thx_fp_ListImpl::Cons(1, $tmp1);
			$tmp2 = thx_fp_ListImpl::Cons(6, thx_fp_ListImpl::$Nil);
			$tmp3 = thx_fp_ListImpl::Cons(4, $tmp2);
			$tmp4 = thx_fp_ListImpl::Cons(2, $tmp3);
			$tmp5 = thx_fp__List_List_Impl_::map($list, array(new _hx_lambda(array(), "thx_fp_TestList_6"), 'execute'));
			utest_Assert::same($tmp4, $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 64, "className" => "thx.fp.TestList", "methodName" => "testMap")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$list);
		}
	}
	public function testFlatMap() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_ListImpl::Cons(3, thx_fp_ListImpl::$Nil);
			$tmp1 = thx_fp_ListImpl::Cons(2, $tmp);
			$list = thx_fp_ListImpl::Cons(1, $tmp1);
			$map = null;
			$map = array(new _hx_lambda(array(&$map), "thx_fp_TestList_7"), 'execute');
			$slist = thx_fp__List_List_Impl_::flatMap($list, $map);
			$tmp2 = thx_fp_ListImpl::Cons(1, thx_fp_ListImpl::$Nil);
			$tmp3 = thx_fp_ListImpl::Cons(2, $tmp2);
			$tmp4 = thx_fp_ListImpl::Cons(3, $tmp3);
			$tmp5 = thx_fp_ListImpl::Cons(1, $tmp4);
			$tmp6 = thx_fp_ListImpl::Cons(2, $tmp5);
			$tmp7 = thx_fp_ListImpl::Cons(1, $tmp6);
			utest_Assert::same($tmp7, $slist, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 77, "className" => "thx.fp.TestList", "methodName" => "testFlatMap")));
			unset($tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$slist,$map,$list);
		}
	}
	public function testZip5Ap() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$sx = thx_Arrays::reduceRight((new _hx_array(array("a", "b", "c"))), array(new _hx_lambda(array(), "thx_fp_TestList_8"), 'execute'), thx_fp__List_List_Impl_::hempty());
			$ix = thx_Arrays::reduceRight((new _hx_array(array(1, 2))), array(new _hx_lambda(array(), "thx_fp_TestList_9"), 'execute'), thx_fp__List_List_Impl_::hempty());
			$tx = thx_Arrays::reduceRight((new _hx_array(array("x", "y", "z"))), array(new _hx_lambda(array(), "thx_fp_TestList_10"), 'execute'), thx_fp__List_List_Impl_::hempty());
			$jx = thx_Arrays::reduceRight((new _hx_array(array(3, 4))), array(new _hx_lambda(array(), "thx_fp_TestList_11"), 'execute'), thx_fp__List_List_Impl_::hempty());
			$bx = thx_Arrays::reduceRight((new _hx_array(array(true, false, true))), array(new _hx_lambda(array(), "thx_fp_TestList_12"), 'execute'), thx_fp__List_List_Impl_::hempty());
			$tmp = thx_Arrays::reduceRight((new _hx_array(array("a1x3true", "b2y4false"))), array(new _hx_lambda(array(), "thx_fp_TestList_13"), 'execute'), thx_fp__List_List_Impl_::hempty());
			$tmp1 = thx_fp__List_List_Impl_::zip5Ap(array(new _hx_lambda(array(), "thx_fp_TestList_14"), 'execute'), $sx, $ix, $tx, $jx, $bx);
			utest_Assert::same($tmp, $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestList.hx", "lineNumber" => 89, "className" => "thx.fp.TestList", "methodName" => "testZip5Ap")));
			unset($tx,$tmp1,$tmp,$sx,$jx,$ix,$bx);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.fp.TestList'; }
}
function thx_fp_TestList_0($_0, $_1) {
	{
		return $_0 + $_1;
	}
}
function thx_fp_TestList_1($acc, $v) {
	{
		$acc->push($v);
		return $acc;
	}
}
function thx_fp_TestList_2($acc, $a) {
	{
		$acc->push($a);
		return $acc;
	}
}
function thx_fp_TestList_3(&$_e, $f, $initial) {
	{
		return thx_Arrays::reduceRight($_e, $f, $initial);
	}
}
function thx_fp_TestList_4($_0, $_1) {
	{
		return thx_fp_ListImpl::Cons($_1, $_0);
	}
}
function thx_fp_TestList_5($acc, $a) {
	{
		$acc->push($a);
		return $acc;
	}
}
function thx_fp_TestList_6($v) {
	{
		return $v * 2;
	}
}
function thx_fp_TestList_7(&$map, $v) {
	{
		if($v === 0) {
			return thx_fp_ListImpl::$Nil;
		} else {
			$xs = call_user_func_array($map, array($v - 1));
			return thx_fp_ListImpl::Cons($v, $xs);
		}
	}
}
function thx_fp_TestList_8($_0, $_1) {
	{
		return thx_fp_ListImpl::Cons($_1, $_0);
	}
}
function thx_fp_TestList_9($_01, $_11) {
	{
		return thx_fp_ListImpl::Cons($_11, $_01);
	}
}
function thx_fp_TestList_10($_02, $_12) {
	{
		return thx_fp_ListImpl::Cons($_12, $_02);
	}
}
function thx_fp_TestList_11($_03, $_13) {
	{
		return thx_fp_ListImpl::Cons($_13, $_03);
	}
}
function thx_fp_TestList_12($_04, $_14) {
	{
		return thx_fp_ListImpl::Cons($_14, $_04);
	}
}
function thx_fp_TestList_13($_05, $_15) {
	{
		return thx_fp_ListImpl::Cons($_15, $_05);
	}
}
function thx_fp_TestList_14($s, $i, $t, $j, $b) {
	{
		$tmp2 = "" . _hx_string_or_null($s) . _hx_string_rec($i, "") . _hx_string_or_null($t) . _hx_string_rec($j, "");
		$tmp3 = Std::string($b);
		return _hx_string_or_null($tmp2) . _hx_string_or_null($tmp3);
	}
}
