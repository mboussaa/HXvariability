<?php

// Generated by Haxe 3.3.0
class thx__Validation_Validation_Impl_ {
	public function __construct(){}
	static function validation($e) {
		return $e;
	}
	static function vnel($e) {
		return $e;
	}
	static function pure($a) {
		return thx_Either::Right($a);
	}
	static function success($a) {
		return thx_Either::Right($a);
	}
	static function failure($e) {
		return thx_Either::Left($e);
	}
	static function nn($a, $e) {
		if($a === null) {
			return thx_Either::Left($e);
		} else {
			return thx_Either::Right($a);
		}
	}
	static function successNel($a) {
		return thx_Either::Right($a);
	}
	static function failureNel($e) {
		$tmp = thx__Nel_Nel_Impl_::pure($e);
		return thx_Either::Left($tmp);
	}
	static function nnNel($a, $e) {
		if($a === null) {
			$tmp = thx__Nel_Nel_Impl_::pure($e);
			return thx_Either::Left($tmp);
		} else {
			return thx_Either::Right($a);
		}
	}
	static function get_either($this1) {
		return $this1;
	}
	static function map($this1, $f) {
		$tmp = thx_Either::Right($f);
		return thx__Validation_Validation_Impl_::ap($this1, $tmp, array(new _hx_lambda(array(), "thx__Validation_Validation_Impl__0"), 'execute'));
	}
	static function foldLeft($this1, $b, $f) {
		switch(Type::enumIndex($this1)) {
		case 0:{
			return $b;
		}break;
		case 1:{
			return call_user_func_array($f, array($b, _hx_deref($this1)->params[0]));
		}break;
		}
	}
	static function foldMap($this1, $f, $m) {
		$tmp = thx_Eithers::map($this1, $f);
		$tmp1 = thx__Monoid_Monoid_Impl_::get_zero($m);
		$_e = $m;
		$tmp2 = array(new _hx_lambda(array(&$_e), "thx__Validation_Validation_Impl__1"), 'execute');
		return thx__Validation_Validation_Impl_::foldLeft($tmp, $tmp1, $tmp2);
	}
	static function ap($this1, $v, $s) {
		switch(Type::enumIndex($this1)) {
		case 0:{
			$e0 = _hx_deref($this1)->params[0];
			$_g = $v;
			switch(Type::enumIndex($_g)) {
			case 0:{
				$tmp = call_user_func_array(thx__Semigroup_Semigroup_Impl_::get_append($s), array($e0, _hx_deref($_g)->params[0]));
				return thx_Either::Left($tmp);
			}break;
			case 1:{
				return thx_Either::Left($e0);
			}break;
			}
		}break;
		case 1:{
			$a = _hx_deref($this1)->params[0];
			$_g1 = $v;
			switch(Type::enumIndex($_g1)) {
			case 0:{
				return thx_Either::Left(_hx_deref($_g1)->params[0]);
			}break;
			case 1:{
				$tmp1 = _hx_deref($_g1)->params[0]($a);
				return thx_Either::Right($tmp1);
			}break;
			}
		}break;
		}
	}
	static function zip($this1, $v, $s) {
		return thx__Validation_Validation_Impl_::ap($this1, thx_Eithers::map($v, array(new _hx_lambda(array(), "thx__Validation_Validation_Impl__2"), 'execute')), $s);
	}
	static function leftMap($this1, $f) {
		return thx_Eithers::leftMap($this1, $f);
	}
	static function wrapNel($this1) {
		return thx_Eithers::leftMap($this1, (isset(thx__Nel_Nel_Impl_::$pure) ? thx__Nel_Nel_Impl_::$pure: array("thx__Nel_Nel_Impl_", "pure")));
	}
	static function ensure($this1, $p, $error) {
		if(Type::enumIndex($this1) === 1) {
			$tmp = call_user_func_array($p, array(_hx_deref($this1)->params[0]));
			if($tmp) {
				return $this1;
			} else {
				return thx_Either::Left($error);
			}
		} else {
			return $this1;
		}
	}
	static function flatMapV($this1, $f) {
		switch(Type::enumIndex($this1)) {
		case 0:{
			return thx_Either::Left(_hx_deref($this1)->params[0]);
		}break;
		case 1:{
			return call_user_func_array($f, array(_hx_deref($this1)->params[0]));
		}break;
		}
	}
	static function val2($f, $v1, $v2, $s) {
		$f1 = thx_Functions2::curry($f);
		$tmp = thx_Either::Right($f1);
		$tmp1 = thx__Validation_Validation_Impl_::ap($v1, $tmp, array(new _hx_lambda(array(), "thx__Validation_Validation_Impl__3"), 'execute'));
		return thx__Validation_Validation_Impl_::ap($v2, $tmp1, $s);
	}
	static function val3($f, $v1, $v2, $v3, $s) {
		$f1 = thx_Functions3::curry($f);
		$f2 = thx_Functions2::curry($f1);
		$tmp = thx_Either::Right($f2);
		$tmp1 = thx__Validation_Validation_Impl_::ap($v1, $tmp, array(new _hx_lambda(array(), "thx__Validation_Validation_Impl__4"), 'execute'));
		$tmp2 = thx__Validation_Validation_Impl_::ap($v2, $tmp1, $s);
		return thx__Validation_Validation_Impl_::ap($v3, $tmp2, $s);
	}
	static function val4($f, $v1, $v2, $v3, $v4, $s) {
		$f1 = thx_Functions4::curry($f);
		$f2 = thx_Functions3::curry($f1);
		$f3 = thx_Functions2::curry($f2);
		$tmp = thx_Either::Right($f3);
		$tmp1 = thx__Validation_Validation_Impl_::ap($v1, $tmp, array(new _hx_lambda(array(), "thx__Validation_Validation_Impl__5"), 'execute'));
		$tmp2 = thx__Validation_Validation_Impl_::ap($v2, $tmp1, $s);
		$tmp3 = thx__Validation_Validation_Impl_::ap($v3, $tmp2, $s);
		return thx__Validation_Validation_Impl_::ap($v4, $tmp3, $s);
	}
	static function val5($f, $v1, $v2, $v3, $v4, $v5, $s) {
		$f1 = thx_Functions5::curry($f);
		$f2 = thx_Functions4::curry($f1);
		$f3 = thx_Functions3::curry($f2);
		$f4 = thx_Functions2::curry($f3);
		$tmp = thx_Either::Right($f4);
		$tmp1 = thx__Validation_Validation_Impl_::ap($v1, $tmp, array(new _hx_lambda(array(), "thx__Validation_Validation_Impl__6"), 'execute'));
		$tmp2 = thx__Validation_Validation_Impl_::ap($v2, $tmp1, $s);
		$tmp3 = thx__Validation_Validation_Impl_::ap($v3, $tmp2, $s);
		$tmp4 = thx__Validation_Validation_Impl_::ap($v4, $tmp3, $s);
		return thx__Validation_Validation_Impl_::ap($v5, $tmp4, $s);
	}
	static function val6($f, $v1, $v2, $v3, $v4, $v5, $v6, $s) {
		$f1 = thx_Functions6::curry($f);
		$f2 = thx_Functions5::curry($f1);
		$f3 = thx_Functions4::curry($f2);
		$f4 = thx_Functions3::curry($f3);
		$f5 = thx_Functions2::curry($f4);
		$tmp = thx_Either::Right($f5);
		$tmp1 = thx__Validation_Validation_Impl_::ap($v1, $tmp, array(new _hx_lambda(array(), "thx__Validation_Validation_Impl__7"), 'execute'));
		$tmp2 = thx__Validation_Validation_Impl_::ap($v2, $tmp1, $s);
		$tmp3 = thx__Validation_Validation_Impl_::ap($v3, $tmp2, $s);
		$tmp4 = thx__Validation_Validation_Impl_::ap($v4, $tmp3, $s);
		$tmp5 = thx__Validation_Validation_Impl_::ap($v5, $tmp4, $s);
		return thx__Validation_Validation_Impl_::ap($v6, $tmp5, $s);
	}
	static function val7($f, $v1, $v2, $v3, $v4, $v5, $v6, $v7, $s) {
		$f1 = thx_Functions7::curry($f);
		$f2 = thx_Functions6::curry($f1);
		$f3 = thx_Functions5::curry($f2);
		$f4 = thx_Functions4::curry($f3);
		$f5 = thx_Functions3::curry($f4);
		$f6 = thx_Functions2::curry($f5);
		$tmp = thx_Either::Right($f6);
		$tmp1 = thx__Validation_Validation_Impl_::ap($v1, $tmp, array(new _hx_lambda(array(), "thx__Validation_Validation_Impl__8"), 'execute'));
		$tmp2 = thx__Validation_Validation_Impl_::ap($v2, $tmp1, $s);
		$tmp3 = thx__Validation_Validation_Impl_::ap($v3, $tmp2, $s);
		$tmp4 = thx__Validation_Validation_Impl_::ap($v4, $tmp3, $s);
		$tmp5 = thx__Validation_Validation_Impl_::ap($v5, $tmp4, $s);
		$tmp6 = thx__Validation_Validation_Impl_::ap($v6, $tmp5, $s);
		return thx__Validation_Validation_Impl_::ap($v7, $tmp6, $s);
	}
	static function val8($f, $v1, $v2, $v3, $v4, $v5, $v6, $v7, $v8, $s) {
		$f1 = thx_Functions8::curry($f);
		$f2 = thx_Functions7::curry($f1);
		$f3 = thx_Functions6::curry($f2);
		$f4 = thx_Functions5::curry($f3);
		$f5 = thx_Functions4::curry($f4);
		$f6 = thx_Functions3::curry($f5);
		$f7 = thx_Functions2::curry($f6);
		$tmp = thx_Either::Right($f7);
		$tmp1 = thx__Validation_Validation_Impl_::ap($v1, $tmp, array(new _hx_lambda(array(), "thx__Validation_Validation_Impl__9"), 'execute'));
		$tmp2 = thx__Validation_Validation_Impl_::ap($v2, $tmp1, $s);
		$tmp3 = thx__Validation_Validation_Impl_::ap($v3, $tmp2, $s);
		$tmp4 = thx__Validation_Validation_Impl_::ap($v4, $tmp3, $s);
		$tmp5 = thx__Validation_Validation_Impl_::ap($v5, $tmp4, $s);
		$tmp6 = thx__Validation_Validation_Impl_::ap($v6, $tmp5, $s);
		$tmp7 = thx__Validation_Validation_Impl_::ap($v7, $tmp6, $s);
		return thx__Validation_Validation_Impl_::ap($v8, $tmp7, $s);
	}
	static $__properties__ = array("get_either" => "get_either");
	function __toString() { return 'thx._Validation.Validation_Impl_'; }
}
function thx__Validation_Validation_Impl__0($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx__Validation_Validation_Impl__1(&$_e, $a0, $a1) {
	{
		return thx__Monoid_Monoid_Impl_::append($_e, $a0, $a1);
	}
}
function thx__Validation_Validation_Impl__2($b) {
	{
		$_1 = $b;
		return array(new _hx_lambda(array(&$_1), "thx__Validation_Validation_Impl__10"), 'execute');
	}
}
function thx__Validation_Validation_Impl__3($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx__Validation_Validation_Impl__4($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx__Validation_Validation_Impl__5($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx__Validation_Validation_Impl__6($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx__Validation_Validation_Impl__7($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx__Validation_Validation_Impl__8($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx__Validation_Validation_Impl__9($e1, $e2) {
	{
		throw new HException("Unreachable");
	}
}
function thx__Validation_Validation_Impl__10(&$_1, $_0) {
	{
		return thx__Tuple_Tuple2_Impl_::of($_0, $_1);
	}
}
