<?php

// Generated by Haxe 3.3.0
class thx_fp_TestSet {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testEmpty() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$set = thx_fp_SetImpl::$Tip;
			$tmp = thx_fp_StringSet::exists($set, "some");
			utest_Assert::isFalse($tmp, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 16, "className" => "thx.fp.TestSet", "methodName" => "testEmpty")));
			utest_Assert::equals(0, thx_fp__Set_Set_Impl_::size($set), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 17, "className" => "thx.fp.TestSet", "methodName" => "testEmpty")));
			unset($tmp,$set);
		}
	}
	public function testSizes() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "B", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "A");
			$tmp1 = thx_fp_StringSet::set($tmp, "C");
			utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp1), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 22, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
			$tmp2 = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "A", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "B");
			$tmp3 = thx_fp_StringSet::set($tmp2, "C");
			utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp3), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 23, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
			$tmp4 = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "C", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "B");
			$tmp5 = thx_fp_StringSet::set($tmp4, "A");
			utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp5), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 24, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
			$tmp6 = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "B", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "C");
			$tmp7 = thx_fp_StringSet::set($tmp6, "A");
			utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp7), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 25, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
			$tmp8 = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "C", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "A");
			$tmp9 = thx_fp_StringSet::set($tmp8, "B");
			utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp9), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 26, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
			$tmp10 = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "A", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "C");
			$tmp11 = thx_fp_StringSet::set($tmp10, "B");
			utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($tmp11), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 27, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
			$tmp12 = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "A", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "A");
			$tmp13 = thx_fp_StringSet::set($tmp12, "A");
			utest_Assert::equals(1, thx_fp__Set_Set_Impl_::size($tmp13), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 29, "className" => "thx.fp.TestSet", "methodName" => "testSizes")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testSet() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "Y", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "X");
			$tmp1 = thx_fp_StringSet::set($tmp, "Y");
			$tmp2 = thx_fp_StringSet::set($tmp1, "Z");
			$m = thx_fp_StringSet::set($tmp2, "Z");
			$tmp3 = thx_fp_StringSet::exists($m, "X");
			utest_Assert::isTrue($tmp3, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 35, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
			$tmp4 = thx_fp_StringSet::exists($m, "Y");
			utest_Assert::isTrue($tmp4, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 36, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
			$tmp5 = thx_fp_StringSet::exists($m, "Z");
			utest_Assert::isTrue($tmp5, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 37, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
			$tmp6 = thx_fp_StringSet::exists($m, "W");
			utest_Assert::isFalse($tmp6, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 38, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
			utest_Assert::equals(3, thx_fp__Set_Set_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 39, "className" => "thx.fp.TestSet", "methodName" => "testSet")));
			unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$m);
		}
	}
	public function testMapList() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "Y", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "X");
			$m = thx_fp_StringSet::set($tmp, "Z");
			$l = thx_fp__Set_Set_Impl_::mapList($m, array(new _hx_lambda(array(), "thx_fp_TestSet_0"), 'execute'));
			$tmp1 = thx_fp__List_List_Impl_::foldLeft($l, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestSet_1"), 'execute'));
			$tmp2 = thx_Arrays::order($tmp1, (isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
			utest_Assert::same((new _hx_array(array("x", "y", "z"))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 47, "className" => "thx.fp.TestSet", "methodName" => "testMapList")));
			unset($tmp2,$tmp1,$tmp,$m,$l);
		}
	}
	public function testFoldLeft() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_IntSet::set(thx_fp_SetImpl::Bin(1, 1, thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), 2);
			$set = thx_fp_IntSet::set($tmp, 3);
			$tmp1 = thx_fp__Set_Set_Impl_::foldLeft($set, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestSet_2"), 'execute'));
			$tmp2 = thx_Arrays::order($tmp1, (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
			utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 53, "className" => "thx.fp.TestSet", "methodName" => "testFoldLeft")));
			unset($tmp2,$tmp1,$tmp,$set);
		}
	}
	public function testToList() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_StringSet::set(thx_fp_SetImpl::Bin(1, "Y", thx_fp_SetImpl::$Tip, thx_fp_SetImpl::$Tip), "X");
			$m = thx_fp_StringSet::set($tmp, "Z");
			$l = thx_fp__Set_Set_Impl_::toList($m);
			$tmp1 = thx_fp__List_List_Impl_::foldLeft($l, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestSet_3"), 'execute'));
			$tmp2 = thx_Arrays::order($tmp1, (isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
			utest_Assert::same((new _hx_array(array("X", "Y", "Z"))), $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestSet.hx", "lineNumber" => 64, "className" => "thx.fp.TestSet", "methodName" => "testToList")));
			unset($tmp2,$tmp1,$tmp,$m,$l);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.fp.TestSet'; }
}
function thx_fp_TestSet_0($v) {
	{
		return strtolower($v);
	}
}
function thx_fp_TestSet_1($acc, $a) {
	{
		$acc->push($a);
		return $acc;
	}
}
function thx_fp_TestSet_2($acc, $v) {
	{
		$acc->push($v);
		return $acc;
	}
}
function thx_fp_TestSet_3($acc, $a) {
	{
		$acc->push($a);
		return $acc;
	}
}
