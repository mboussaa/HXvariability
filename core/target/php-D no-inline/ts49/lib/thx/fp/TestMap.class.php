<?php

// Generated by Haxe 3.3.0
class thx_fp_TestMap {
	public function __construct($i) {
		if(!php_Boot::$skip_constructor) {
		$this->x = $i;
	}}
	public $x;
	public function testRemove() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "Y", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "X", 2);
			$tmp1 = thx_fp_StringMap::set($tmp, "Z", 3);
			$m = thx_fp_StringMap::remove($tmp1, "X");
			$tmp2 = haxe_ds_Option::Some(1);
			$tmp3 = thx_fp_StringMap::get($m, "Y");
			utest_Assert::same($tmp2, $tmp3, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 22, "className" => "thx.fp.TestMap", "methodName" => "testRemove")));
			$tmp4 = haxe_ds_Option::Some(3);
			$tmp5 = thx_fp_StringMap::get($m, "Z");
			utest_Assert::same($tmp4, $tmp5, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 23, "className" => "thx.fp.TestMap", "methodName" => "testRemove")));
			utest_Assert::equals(2, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 24, "className" => "thx.fp.TestMap", "methodName" => "testRemove")));
			unset($tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$m);
		}
	}
	public function testEmpty() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$m = thx_fp_MapImpl::$Tip;
			$tmp = thx_fp_StringMap::get($m, "some");
			utest_Assert::same(haxe_ds_Option::$None, $tmp, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 30, "className" => "thx.fp.TestMap", "methodName" => "testEmpty")));
			utest_Assert::equals(0, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 31, "className" => "thx.fp.TestMap", "methodName" => "testEmpty")));
			unset($tmp,$m);
		}
	}
	public function testSizes() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "B", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "A", 1);
			$tmp1 = thx_fp_StringMap::set($tmp, "C", 1);
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp1), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 36, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$tmp2 = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "B", 1);
			$tmp3 = thx_fp_StringMap::set($tmp2, "C", 1);
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp3), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 37, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$tmp4 = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "C", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "B", 1);
			$tmp5 = thx_fp_StringMap::set($tmp4, "A", 1);
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp5), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 38, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$tmp6 = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "B", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "C", 1);
			$tmp7 = thx_fp_StringMap::set($tmp6, "A", 1);
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp7), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 39, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$tmp8 = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "C", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "A", 1);
			$tmp9 = thx_fp_StringMap::set($tmp8, "B", 1);
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp9), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 40, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$tmp10 = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "C", 1);
			$tmp11 = thx_fp_StringMap::set($tmp10, "B", 1);
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($tmp11), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 41, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			$tmp12 = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "A", 1);
			$tmp13 = thx_fp_StringMap::set($tmp12, "A", 1);
			utest_Assert::equals(1, thx_fp__Map_Map_Impl_::size($tmp13), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 43, "className" => "thx.fp.TestMap", "methodName" => "testSizes")));
			unset($tmp9,$tmp8,$tmp7,$tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp13,$tmp12,$tmp11,$tmp10,$tmp1,$tmp);
		}
	}
	public function testFoldLeft() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "B", 2);
			$map = thx_fp_StringMap::set($tmp, "C", 3);
			$arr = thx_fp__Map_Map_Impl_::foldLeft($map, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestMap_0"), 'execute'));
			$tmp1 = thx_Arrays::order($arr, (isset(thx_Ints::$compare) ? thx_Ints::$compare: array("thx_Ints", "compare")));
			utest_Assert::same((new _hx_array(array(1, 2, 3))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 53, "className" => "thx.fp.TestMap", "methodName" => "testFoldLeft")));
			unset($tmp1,$tmp,$map,$arr);
		}
	}
	public function testFoldLeftKeys() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "A", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "B", 2);
			$map = thx_fp_StringMap::set($tmp, "C", 3);
			$arr = thx_fp__Map_Map_Impl_::foldLeftKeys($map, (new _hx_array(array())), array(new _hx_lambda(array(), "thx_fp_TestMap_1"), 'execute'));
			$tmp1 = thx_Arrays::order($arr, (isset(thx_Strings::$compare) ? thx_Strings::$compare: array("thx_Strings", "compare")));
			utest_Assert::same((new _hx_array(array("A", "B", "C"))), $tmp1, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 63, "className" => "thx.fp.TestMap", "methodName" => "testFoldLeftKeys")));
			unset($tmp1,$tmp,$map,$arr);
		}
	}
	public function testSet() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$tmp = thx_fp_StringMap::set(thx_fp_MapImpl::Bin(1, "Y", 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), "X", 2);
			$m = thx_fp_StringMap::set($tmp, "Z", 3);
			$tmp1 = haxe_ds_Option::Some(2);
			$tmp2 = thx_fp_StringMap::get($m, "X");
			utest_Assert::same($tmp1, $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 69, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
			$tmp3 = haxe_ds_Option::Some(1);
			$tmp4 = thx_fp_StringMap::get($m, "Y");
			utest_Assert::same($tmp3, $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 70, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
			$tmp5 = haxe_ds_Option::Some(3);
			$tmp6 = thx_fp_StringMap::get($m, "Z");
			utest_Assert::same($tmp5, $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 71, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 72, "className" => "thx.fp.TestMap", "methodName" => "testSet")));
			unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$m);
		}
	}
	public function testObjectSet() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = new thx_fp_CO("a");
			$b = new thx_fp_CO("b");
			$c = new thx_fp_CO("c");
			$tmp = thx_fp_ComparableOrdMap::set(thx_fp_MapImpl::Bin(1, $a, 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), $b, 2);
			$m = thx_fp_ComparableOrdMap::set($tmp, $c, 3);
			$tmp1 = haxe_ds_Option::Some(1);
			$tmp2 = thx_fp_ComparableOrdMap::get($m, $a);
			utest_Assert::same($tmp1, $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 84, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
			$tmp3 = haxe_ds_Option::Some(2);
			$tmp4 = thx_fp_ComparableOrdMap::get($m, $b);
			utest_Assert::same($tmp3, $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 85, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
			$tmp5 = haxe_ds_Option::Some(3);
			$tmp6 = thx_fp_ComparableOrdMap::get($m, $c);
			utest_Assert::same($tmp5, $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 86, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 87, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet")));
			unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$m,$c,$b,$a);
		}
	}
	public function testObjectSet2() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$a = new thx_fp_CO2("a");
			$b = new thx_fp_CO2("b");
			$c = new thx_fp_CO2("c");
			$tmp = thx_fp_ComparableMap::set(thx_fp_MapImpl::Bin(1, $a, 1, thx_fp_MapImpl::$Tip, thx_fp_MapImpl::$Tip), $b, 2);
			$m = thx_fp_ComparableMap::set($tmp, $c, 3);
			$tmp1 = haxe_ds_Option::Some(1);
			$tmp2 = thx_fp_ComparableMap::get($m, $a);
			utest_Assert::same($tmp1, $tmp2, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 99, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
			$tmp3 = haxe_ds_Option::Some(2);
			$tmp4 = thx_fp_ComparableMap::get($m, $b);
			utest_Assert::same($tmp3, $tmp4, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 100, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
			$tmp5 = haxe_ds_Option::Some(3);
			$tmp6 = thx_fp_ComparableMap::get($m, $c);
			utest_Assert::same($tmp5, $tmp6, null, null, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 101, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
			utest_Assert::equals(3, thx_fp__Map_Map_Impl_::size($m), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 102, "className" => "thx.fp.TestMap", "methodName" => "testObjectSet2")));
			unset($tmp6,$tmp5,$tmp4,$tmp3,$tmp2,$tmp1,$tmp,$m,$c,$b,$a);
		}
	}
	public function testFromNative() {
		$_g1 = 0;
		$_g = $this->x;
		while($_g1 < $_g) {
			++$_g1;
			$_g2 = new haxe_ds_StringMap();
			$_g2->set("a", 1);
			$_g2->set("b", 2);
			$map = thx_fp_StringMap::fromNative($_g2);
			utest_Assert::equals(2, thx_fp__Map_Map_Impl_::size($map), null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 109, "className" => "thx.fp.TestMap", "methodName" => "testFromNative")));
			$tmp = thx_fp_StringMap::exists($map, "a");
			utest_Assert::isTrue($tmp, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 110, "className" => "thx.fp.TestMap", "methodName" => "testFromNative")));
			$tmp1 = thx_fp_StringMap::exists($map, "b");
			utest_Assert::isTrue($tmp1, null, _hx_anonymous(array("fileName" => "TestMap.hx", "lineNumber" => 111, "className" => "thx.fp.TestMap", "methodName" => "testFromNative")));
			unset($tmp1,$tmp,$map,$_g2);
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'thx.fp.TestMap'; }
}
function thx_fp_TestMap_0($arr1, $v) {
	{
		$arr1->push($v);
		return $arr1;
	}
}
function thx_fp_TestMap_1($arr1, $k) {
	{
		$arr1->push($k);
		return $arr1;
	}
}
