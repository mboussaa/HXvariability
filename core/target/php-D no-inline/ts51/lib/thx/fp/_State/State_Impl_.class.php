<?php

// Generated by Haxe 3.3.0
class thx_fp__State_State_Impl_ {
	public function __construct(){}
	static function void() {
		return thx_fp__State_State_Impl_::pure(null);
	}
	static function pure($a) {
		return array(new _hx_lambda(array(&$a), "thx_fp__State_State_Impl__0"), 'execute');
	}
	static function getState() {
		return array(new _hx_lambda(array(), "thx_fp__State_State_Impl__1"), 'execute');
	}
	static function putState($s) {
		return array(new _hx_lambda(array(&$s), "thx_fp__State_State_Impl__2"), 'execute');
	}
	static function map($this1, $f) {
		return array(new _hx_lambda(array(&$f, &$this1), "thx_fp__State_State_Impl__3"), 'execute');
	}
	static function ap($this1, $s2) {
		return thx_fp__State_State_Impl_::flatMap($this1, array(new _hx_lambda(array(&$s2), "thx_fp__State_State_Impl__4"), 'execute'));
	}
	static function flatMap($this1, $f) {
		return array(new _hx_lambda(array(&$f, &$this1), "thx_fp__State_State_Impl__5"), 'execute');
	}
	static function voided($this1) {
		return thx_Functions1::map($this1, thx_fp_Functions::hconst(null));
	}
	static function then($this1, $next) {
		return array(new _hx_lambda(array(&$next, &$this1), "thx_fp__State_State_Impl__6"), 'execute');
	}
	static function foreachM($this1, $f) {
		return array(new _hx_lambda(array(&$f, &$this1), "thx_fp__State_State_Impl__7"), 'execute');
	}
	static function modify($this1, $f) {
		return array(new _hx_lambda(array(&$f, &$this1), "thx_fp__State_State_Impl__8"), 'execute');
	}
	static function run($this1, $s) {
		return call_user_func_array($this1, array($s))->_1;
	}
	static function runState($this1, $s) {
		return call_user_func_array($this1, array($s))->_0;
	}
	static function ap2($f, $s1, $s2) {
		$tmp = thx_Functions2::curry($f);
		$tmp1 = thx_fp__State_State_Impl_::map($s1, $tmp);
		return thx_fp__State_State_Impl_::ap($s2, $tmp1);
	}
	static function ap3($f, $s1, $s2, $s3) {
		$f1 = thx_Functions3::curry($f);
		$tmp = thx_Functions2::curry($f1);
		$tmp1 = thx_fp__State_State_Impl_::map($s1, $tmp);
		$tmp2 = thx_fp__State_State_Impl_::ap($s2, $tmp1);
		return thx_fp__State_State_Impl_::ap($s3, $tmp2);
	}
	static function ap4($f, $s1, $s2, $s3, $s4) {
		$f1 = thx_Functions4::curry($f);
		$f2 = thx_Functions3::curry($f1);
		$tmp = thx_Functions2::curry($f2);
		$tmp1 = thx_fp__State_State_Impl_::map($s1, $tmp);
		$tmp2 = thx_fp__State_State_Impl_::ap($s2, $tmp1);
		$tmp3 = thx_fp__State_State_Impl_::ap($s3, $tmp2);
		return thx_fp__State_State_Impl_::ap($s4, $tmp3);
	}
	static function ap5($f, $s1, $s2, $s3, $s4, $s5) {
		$f1 = thx_Functions5::curry($f);
		$f2 = thx_Functions4::curry($f1);
		$f3 = thx_Functions3::curry($f2);
		$tmp = thx_Functions2::curry($f3);
		$tmp1 = thx_fp__State_State_Impl_::map($s1, $tmp);
		$tmp2 = thx_fp__State_State_Impl_::ap($s2, $tmp1);
		$tmp3 = thx_fp__State_State_Impl_::ap($s3, $tmp2);
		$tmp4 = thx_fp__State_State_Impl_::ap($s4, $tmp3);
		return thx_fp__State_State_Impl_::ap($s5, $tmp4);
	}
	static function ap6($f, $s1, $s2, $s3, $s4, $s5, $s6) {
		$f1 = thx_Functions6::curry($f);
		$f2 = thx_Functions5::curry($f1);
		$f3 = thx_Functions4::curry($f2);
		$f4 = thx_Functions3::curry($f3);
		$tmp = thx_Functions2::curry($f4);
		$tmp1 = thx_fp__State_State_Impl_::map($s1, $tmp);
		$tmp2 = thx_fp__State_State_Impl_::ap($s2, $tmp1);
		$tmp3 = thx_fp__State_State_Impl_::ap($s3, $tmp2);
		$tmp4 = thx_fp__State_State_Impl_::ap($s4, $tmp3);
		$tmp5 = thx_fp__State_State_Impl_::ap($s5, $tmp4);
		return thx_fp__State_State_Impl_::ap($s6, $tmp5);
	}
	static function ap7($f, $s1, $s2, $s3, $s4, $s5, $s6, $s7) {
		$f1 = thx_Functions7::curry($f);
		$f2 = thx_Functions6::curry($f1);
		$f3 = thx_Functions5::curry($f2);
		$f4 = thx_Functions4::curry($f3);
		$f5 = thx_Functions3::curry($f4);
		$tmp = thx_Functions2::curry($f5);
		$tmp1 = thx_fp__State_State_Impl_::map($s1, $tmp);
		$tmp2 = thx_fp__State_State_Impl_::ap($s2, $tmp1);
		$tmp3 = thx_fp__State_State_Impl_::ap($s3, $tmp2);
		$tmp4 = thx_fp__State_State_Impl_::ap($s4, $tmp3);
		$tmp5 = thx_fp__State_State_Impl_::ap($s5, $tmp4);
		$tmp6 = thx_fp__State_State_Impl_::ap($s6, $tmp5);
		return thx_fp__State_State_Impl_::ap($s7, $tmp6);
	}
	static function ap8($f, $s1, $s2, $s3, $s4, $s5, $s6, $s7, $s8) {
		$f1 = thx_Functions8::curry($f);
		$f2 = thx_Functions7::curry($f1);
		$f3 = thx_Functions6::curry($f2);
		$f4 = thx_Functions5::curry($f3);
		$f5 = thx_Functions4::curry($f4);
		$f6 = thx_Functions3::curry($f5);
		$tmp = thx_Functions2::curry($f6);
		$tmp1 = thx_fp__State_State_Impl_::map($s1, $tmp);
		$tmp2 = thx_fp__State_State_Impl_::ap($s2, $tmp1);
		$tmp3 = thx_fp__State_State_Impl_::ap($s3, $tmp2);
		$tmp4 = thx_fp__State_State_Impl_::ap($s4, $tmp3);
		$tmp5 = thx_fp__State_State_Impl_::ap($s5, $tmp4);
		$tmp6 = thx_fp__State_State_Impl_::ap($s6, $tmp5);
		$tmp7 = thx_fp__State_State_Impl_::ap($s7, $tmp6);
		return thx_fp__State_State_Impl_::ap($s8, $tmp7);
	}
	function __toString() { return 'thx.fp._State.State_Impl_'; }
}
function thx_fp__State_State_Impl__0(&$a, $s) {
	{
		return _hx_anonymous(array("_0" => $s, "_1" => $a));
	}
}
function thx_fp__State_State_Impl__1($s) {
	{
		return _hx_anonymous(array("_0" => $s, "_1" => $s));
	}
}
function thx_fp__State_State_Impl__2(&$s, $_) {
	{
		return _hx_anonymous(array("_0" => $s, "_1" => null));
	}
}
function thx_fp__State_State_Impl__3(&$f, &$this1, $s) {
	{
		$tmp = call_user_func_array($this1, array($s));
		return thx__Tuple_Tuple2_Impl_::map($tmp, $f);
	}
}
function thx_fp__State_State_Impl__4(&$s2, $a) {
	{
		return thx_fp__State_State_Impl_::map($s2, array(new _hx_lambda(array(&$a), "thx_fp__State_State_Impl__9"), 'execute'));
	}
}
function thx_fp__State_State_Impl__5(&$f, &$this1, $s) {
	{
		$res0 = call_user_func_array($this1, array($s));
		$tmp = call_user_func_array($f, array($res0->_1));
		return call_user_func_array($tmp, array($res0->_0));
	}
}
function thx_fp__State_State_Impl__6(&$next, &$this1, $s) {
	{
		return call_user_func_array($next, array(call_user_func_array($this1, array($s))->_0));
	}
}
function thx_fp__State_State_Impl__7(&$f, &$this1, $s) {
	{
		$res0 = call_user_func_array($this1, array($s));
		$tmp = call_user_func_array($f, array($res0->_1));
		$tmp1 = call_user_func_array($tmp, array($res0->_0));
		return thx__Tuple_Tuple2_Impl_::map($tmp1, thx_fp_Functions::hconst($res0->_1));
	}
}
function thx_fp__State_State_Impl__8(&$f, &$this1, $s) {
	{
		$tmp = call_user_func_array($f, array($s));
		return call_user_func_array($this1, array($tmp));
	}
}
function thx_fp__State_State_Impl__9(&$a, $f) {
	{
		return call_user_func_array($f, array($a));
	}
}
