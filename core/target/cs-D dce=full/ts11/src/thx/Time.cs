// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace thx._Time {
	public sealed class Time_Impl_ {
		
		static Time_Impl_() {
			global::thx._Time.Time_Impl_.zero = ((long) (0) );
		}
		
		
		public static long zero;
		
		public static long timeToTicks(int hours, int minutes, int seconds) {
			unchecked {
				return ((long) (( (((long) (( ((long) (( ((long) (( hours * 3600 )) ) + ((long) (( minutes * 60 )) ) )) ) + ((long) (seconds) ) )) )) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerSecondI64) ) )) );
			}
		}
		
		
		public static long create(int hours, global::haxe.lang.Null<int> minutes, global::haxe.lang.Null<int> seconds, global::haxe.lang.Null<int> milliseconds) {
			global::haxe.lang.Null<int> __temp_milliseconds42 = ( ( ! (milliseconds.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (milliseconds) );
			global::haxe.lang.Null<int> __temp_seconds41 = ( ( ! (seconds.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (seconds) );
			global::haxe.lang.Null<int> __temp_minutes40 = ( ( ! (minutes.hasValue) ) ? (new global::haxe.lang.Null<int>(0, true)) : (minutes) );
			return ((long) (( ((long) (global::thx._Time.Time_Impl_.timeToTicks(hours, (__temp_minutes40).@value, (__temp_seconds41).@value)) ) + ((long) (( ((long) ((__temp_milliseconds42).@value) ) * ((long) (global::thx._DateTimeUtc.DateTimeUtc_Impl_.ticksPerMillisecondI64) ) )) ) )) );
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}


