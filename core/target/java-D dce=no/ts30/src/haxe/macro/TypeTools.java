// Generated by Haxe 3.3.0
package haxe.macro;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class TypeTools extends haxe.lang.HxObject
{
	public TypeTools(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public TypeTools()
	{
		//line 36 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		haxe.macro.TypeTools.__hx_ctor_haxe_macro_TypeTools(this);
	}
	
	
	public static void __hx_ctor_haxe_macro_TypeTools(haxe.macro.TypeTools __temp_me46)
	{
	}
	
	
	public static haxe.macro.ComplexType nullable(haxe.macro.ComplexType complexType)
	{
		//line 38 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		java.lang.Object __temp_stmt3 = null;
		//line 38 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		{
			//line 38 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			haxe.root.Array<haxe.macro.TypeParam> __temp_odecl1 = new haxe.root.Array<haxe.macro.TypeParam>(new haxe.macro.TypeParam[]{haxe.macro.TypeParam.TPType(complexType)});
			//line 38 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			__temp_stmt3 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "pack", "params"}, new java.lang.Object[]{"Null", new haxe.root.Array<java.lang.String>(new java.lang.String[]{}), __temp_odecl1}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 38 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		haxe.macro.ComplexType __temp_stmt2 = haxe.macro.ComplexType.TPath(__temp_stmt3);
		//line 38 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		return ((haxe.macro.ComplexType) (__temp_stmt2) );
	}
	
	
	public static java.lang.Object toField(java.lang.Object cf)
	{
		//line 41 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		haxe.lang.Function varAccessToString = ( (( haxe.macro.TypeTools_toField_41__Fun.__hx_current != null )) ? (haxe.macro.TypeTools_toField_41__Fun.__hx_current) : (haxe.macro.TypeTools_toField_41__Fun.__hx_current = ((haxe.macro.TypeTools_toField_41__Fun) (new haxe.macro.TypeTools_toField_41__Fun()) )) );
		//line 52 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		if (( ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(cf, "params", true)) ).length == 0 )) 
		{
			//line 55 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			haxe.root.Array<haxe.macro.Access> tmp = ( (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(cf, "isPublic", true))) ? (new haxe.root.Array<haxe.macro.Access>(new haxe.macro.Access[]{haxe.macro.Access.APublic})) : (new haxe.root.Array<haxe.macro.Access>(new haxe.macro.Access[]{haxe.macro.Access.APrivate})) );
			//line 56 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			haxe.macro.FieldType tmp1 = null;
			//line 56 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			haxe.macro.Type _g = ((haxe.macro.Type) (haxe.lang.Runtime.getField(cf, "type", true)) );
			//line 56 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			haxe.macro.FieldKind _g1 = ((haxe.macro.FieldKind) (haxe.lang.Runtime.getField(cf, "kind", true)) );
			//line 56 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			switch (_g1.index)
			{
				case 0:
				{
					//line 57 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.macro.VarAccess write = ((haxe.macro.VarAccess) (_g1.params[1]) );
					//line 57 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.macro.VarAccess read = ((haxe.macro.VarAccess) (_g1.params[0]) );
					//line 56 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					tmp1 = haxe.macro.FieldType.FProp(haxe.lang.Runtime.toString(varAccessToString.__hx_invoke2_o(0.0, read, 0.0, "get")), haxe.lang.Runtime.toString(varAccessToString.__hx_invoke2_o(0.0, write, 0.0, "set")), haxe.macro.TypeTools.toComplexType(_g), null);
					//line 57 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					break;
				}
				
				
				case 1:
				{
					//line 56 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					switch (_g.index)
					{
						case 4:
						{
							//line 63 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							haxe.macro.Type ret = ((haxe.macro.Type) (_g.params[1]) );
							//line 63 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (_g.params[0]) );
							//line 65 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							haxe.root.Array<java.lang.Object> _g2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
							//line 66 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							{
								//line 66 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
								int _g11 = 0;
								//line 66 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
								while (( _g11 < args.length ))
								{
									//line 66 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
									java.lang.Object a = args.__get(_g11);
									//line 66 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
									 ++ _g11;
									//line 66 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
									java.lang.Object __temp_stmt9 = null;
									//line 66 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
									{
										//line 67 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
										java.lang.String __temp_odecl1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(a, "name", true));
										//line 68 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
										boolean __temp_odecl2 = haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(a, "opt", true));
										//line 69 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
										haxe.macro.ComplexType __temp_odecl3 = haxe.macro.TypeTools.toComplexType(((haxe.macro.Type) (haxe.lang.Runtime.getField(a, "t", true)) ));
										//line 66 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
										__temp_stmt9 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "opt", "type"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl2, __temp_odecl3}, new java.lang.String[]{}, new double[]{});
									}
									
									//line 66 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
									_g2.push(__temp_stmt9);
								}
								
							}
							
							//line 64 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							java.lang.Object __temp_stmt10 = null;
							//line 64 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							{
								//line 72 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
								haxe.macro.ComplexType __temp_odecl4 = haxe.macro.TypeTools.toComplexType(ret);
								//line 64 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
								__temp_stmt10 = new haxe.lang.DynamicObject(new java.lang.String[]{"args", "expr", "ret"}, new java.lang.Object[]{_g2, null, __temp_odecl4}, new java.lang.String[]{}, new double[]{});
							}
							
							//line 56 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							tmp1 = haxe.macro.FieldType.FFun(__temp_stmt10);
							//line 63 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							break;
						}
						
						
						default:
						{
							//line 76 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							throw haxe.lang.HaxeException.wrap("Invalid TAnonymous");
						}
						
					}
					
					//line 56 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					break;
				}
				
				
			}
			
			//line 52 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			{
				//line 53 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				java.lang.String __temp_odecl5 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(cf, "name", true));
				//line 54 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				java.lang.String __temp_odecl6 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(cf, "doc", true));
				//line 78 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				java.lang.Object __temp_odecl7 = haxe.lang.Runtime.getField(cf, "pos", true);
				//line 79 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				haxe.root.Array<java.lang.Object> __temp_odecl8 = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.callField(haxe.lang.Runtime.getField(cf, "meta", true), "get", null)) );
				//line 52 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				return new haxe.lang.DynamicObject(new java.lang.String[]{"access", "doc", "kind", "meta", "name", "pos"}, new java.lang.Object[]{tmp, __temp_odecl6, tmp1, __temp_odecl8, __temp_odecl5, __temp_odecl7}, new java.lang.String[]{}, new double[]{});
			}
			
		}
		else
		{
			//line 81 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			throw haxe.lang.HaxeException.wrap("Invalid TAnonymous");
		}
		
	}
	
	
	public static haxe.macro.ComplexType toComplexType(haxe.macro.Type type)
	{
		//line 100 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		if (( type == null )) 
		{
			//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			return null;
		}
		else
		{
			//line 100 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			switch (type.index)
			{
				case 0:
				{
					//line 103 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.macro.Type _hx_tmp = ((haxe.macro.Type) (haxe.lang.Runtime.callField(type.params[0], "get", null)) );
					//line 104 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					if (( _hx_tmp == null )) 
					{
						//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						return null;
					}
					else
					{
						//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						return haxe.macro.TypeTools.toComplexType(_hx_tmp);
					}
					
				}
				
				
				case 1:
				{
					//line 105 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					java.lang.Object _hx_tmp1 = ((java.lang.Object) (haxe.lang.Runtime.callField(type.params[0], "get", null)) );
					//line 105 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.root.Array<haxe.macro.Type> params = ((haxe.root.Array<haxe.macro.Type>) (type.params[1]) );
					//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					return haxe.macro.ComplexType.TPath(haxe.macro.TypeTools.toTypePath(_hx_tmp1, params));
				}
				
				
				case 2:
				{
					//line 107 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					java.lang.Object _hx_tmp2 = ((java.lang.Object) (haxe.lang.Runtime.callField(type.params[0], "get", null)) );
					//line 107 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.root.Array<haxe.macro.Type> params1 = ((haxe.root.Array<haxe.macro.Type>) (type.params[1]) );
					//line 108 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.macro.ClassKind _g = ((haxe.macro.ClassKind) (haxe.lang.Runtime.getField(_hx_tmp2, "kind", true)) );
					//line 108 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					switch (_g.index)
					{
						case 1:
						{
							//line 110 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							java.lang.Object __temp_stmt3 = null;
							//line 110 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							{
								//line 111 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
								java.lang.String __temp_odecl1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(_hx_tmp2, "name", true));
								//line 110 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
								__temp_stmt3 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "pack"}, new java.lang.Object[]{__temp_odecl1, new haxe.root.Array<java.lang.String>(new java.lang.String[]{})}, new java.lang.String[]{}, new double[]{});
							}
							
							//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							return haxe.macro.ComplexType.TPath(__temp_stmt3);
						}
						
						
						default:
						{
							//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							return haxe.macro.ComplexType.TPath(haxe.macro.TypeTools.toTypePath(_hx_tmp2, params1));
						}
						
					}
					
				}
				
				
				case 3:
				{
					//line 117 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					java.lang.Object _hx_tmp3 = ((java.lang.Object) (haxe.lang.Runtime.callField(type.params[0], "get", null)) );
					//line 117 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.root.Array<haxe.macro.Type> params2 = ((haxe.root.Array<haxe.macro.Type>) (type.params[1]) );
					//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					return haxe.macro.ComplexType.TPath(haxe.macro.TypeTools.toTypePath(_hx_tmp3, params2));
				}
				
				
				case 4:
				{
					//line 119 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.macro.Type ret = ((haxe.macro.Type) (type.params[1]) );
					//line 119 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.root.Array<java.lang.Object> args = ((haxe.root.Array<java.lang.Object>) (type.params[0]) );
					//line 121 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.root.Array<haxe.macro.ComplexType> _g1 = new haxe.root.Array<haxe.macro.ComplexType>(new haxe.macro.ComplexType[]{});
					//line 121 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					{
						//line 121 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						int _g11 = 0;
						//line 121 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						while (( _g11 < args.length ))
						{
							//line 121 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							java.lang.Object a = args.__get(_g11);
							//line 121 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							 ++ _g11;
							//line 121 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							_g1.push(( (haxe.lang.Runtime.toBool(haxe.lang.Runtime.getField(a, "opt", true))) ? (haxe.macro.TypeTools.nullable(haxe.macro.TypeTools.toComplexType(((haxe.macro.Type) (haxe.lang.Runtime.getField(a, "t", true)) )))) : (haxe.macro.TypeTools.toComplexType(((haxe.macro.Type) (haxe.lang.Runtime.getField(a, "t", true)) ))) ));
						}
						
					}
					
					//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					return haxe.macro.ComplexType.TFunction(_g1, haxe.macro.TypeTools.toComplexType(ret));
				}
				
				
				case 5:
				{
					//line 123 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					java.lang.Object _hx_tmp4 = ((java.lang.Object) (haxe.lang.Runtime.callField(type.params[0], "get", null)) );
					//line 123 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.root.Array<java.lang.Object> fields = ((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.getField(_hx_tmp4, "fields", true)) );
					//line 124 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.root.Array<java.lang.Object> _g2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
					//line 124 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					{
						//line 124 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						int _g12 = 0;
						//line 124 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						while (( _g12 < fields.length ))
						{
							//line 124 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							java.lang.Object cf = fields.__get(_g12);
							//line 124 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							 ++ _g12;
							//line 124 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							_g2.push(haxe.macro.TypeTools.toField(cf));
						}
						
					}
					
					//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					return haxe.macro.ComplexType.TAnonymous(_g2);
				}
				
				
				case 6:
				{
					//line 125 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.macro.Type t = ((haxe.macro.Type) (type.params[0]) );
					//line 126 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					if (( t == null )) 
					{
						//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						return ((haxe.macro.ComplexType) (haxe.macro.ComplexType.TPath(new haxe.lang.DynamicObject(new java.lang.String[]{"name", "pack", "params"}, new java.lang.Object[]{"Dynamic", new haxe.root.Array<java.lang.String>(new java.lang.String[]{}), new haxe.root.Array<haxe.macro.TypeParam>(new haxe.macro.TypeParam[]{})}, new java.lang.String[]{}, new double[]{}))) );
					}
					else
					{
						//line 129 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						haxe.macro.ComplexType ct = haxe.macro.TypeTools.toComplexType(t);
						//line 130 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						java.lang.Object __temp_stmt5 = null;
						//line 130 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						{
							//line 130 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							haxe.root.Array<haxe.macro.TypeParam> __temp_odecl2 = new haxe.root.Array<haxe.macro.TypeParam>(new haxe.macro.TypeParam[]{haxe.macro.TypeParam.TPType(ct)});
							//line 130 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
							__temp_stmt5 = new haxe.lang.DynamicObject(new java.lang.String[]{"name", "pack", "params"}, new java.lang.Object[]{"Dynamic", new haxe.root.Array<java.lang.String>(new java.lang.String[]{}), __temp_odecl2}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 130 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						haxe.macro.ComplexType __temp_stmt4 = haxe.macro.ComplexType.TPath(__temp_stmt5);
						//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
						return ((haxe.macro.ComplexType) (__temp_stmt4) );
					}
					
				}
				
				
				case 7:
				{
					//line 132 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.lang.Function f = ((haxe.lang.Function) (type.params[0]) );
					//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					return haxe.macro.TypeTools.toComplexType(((haxe.macro.Type) (f.__hx_invoke0_o()) ));
				}
				
				
				case 8:
				{
					//line 134 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					java.lang.Object _hx_tmp5 = ((java.lang.Object) (haxe.lang.Runtime.callField(type.params[0], "get", null)) );
					//line 134 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					haxe.root.Array<haxe.macro.Type> params3 = ((haxe.root.Array<haxe.macro.Type>) (type.params[1]) );
					//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
					return haxe.macro.ComplexType.TPath(haxe.macro.TypeTools.toTypePath(_hx_tmp5, params3));
				}
				
				
			}
			
		}
		
		//line 95 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		return null;
	}
	
	
	public static java.lang.Object toTypePath(java.lang.Object baseType, haxe.root.Array<haxe.macro.Type> params)
	{
		//line 143 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		java.lang.String module = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(baseType, "module", true));
		//line 146 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		java.lang.String tmp = haxe.lang.StringExt.substring(module, ( haxe.lang.StringExt.lastIndexOf(module, ".", null) + 1 ), null);
		//line 148 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		haxe.root.Array<haxe.macro.TypeParam> _g = new haxe.root.Array<haxe.macro.TypeParam>(new haxe.macro.TypeParam[]{});
		//line 148 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		{
			//line 148 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			int _g1 = 0;
			//line 148 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			while (( _g1 < params.length ))
			{
				//line 148 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				haxe.macro.Type t = params.__get(_g1);
				//line 148 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				 ++ _g1;
				//line 148 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				_g.push(haxe.macro.TypeParam.TPType(haxe.macro.TypeTools.toComplexType(t)));
			}
			
		}
		
		//line 144 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		{
			//line 145 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			haxe.root.Array<java.lang.String> __temp_odecl1 = ((haxe.root.Array<java.lang.String>) (haxe.lang.Runtime.getField(baseType, "pack", true)) );
			//line 147 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			java.lang.String __temp_odecl2 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(baseType, "name", true));
			//line 144 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"name", "pack", "params", "sub"}, new java.lang.Object[]{tmp, __temp_odecl1, _g, __temp_odecl2}, new java.lang.String[]{}, new double[]{});
		}
		
	}
	
	
	public static java.lang.Object findField(java.lang.Object c, java.lang.String name, java.lang.Object isStatic)
	{
		//line 346 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		boolean __temp_isStatic45 = ( (haxe.lang.Runtime.eq(isStatic, null)) ? (false) : (haxe.lang.Runtime.toBool(isStatic)) );
		//line 347 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		java.lang.Object field = ((java.lang.Object) (haxe.root.Lambda.find(((haxe.root.Array<java.lang.Object>) (haxe.lang.Runtime.callField((( (__temp_isStatic45) ? (haxe.lang.Runtime.getField(c, "statics", true)) : (haxe.lang.Runtime.getField(c, "fields", true)) )), "get", null)) ), ((haxe.lang.Function) (new haxe.macro.TypeTools_findField_347__Fun(name)) ))) );
		//line 348 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		if (( ! (( field == null )) )) 
		{
			//line 348 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			return field;
		}
		else
		{
			//line 349 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
			if (( ! (( haxe.lang.Runtime.getField(c, "superClass", true) == null )) )) 
			{
				//line 348 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				return haxe.macro.TypeTools.findField(((java.lang.Object) (haxe.lang.Runtime.callField(haxe.lang.Runtime.getField(haxe.lang.Runtime.getField(c, "superClass", true), "t", true), "get", null)) ), name, __temp_isStatic45);
			}
			else
			{
				//line 348 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
				return null;
			}
			
		}
		
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 36 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		return new haxe.macro.TypeTools(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 36 "/usr/lib/haxe/std/haxe/macro/TypeTools.hx"
		return new haxe.macro.TypeTools();
	}
	
	
}


