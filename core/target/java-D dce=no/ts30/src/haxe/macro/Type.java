// Generated by Haxe 3.3.0
package haxe.macro;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Type extends haxe.lang.ParamEnum
{
	public Type(int index, java.lang.Object[] params)
	{
		//line 100 "/usr/lib/haxe/std/java/internal/HxObject.hx"
		super(index, params);
	}
	
	
	public static final java.lang.String[] __hx_constructs = new java.lang.String[]{"TMono", "TEnum", "TInst", "TType", "TFun", "TAnonymous", "TDynamic", "TLazy", "TAbstract"};
	
	public static haxe.macro.Type TMono(java.lang.Object t)
	{
		//line 50 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return new haxe.macro.Type(0, new java.lang.Object[]{t});
	}
	
	
	public static haxe.macro.Type TEnum(java.lang.Object t, haxe.root.Array<haxe.macro.Type> params)
	{
		//line 57 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return new haxe.macro.Type(1, new java.lang.Object[]{t, params});
	}
	
	
	public static haxe.macro.Type TInst(java.lang.Object t, haxe.root.Array<haxe.macro.Type> params)
	{
		//line 64 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return new haxe.macro.Type(2, new java.lang.Object[]{t, params});
	}
	
	
	public static haxe.macro.Type TType(java.lang.Object t, haxe.root.Array<haxe.macro.Type> params)
	{
		//line 71 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return new haxe.macro.Type(3, new java.lang.Object[]{t, params});
	}
	
	
	public static haxe.macro.Type TFun(haxe.root.Array<java.lang.Object> args, haxe.macro.Type ret)
	{
		//line 78 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return new haxe.macro.Type(4, new java.lang.Object[]{args, ret});
	}
	
	
	public static haxe.macro.Type TAnonymous(java.lang.Object a)
	{
		//line 85 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return new haxe.macro.Type(5, new java.lang.Object[]{a});
	}
	
	
	public static haxe.macro.Type TDynamic(haxe.macro.Type t)
	{
		//line 92 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return new haxe.macro.Type(6, new java.lang.Object[]{t});
	}
	
	
	public static haxe.macro.Type TLazy(haxe.lang.Function f)
	{
		//line 97 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return new haxe.macro.Type(7, new java.lang.Object[]{f});
	}
	
	
	public static haxe.macro.Type TAbstract(java.lang.Object t, haxe.root.Array<haxe.macro.Type> params)
	{
		//line 104 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return new haxe.macro.Type(8, new java.lang.Object[]{t, params});
	}
	
	
	@Override public java.lang.String getTag()
	{
		//line 44 "/usr/lib/haxe/std/haxe/macro/Type.hx"
		return haxe.macro.Type.__hx_constructs[this.index];
	}
	
	
}


