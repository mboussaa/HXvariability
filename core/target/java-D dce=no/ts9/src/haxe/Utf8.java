// Generated by Haxe 3.3.0
package haxe;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Utf8 extends haxe.lang.HxObject
{
	public Utf8(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Utf8(java.lang.Object size)
	{
		//line 35 "/usr/lib/haxe/std/haxe/Utf8.hx"
		haxe.Utf8.__hx_ctor_haxe_Utf8(this, size);
	}
	
	
	public static void __hx_ctor_haxe_Utf8(haxe.Utf8 __temp_me23, java.lang.Object size)
	{
		//line 36 "/usr/lib/haxe/std/haxe/Utf8.hx"
		__temp_me23.__b = "";
	}
	
	
	public static void iter(java.lang.String s, haxe.lang.Function chars)
	{
		//line 57 "/usr/lib/haxe/std/haxe/Utf8.hx"
		int _g1 = 0;
		//line 57 "/usr/lib/haxe/std/haxe/Utf8.hx"
		int _g = s.length();
		//line 57 "/usr/lib/haxe/std/haxe/Utf8.hx"
		while (( _g1 < _g ))
		{
			//line 57 "/usr/lib/haxe/std/haxe/Utf8.hx"
			int i = _g1++;
			//line 58 "/usr/lib/haxe/std/haxe/Utf8.hx"
			chars.__hx_invoke1_o(0.0, haxe.lang.StringExt.charCodeAt(s, i));
		}
		
	}
	
	
	public static java.lang.String encode(java.lang.String s)
	{
		//line 65 "/usr/lib/haxe/std/haxe/Utf8.hx"
		throw haxe.lang.HaxeException.wrap("Not implemented");
	}
	
	
	public static java.lang.String decode(java.lang.String s)
	{
		//line 73 "/usr/lib/haxe/std/haxe/Utf8.hx"
		throw haxe.lang.HaxeException.wrap("Not implemented");
	}
	
	
	public static int charCodeAt(java.lang.String s, int index)
	{
		//line 80 "/usr/lib/haxe/std/haxe/Utf8.hx"
		return ((int) (haxe.lang.Runtime.toInt(haxe.lang.StringExt.charCodeAt(s, index))) );
	}
	
	
	public static boolean validate(java.lang.String s)
	{
		//line 87 "/usr/lib/haxe/std/haxe/Utf8.hx"
		return true;
	}
	
	
	public static int length(java.lang.String s)
	{
		//line 95 "/usr/lib/haxe/std/haxe/Utf8.hx"
		return s.length();
	}
	
	
	public static int compare(java.lang.String a, java.lang.String b)
	{
		//line 102 "/usr/lib/haxe/std/haxe/Utf8.hx"
		if (( a.compareTo(b) > 0 )) 
		{
			//line 102 "/usr/lib/haxe/std/haxe/Utf8.hx"
			return 1;
		}
		else
		{
			//line 102 "/usr/lib/haxe/std/haxe/Utf8.hx"
			if (haxe.lang.Runtime.valEq(a, b)) 
			{
				//line 102 "/usr/lib/haxe/std/haxe/Utf8.hx"
				return 0;
			}
			else
			{
				//line 102 "/usr/lib/haxe/std/haxe/Utf8.hx"
				return -1;
			}
			
		}
		
	}
	
	
	public static java.lang.String sub(java.lang.String s, int pos, int len)
	{
		//line 109 "/usr/lib/haxe/std/haxe/Utf8.hx"
		return haxe.lang.StringExt.substr(s, pos, len);
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
		return new haxe.Utf8(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
		return new haxe.Utf8(((java.lang.Object) (arr.__get(0)) ));
	}
	
	
	public java.lang.String __b;
	
	public final void addChar(int c)
	{
		//line 43 "/usr/lib/haxe/std/haxe/Utf8.hx"
		this.__b += Character.toString((char) c);
	}
	
	
	@Override public java.lang.String toString()
	{
		//line 50 "/usr/lib/haxe/std/haxe/Utf8.hx"
		return this.__b;
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
		{
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			boolean __temp_executeDef1 = true;
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			switch (field.hashCode())
			{
				case 94338:
				{
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					if (field.equals("__b")) 
					{
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						__temp_executeDef1 = false;
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						this.__b = haxe.lang.Runtime.toString(value);
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						return value;
					}
					
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					break;
				}
				
				
			}
			
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			if (__temp_executeDef1) 
			{
				//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
		{
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			boolean __temp_executeDef1 = true;
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			switch (field.hashCode())
			{
				case -1776922004:
				{
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					if (field.equals("toString")) 
					{
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						__temp_executeDef1 = false;
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "toString")) );
					}
					
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					break;
				}
				
				
				case 94338:
				{
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					if (field.equals("__b")) 
					{
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						__temp_executeDef1 = false;
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						return this.__b;
					}
					
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					break;
				}
				
				
				case -1149089897:
				{
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					if (field.equals("addChar")) 
					{
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						__temp_executeDef1 = false;
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "addChar")) );
					}
					
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					break;
				}
				
				
			}
			
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			if (__temp_executeDef1) 
			{
				//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
		{
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			boolean __temp_executeDef1 = true;
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			switch (field.hashCode())
			{
				case -1776922004:
				{
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					if (field.equals("toString")) 
					{
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						__temp_executeDef1 = false;
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						return this.toString();
					}
					
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					break;
				}
				
				
				case -1149089897:
				{
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					if (field.equals("addChar")) 
					{
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						__temp_executeDef1 = false;
						//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
						this.addChar(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
					break;
				}
				
				
			}
			
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			if (__temp_executeDef1) 
			{
				//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
		baseArr.push("__b");
		//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
		{
			//line 28 "/usr/lib/haxe/std/haxe/Utf8.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


