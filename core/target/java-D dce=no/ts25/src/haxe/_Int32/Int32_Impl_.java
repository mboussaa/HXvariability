// Generated by Haxe 3.3.0
package haxe._Int32;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public final class Int32_Impl_
{
	public static int preIncrement(int this1)
	{
		//line 32 "/usr/lib/haxe/std/haxe/Int32.hx"
		int x =  ++ this1;
		//line 32 "/usr/lib/haxe/std/haxe/Int32.hx"
		this1 = x;
		//line 32 "/usr/lib/haxe/std/haxe/Int32.hx"
		return x;
	}
	
	
	public static int postIncrement(int this1)
	{
		//line 35 "/usr/lib/haxe/std/haxe/Int32.hx"
		int ret = this1++;
		//line 36 "/usr/lib/haxe/std/haxe/Int32.hx"
		this1 = this1;
		//line 37 "/usr/lib/haxe/std/haxe/Int32.hx"
		return ret;
	}
	
	
	public static int preDecrement(int this1)
	{
		//line 41 "/usr/lib/haxe/std/haxe/Int32.hx"
		int x =  -- this1;
		//line 41 "/usr/lib/haxe/std/haxe/Int32.hx"
		this1 = x;
		//line 41 "/usr/lib/haxe/std/haxe/Int32.hx"
		return x;
	}
	
	
	public static int postDecrement(int this1)
	{
		//line 44 "/usr/lib/haxe/std/haxe/Int32.hx"
		int ret = this1--;
		//line 45 "/usr/lib/haxe/std/haxe/Int32.hx"
		this1 = this1;
		//line 46 "/usr/lib/haxe/std/haxe/Int32.hx"
		return ret;
	}
	
	
	public static int add(int a, int b)
	{
		//line 50 "/usr/lib/haxe/std/haxe/Int32.hx"
		return ( ((int) (a) ) + ((int) (b) ) );
	}
	
	
	public static int addInt(int a, int b)
	{
		//line 53 "/usr/lib/haxe/std/haxe/Int32.hx"
		return ( ((int) (a) ) + ((int) (b) ) );
	}
	
	
	public static int sub(int a, int b)
	{
		//line 58 "/usr/lib/haxe/std/haxe/Int32.hx"
		return ( ((int) (a) ) - ((int) (b) ) );
	}
	
	
	public static int subInt(int a, int b)
	{
		//line 61 "/usr/lib/haxe/std/haxe/Int32.hx"
		return ( ((int) (a) ) - ((int) (b) ) );
	}
	
	
	public static int intSub(int a, int b)
	{
		//line 64 "/usr/lib/haxe/std/haxe/Int32.hx"
		return ( ((int) (a) ) - ((int) (b) ) );
	}
	
	
	public static double toFloat(int this1)
	{
		//line 201 "/usr/lib/haxe/std/haxe/Int32.hx"
		return ((double) (this1) );
	}
	
	
	public static int ucompare(int a, int b)
	{
		//line 207 "/usr/lib/haxe/std/haxe/Int32.hx"
		if (((boolean) (( a < 0 )) )) 
		{
			//line 208 "/usr/lib/haxe/std/haxe/Int32.hx"
			if (((boolean) (( b < 0 )) )) 
			{
				//line 208 "/usr/lib/haxe/std/haxe/Int32.hx"
				return ((int) (( ((int) ( ~ (b) ) ) - ((int) ( ~ (a) ) ) )) );
			}
			else
			{
				//line 208 "/usr/lib/haxe/std/haxe/Int32.hx"
				return 1;
			}
			
		}
		
		//line 209 "/usr/lib/haxe/std/haxe/Int32.hx"
		if (((boolean) (( b < 0 )) )) 
		{
			//line 209 "/usr/lib/haxe/std/haxe/Int32.hx"
			return -1;
		}
		else
		{
			//line 209 "/usr/lib/haxe/std/haxe/Int32.hx"
			return ((int) (( ((int) (a) ) - ((int) (b) ) )) );
		}
		
	}
	
	
	public static int clamp(int x)
	{
		//line 229 "/usr/lib/haxe/std/haxe/Int32.hx"
		return x;
	}
	
	
}


