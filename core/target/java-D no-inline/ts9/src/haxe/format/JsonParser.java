// Generated by Haxe 3.3.0
package haxe.format;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class JsonParser extends haxe.lang.HxObject
{
	public JsonParser(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public JsonParser(java.lang.String str)
	{
		//line 51 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		haxe.format.JsonParser.__hx_ctor_haxe_format_JsonParser(this, str);
	}
	
	
	public static void __hx_ctor_haxe_format_JsonParser(haxe.format.JsonParser __temp_me33, java.lang.String str)
	{
		//line 52 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		__temp_me33.str = str;
		//line 53 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		__temp_me33.pos = 0;
	}
	
	
	public static java.lang.Object parse(java.lang.String str)
	{
		//line 45 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		return new haxe.format.JsonParser(haxe.lang.Runtime.toString(str)).parseRec();
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		return new haxe.format.JsonParser(((haxe.lang.EmptyObject) (haxe.lang.EmptyObject.EMPTY) ));
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		return new haxe.format.JsonParser(haxe.lang.Runtime.toString(arr.__get(0)));
	}
	
	
	public java.lang.String str;
	
	public int pos;
	
	public java.lang.Object parseRec()
	{
		//line 57 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		while (true)
		{
			//line 58 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			int c = this.nextChar();
			//line 59 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			switch (c)
			{
				case 9:
				case 10:
				case 13:
				case 32:
				{
					//line 60 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 34:
				{
					//line 129 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					return this.parseString();
				}
				
				
				case 45:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
				{
					//line 131 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					return this.parseNumber(c);
				}
				
				
				case 91:
				{
					//line 89 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					haxe.root.Array arr = new haxe.root.Array(new java.lang.Object[]{});
					//line 89 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					java.lang.Object comma = null;
					//line 90 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					while (true)
					{
						//line 91 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						int c1 = this.nextChar();
						//line 92 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						switch (c1)
						{
							case 9:
							case 10:
							case 13:
							case 32:
							{
								//line 93 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								break;
							}
							
							
							case 44:
							{
								//line 99 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								if (haxe.lang.Runtime.toBool((comma))) 
								{
									//line 99 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
									comma = false;
								}
								else
								{
									//line 99 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
									this.invalidChar();
								}
								
								//line 99 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								break;
							}
							
							
							case 93:
							{
								//line 96 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								if (haxe.lang.Runtime.eq(comma, false)) 
								{
									//line 96 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
									this.invalidChar();
								}
								
								//line 97 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								return arr;
							}
							
							
							default:
							{
								//line 101 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								if (haxe.lang.Runtime.toBool((comma))) 
								{
									//line 101 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
									this.invalidChar();
								}
								
								//line 102 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								this.pos--;
								//line 103 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								arr.push(this.parseRec());
								//line 104 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								comma = true;
								//line 100 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								break;
							}
							
						}
						
					}
					
				}
				
				
				case 102:
				{
					//line 115 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					int save = this.pos;
					//line 116 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (( ( ( ( this.nextChar() != 97 ) || ( this.nextChar() != 108 ) ) || ( this.nextChar() != 115 ) ) || ( this.nextChar() != 101 ) )) 
					{
						//line 117 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.pos = save;
						//line 118 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidChar();
					}
					
					//line 120 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					return false;
				}
				
				
				case 110:
				{
					//line 122 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					int save1 = this.pos;
					//line 123 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (( ( ( this.nextChar() != 117 ) || ( this.nextChar() != 108 ) ) || ( this.nextChar() != 108 ) )) 
					{
						//line 124 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.pos = save1;
						//line 125 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidChar();
					}
					
					//line 127 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					return null;
				}
				
				
				case 116:
				{
					//line 108 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					int save2 = this.pos;
					//line 109 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (( ( ( this.nextChar() != 114 ) || ( this.nextChar() != 117 ) ) || ( this.nextChar() != 101 ) )) 
					{
						//line 110 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.pos = save2;
						//line 111 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidChar();
					}
					
					//line 113 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					return true;
				}
				
				
				case 123:
				{
					//line 63 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					java.lang.Object obj = new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{}, new double[]{});
					//line 63 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					java.lang.String field = null;
					//line 63 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					java.lang.Object comma1 = null;
					//line 64 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					while (true)
					{
						//line 65 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						int c2 = this.nextChar();
						//line 66 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						switch (c2)
						{
							case 9:
							case 10:
							case 13:
							case 32:
							{
								//line 67 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								break;
							}
							
							
							case 34:
							{
								//line 82 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								if (haxe.lang.Runtime.toBool((comma1))) 
								{
									//line 82 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
									this.invalidChar();
								}
								
								//line 83 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								field = this.parseString();
								//line 81 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								break;
							}
							
							
							case 44:
							{
								//line 80 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								if (haxe.lang.Runtime.toBool((comma1))) 
								{
									//line 80 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
									comma1 = false;
								}
								else
								{
									//line 80 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
									this.invalidChar();
								}
								
								//line 80 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								break;
							}
							
							
							case 58:
							{
								//line 74 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								if (( field == null )) 
								{
									//line 75 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
									this.invalidChar();
								}
								
								//line 76 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								haxe.root.Reflect.setField(obj, field, this.parseRec());
								//line 77 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								field = null;
								//line 78 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								comma1 = true;
								//line 73 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								break;
							}
							
							
							case 125:
							{
								//line 70 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								if (( ( field != null ) || haxe.lang.Runtime.eq(comma1, false) )) 
								{
									//line 71 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
									this.invalidChar();
								}
								
								//line 72 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								return obj;
							}
							
							
							default:
							{
								//line 85 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								this.invalidChar();
								//line 85 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
								break;
							}
							
						}
						
					}
					
				}
				
				
				default:
				{
					//line 133 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					this.invalidChar();
					//line 133 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
			}
			
		}
		
	}
	
	
	public java.lang.String parseString()
	{
		//line 139 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		int start = this.pos;
		//line 140 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		haxe.root.StringBuf buf = null;
		//line 141 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		while (true)
		{
			//line 142 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			int c = this.nextChar();
			//line 143 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			if (( c == 34 )) 
			{
				//line 144 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				break;
			}
			
			//line 145 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			if (( c == 92 )) 
			{
				//line 146 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				if (( buf == null )) 
				{
					//line 147 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					buf = new haxe.root.StringBuf();
				}
				
				//line 149 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				buf.addSub(this.str, start, ( ( this.pos - start ) - 1 ));
				//line 150 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				c = this.nextChar();
				//line 151 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				switch (c)
				{
					case 34:
					case 47:
					case 92:
					{
						//line 157 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						buf.addChar(c);
						//line 157 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						break;
					}
					
					
					case 98:
					{
						//line 155 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						buf.addChar(8);
						//line 155 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						break;
					}
					
					
					case 102:
					{
						//line 156 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						buf.addChar(12);
						//line 156 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						break;
					}
					
					
					case 110:
					{
						//line 153 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						buf.addChar(10);
						//line 153 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						break;
					}
					
					
					case 114:
					{
						//line 152 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						buf.addChar(13);
						//line 152 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						break;
					}
					
					
					case 116:
					{
						//line 154 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						buf.addChar(9);
						//line 154 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						break;
					}
					
					
					case 117:
					{
						//line 159 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						java.lang.Object uc = haxe.root.Std.parseInt(( "0x" + haxe.lang.StringExt.substr(this.str, this.pos, 4) ));
						//line 160 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.pos += 4;
						//line 178 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						buf.addChar(((int) (haxe.lang.Runtime.toInt(uc)) ));
						//line 158 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						break;
					}
					
					
					default:
					{
						//line 181 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						throw haxe.lang.HaxeException.wrap(( ( ( "Invalid escape sequence \\" + Character.toString((char) c) ) + " at position " ) + (( this.pos - 1 )) ));
					}
					
				}
				
				//line 183 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				start = this.pos;
			}
			else
			{
				//line 195 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				if (haxe.root.StringTools.isEof(c)) 
				{
					//line 196 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					throw haxe.lang.HaxeException.wrap("Unclosed string");
				}
				
			}
			
		}
		
		//line 198 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		if (( buf == null )) 
		{
			//line 199 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			return haxe.lang.StringExt.substr(this.str, start, ( ( this.pos - start ) - 1 ));
		}
		else
		{
			//line 202 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			buf.addSub(this.str, start, ( ( this.pos - start ) - 1 ));
			//line 203 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			return buf.toString();
		}
		
	}
	
	
	public java.lang.Object parseNumber(int c)
	{
		//line 208 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		int start = ( this.pos - 1 );
		//line 209 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		boolean minus = ( c == 45 );
		//line 209 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		boolean digit =  ! (minus) ;
		//line 209 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		boolean zero = ( c == 48 );
		//line 210 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		boolean point = false;
		//line 210 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		boolean e = false;
		//line 210 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		boolean pm = false;
		//line 210 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		boolean end = false;
		//line 211 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		while (true)
		{
			//line 212 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			c = this.nextChar();
			//line 213 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			switch (c)
			{
				case 43:
				case 45:
				{
					//line 231 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if ((  ! (e)  || pm )) 
					{
						//line 231 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidNumber(start);
					}
					
					//line 232 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					digit = false;
					//line 232 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					pm = true;
					//line 230 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 46:
				{
					//line 225 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (( minus || point )) 
					{
						//line 225 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidNumber(start);
					}
					
					//line 226 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					digit = false;
					//line 226 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					point = true;
					//line 224 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 48:
				{
					//line 215 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (( zero &&  ! (point)  )) 
					{
						//line 215 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidNumber(start);
					}
					
					//line 216 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (minus) 
					{
						//line 217 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						minus = false;
						//line 217 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						zero = true;
					}
					
					//line 219 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					digit = true;
					//line 214 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
				{
					//line 221 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (( zero &&  ! (point)  )) 
					{
						//line 221 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidNumber(start);
					}
					
					//line 222 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (minus) 
					{
						//line 222 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						minus = false;
					}
					
					//line 223 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					digit = true;
					//line 223 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					zero = false;
					//line 220 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 69:
				case 101:
				{
					//line 228 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (( ( minus || zero ) || e )) 
					{
						//line 228 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidNumber(start);
					}
					
					//line 229 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					digit = false;
					//line 229 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					e = true;
					//line 227 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				default:
				{
					//line 234 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if ( ! (digit) ) 
					{
						//line 234 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidNumber(start);
					}
					
					//line 235 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					this.pos--;
					//line 236 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					end = true;
					//line 233 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
			}
			
			//line 238 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			if (end) 
			{
				//line 238 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				break;
			}
			
		}
		
		//line 240 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		double f = haxe.root.Std.parseFloat(haxe.lang.StringExt.substr(this.str, start, ( this.pos - start )));
		//line 241 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		int i = ((int) (f) );
		//line 242 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		if (( i == f )) 
		{
			//line 242 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			return i;
		}
		else
		{
			//line 242 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			return f;
		}
		
	}
	
	
	public int nextChar()
	{
		//line 246 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		return haxe.root.StringTools.fastCodeAt(this.str, this.pos++);
	}
	
	
	public void invalidChar()
	{
		//line 250 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		this.pos--;
		//line 251 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		throw haxe.lang.HaxeException.wrap(( ( ( "Invalid char " + haxe.root.StringTools.fastCodeAt(this.str, this.pos) ) + " at position " ) + this.pos ));
	}
	
	
	public void invalidNumber(int start)
	{
		//line 255 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		throw haxe.lang.HaxeException.wrap(( ( ( "Invalid number at position " + start ) + ": " ) + haxe.lang.StringExt.substr(this.str, start, ( this.pos - start )) ));
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		{
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			switch (field.hashCode())
			{
				case 111188:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("pos")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.pos = ((int) (value) );
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return value;
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		{
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			switch (field.hashCode())
			{
				case 111188:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("pos")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.pos = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return value;
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 114225:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("str")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.str = haxe.lang.Runtime.toString(value);
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return value;
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		{
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			switch (field.hashCode())
			{
				case -1321720800:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("invalidNumber")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "invalidNumber")) );
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 114225:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("str")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return this.str;
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case -953670163:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("invalidChar")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "invalidChar")) );
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 111188:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("pos")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return this.pos;
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 1423892713:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("nextChar")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "nextChar")) );
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 1187792093:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("parseRec")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseRec")) );
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case -820654116:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("parseNumber")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseNumber")) );
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case -678275932:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("parseString")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "parseString")) );
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		{
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			switch (field.hashCode())
			{
				case 111188:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("pos")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return ((double) (this.pos) );
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		{
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			boolean __temp_executeDef1 = true;
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			switch (field.hashCode())
			{
				case -1321720800:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("invalidNumber")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidNumber(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 1187792093:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("parseRec")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return this.parseRec();
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case -953670163:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("invalidChar")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						this.invalidChar();
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case -678275932:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("parseString")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return this.parseString();
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case 1423892713:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("nextChar")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return this.nextChar();
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
				case -820654116:
				{
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					if (field.equals("parseNumber")) 
					{
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						__temp_executeDef1 = false;
						//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
						return this.parseNumber(((int) (haxe.lang.Runtime.toInt(dynargs.__get(0))) ));
					}
					
					//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
					break;
				}
				
				
			}
			
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			if (__temp_executeDef1) 
			{
				//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		baseArr.push("pos");
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		baseArr.push("str");
		//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
		{
			//line 32 "/usr/lib/haxe/std/haxe/format/JsonParser.hx"
			super.__hx_getFields(baseArr);
		}
		
	}
	
	
}


