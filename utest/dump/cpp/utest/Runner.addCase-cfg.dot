digraph graphname {
n3119 [shape=box,label="(3119)\nScopes: 0\npattern = \"phi\"(pattern,pattern)"];
n3118 [shape=box,label="(3118)\nScopes: 11, 0"];
n3117 [shape=box,label="(3117)\nScopes: 14, 11, 0"];
n3116 [shape=box,label="(3116)\nLoops: 1\nScopes: 15, 14, 11, 0\nthis.addFixture(new utest.TestFixture(test,field,setup,teardown))"];
n3115 [shape=box,label="(3115)\nLoops: 1\nScopes: 18, 15, 14, 11, 0\ncontinue"];
n3114 [shape=box,label="(3114)\nLoops: 1\nScopes: 15, 14, 11, 0\nvar _hx_tmp = ! this.isMethod(test,field)\n@:cond-branch _hx_tmp"];
n3113 [shape=box,label="(3113)\nLoops: 1\nScopes: 17, 15, 14, 11, 0\ncontinue"];
n3112 [shape=box,label="(3112)\nLoops: 1\nScopes: 15, 14, 11, 0\nvar field = fields[`]\n` = ` + 1\nvar _hx_tmp = ! pattern.match(field)\n@:cond-branch _hx_tmp"];
n3111 [shape=box,label="(3111)\nLoops: 1\nScopes: 16, 15, 14, 11, 0\nbreak"];
n3110 [shape=box,label="(3110)\nLoops: 1\nScopes: 15, 14, 11, 0\nvar _hx_tmp = ! ((` < fields.length))\n@:cond-branch _hx_tmp"];
n3109 [shape=box,label="<loop-head>
(3109)\nLoops: 1\nScopes: 15, 14, 11, 0\n` = \"phi\"(`,`,`,`)\n_hx_tmp = \"phi\"(_hx_tmp,_hx_tmp,_hx_tmp,_hx_tmp)\nfield = \"phi\"(field,field,field,field)\n_hx_tmp = \"phi\"(_hx_tmp,_hx_tmp,_hx_tmp,_hx_tmp)\n_hx_tmp = \"phi\"(_hx_tmp,_hx_tmp,_hx_tmp,_hx_tmp)"];
n3108 [shape=box,label="(3108)\nScopes: 14, 11, 0\nwhile ((true)) @:block 3110"];
n3107 [shape=box,label="(3107)\nScopes: 14, 11, 0\nvar ` = 0"];
n3106 [shape=box,label="(3106)\nScopes: 11, 0\npattern = \"phi\"(pattern,pattern)"];
n3105 [shape=box,label="(3105)\nScopes: 13, 11, 0\npattern = pattern"];
n3104 [shape=box,label="(3104)\nScopes: 12, 11, 0\npattern = this.globalPattern"];
n3103 [shape=box,label="(3103)\nScopes: 6, 0"];
n3102 [shape=box,label="(3102)\nLoops: 0\nScopes: 7, 6, 0\nthis.addFixture(new utest.TestFixture(test,field,setup,teardown))"];
n3101 [shape=box,label="(3101)\nLoops: 0\nScopes: 10, 7, 6, 0\ncontinue"];
n3100 [shape=box,label="(3100)\nLoops: 0\nScopes: 7, 6, 0\nvar _hx_tmp = ! this.isMethod(test,field)\n@:cond-branch _hx_tmp"];
n3099 [shape=box,label="(3099)\nLoops: 0\nScopes: 9, 7, 6, 0\ncontinue"];
n3098 [shape=box,label="(3098)\nLoops: 0\nScopes: 7, 6, 0\nvar field = fields[`]\n` = ` + 1\nvar _hx_tmp = ! StringTools.startsWith(field,prefix)\n@:cond-branch _hx_tmp"];
n3097 [shape=box,label="(3097)\nLoops: 0\nScopes: 8, 7, 6, 0\nbreak"];
n3096 [shape=box,label="(3096)\nLoops: 0\nScopes: 7, 6, 0\nvar _hx_tmp = ! ((` < fields.length))\n@:cond-branch _hx_tmp"];
n3095 [shape=box,label="<loop-head>
(3095)\nLoops: 0\nScopes: 7, 6, 0\n` = \"phi\"(`,`,`,`)\n_hx_tmp = \"phi\"(_hx_tmp,_hx_tmp,_hx_tmp,_hx_tmp)\nfield = \"phi\"(field,field,field,field)\n_hx_tmp = \"phi\"(_hx_tmp,_hx_tmp,_hx_tmp,_hx_tmp)\n_hx_tmp = \"phi\"(_hx_tmp,_hx_tmp,_hx_tmp,_hx_tmp)"];
n3094 [shape=box,label="(3094)\nScopes: 6, 0\nwhile ((true)) @:block 3096"];
n3093 [shape=box,label="(3093)\nScopes: 11, 0\nvar _hx_tmp = this.globalPattern != null\n@:cond-branch _hx_tmp"];
n3092 [shape=box,label="(3092)\nScopes: 6, 0\nvar ` = 0"];
n3091 [shape=box,label="(3091)\nScopes: 0\n_hx_tmp = \"phi\"(_hx_tmp,_hx_tmp)\n@:cond-branch _hx_tmp"];
n3090 [shape=box,label="(3090)\nScopes: 5, 0\n_hx_tmp = false"];
n3089 [shape=box,label="(3089)\nScopes: 4, 0\n_hx_tmp = pattern == null"];
n3088 [shape=box,label="(3088)\nScopes: 0\nteardown = \"phi\"(teardown,teardown)\nvar _hx_tmp = Type.getClass(test)\nvar fields = Type.getInstanceFields(_hx_tmp)\nvar _hx_tmp\nvar _hx_tmp = this.globalPattern == null\n@:cond-branch _hx_tmp"];
n3087 [shape=box,label="(3087)\nScopes: 3, 0\nteardown = null"];
n3086 [shape=box,label="(3086)\nScopes: 0\nsetup = \"phi\"(setup,setup)\nvar _hx_tmp = ! this.isMethod(test,teardown)\n@:cond-branch _hx_tmp"];
n3085 [shape=box,label="(3085)\nScopes: 2, 0\nsetup = null"];
n3084 [shape=box,label="(3084)\nScopes: 0\nvar _hx_tmp = ! this.isMethod(test,setup)\n@:cond-branch _hx_tmp"];
n3083 [shape=box,label="(3083)\nScopes: 1, 0\nthrow \"can't add a null object as a test case\""];
n3082 [shape=box,label="<function-end>
(3082)"];
n3081 [shape=box,label="<function-begin>
(3081)\nScopes: 0\nvar _hx_tmp = ! Reflect.isObject(test)\n@:cond-branch _hx_tmp"];
n1 [shape=box,label="<root>
(1)"];
n1 -> n3081[label="function [exe]"];
n3081 -> n3084[label="else [exe]"];
n3081 -> n3083[label="branch [exe]"];
n3083 -> n3082[label="goto [exe]"];
n3084 -> n3086[label="else [exe]"];
n3084 -> n3085[label="branch [exe]"];
n3085 -> n3086[label="goto [exe]"];
n3086 -> n3088[label="else [exe]"];
n3086 -> n3087[label="branch [exe]"];
n3087 -> n3088[label="goto [exe]"];
n3088 -> n3090[label="else [exe]"];
n3088 -> n3089[label="branch [exe]"];
n3089 -> n3091[label="goto [exe]"];
n3091 -> n3093[label="else [exe]"];
n3091 -> n3092[label="branch [exe]"];
n3092 -> n3094[label="goto [exe]"];
n3094 -> n3095[label="goto [exe]"];
n3095 -> n3096[label="goto [exe]"];
n3096 -> n3098[label="else [exe]"];
n3096 -> n3097[label="branch [exe]"];
n3097 -> n3103[label="goto [exe]"];
n3103 -> n3119[label="goto [exe]"];
n3098 -> n3100[label="else [exe]"];
n3098 -> n3099[label="branch [exe]"];
n3099 -> n3095[label="goto [exe]"];
n3100 -> n3102[label="else [exe]"];
n3100 -> n3101[label="branch [exe]"];
n3101 -> n3095[label="goto [exe]"];
n3102 -> n3095[label="goto [exe]"];
n3119 -> n3082[label="goto [exe]"];
n3093 -> n3105[label="else [exe]"];
n3093 -> n3104[label="branch [exe]"];
n3104 -> n3106[label="goto [exe]"];
n3106 -> n3107[label="goto [exe]"];
n3107 -> n3108[label="goto [exe]"];
n3108 -> n3109[label="goto [exe]"];
n3109 -> n3110[label="goto [exe]"];
n3110 -> n3112[label="else [exe]"];
n3110 -> n3111[label="branch [exe]"];
n3111 -> n3117[label="goto [exe]"];
n3117 -> n3118[label="goto [exe]"];
n3118 -> n3119[label="goto [exe]"];
n3112 -> n3114[label="else [exe]"];
n3112 -> n3113[label="branch [exe]"];
n3113 -> n3109[label="goto [exe]"];
n3114 -> n3116[label="else [exe]"];
n3114 -> n3115[label="branch [exe]"];
n3115 -> n3109[label="goto [exe]"];
n3116 -> n3109[label="goto [exe]"];
n3105 -> n3106[label="goto [exe]"];
n3090 -> n3091[label="goto [exe]"];
}
