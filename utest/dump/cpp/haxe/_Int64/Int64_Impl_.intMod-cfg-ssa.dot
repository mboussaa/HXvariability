digraph graphname {
	node [shape=plaintext];
n1312[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1312) BKNormal</td></tr>
	<tr><td port="e0" align="left">var x = haxe._Int64.___Int64.low(cast x)</td></tr>
	<tr><td port="e1" align="left">return haxe._Int64.___Int64.ofInt(x)</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1311[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1311) BKConditional</td></tr>
	<tr><td port="e0" align="left">throw \"Overflow\"</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1310[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1310) BKNormal</td></tr>
	<tr><td port="e0" align="left">var x = haxe._Int64.___Int64.mod(a,b)</td></tr>
	<tr><td port="e1" align="left">var _hx_tmp = haxe._Int64.___Int64.high(cast x)</td></tr>
	<tr><td port="e2" align="left">var _hx_tmp = haxe._Int64.___Int64.low(cast x)</td></tr>
	<tr><td port="e3" align="left">var _hx_tmp = cast _hx_tmp != cast _hx_tmp &gt;&gt; 31</td></tr>
	<tr><td port="e4" align="left">@:cond-branch _hx_tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1309[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1309) BKConditional</td></tr>
	<tr><td port="e0" align="left">throw \"divide by zero\"</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1308[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1308) BKFunctionEnd</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1307[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1307) BKFunctionBegin</td></tr>
	<tr><td port="e0" align="left">var a = @:implicitCast cast haxe._Int64.___Int64.ofInt(a)</td></tr>
	<tr><td port="e1" align="left">var _hx_tmp = haxe._Int64.___Int64.isZero(a)</td></tr>
	<tr><td port="e2" align="left">@:cond-branch _hx_tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1) BKRoot</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1:out -> n1307:in[label="CFGFunction"];
n1307:out -> n1310:in[label="CFGCondElse"];
n1307:out -> n1309:in[label="CFGCondBranch true"];
n1309:out -> n1308:in[label="CFGGoto"];
n1310:out -> n1312:in[label="CFGCondElse"];
n1310:out -> n1311:in[label="CFGCondBranch true"];
n1311:out -> n1308:in[label="CFGGoto"];
n1312:out -> n1308:in[label="CFGGoto"];
n1307:e0 -> n1310:e0[color=lightblue,constraint=false];
n1310:e0 -> n1312:e0[color=lightblue,constraint=false];
}
