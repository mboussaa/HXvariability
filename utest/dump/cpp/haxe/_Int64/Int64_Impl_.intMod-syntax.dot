digraph graphname {
n1312 [shape=box,label="(1312)\nvar x = haxe._Int64.___Int64.low(cast x)\nreturn haxe._Int64.___Int64.ofInt(x)"];
n1311 [shape=box,label="(1311)\nthrow \"Overflow\""];
n1310 [shape=box,label="(1310)\nvar x = haxe._Int64.___Int64.mod(a,b)\nvar _hx_tmp = haxe._Int64.___Int64.high(cast x)\nvar _hx_tmp = haxe._Int64.___Int64.low(cast x)\nvar _hx_tmp = cast _hx_tmp != cast _hx_tmp >> 31\n@:cond-branch _hx_tmp"];
n1310 -> n1311[style="dashed",color="gray",label="then"];
n1310 -> n1312[style="dashed",color="gray",label="next"];
n1309 [shape=box,label="(1309)\nthrow \"divide by zero\""];
n1308 [shape=box,label="<function-end>
(1308)"];
n1307 [shape=box,label="<function-begin>
(1307)\nvar a = @:implicitCast cast haxe._Int64.___Int64.ofInt(a)\nvar _hx_tmp = haxe._Int64.___Int64.isZero(a)\n@:cond-branch _hx_tmp"];
n1307 -> n1309[style="dashed",color="gray",label="then"];
n1307 -> n1310[style="dashed",color="gray",label="next"];
n1 [shape=box,label="<root>
(1)"];
}
