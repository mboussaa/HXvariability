// Generated by Haxe 3.3.0
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Lambda extends haxe.lang.HxObject
{
	public Lambda(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Lambda()
	{
		//line 37 "/usr/lib/haxe/std/Lambda.hx"
		haxe.root.Lambda.__hx_ctor__Lambda(this);
	}
	
	
	public static void __hx_ctor__Lambda(haxe.root.Lambda __temp_me7)
	{
	}
	
	
	public static <A> haxe.root.Array<A> array(java.lang.Object it)
	{
		//line 45 "/usr/lib/haxe/std/Lambda.hx"
		haxe.root.Array<A> a = new haxe.root.Array<A>();
		//line 46 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 46 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 46 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 46 "/usr/lib/haxe/std/Lambda.hx"
				A i = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 47 "/usr/lib/haxe/std/Lambda.hx"
				a.push(i);
			}
			
		}
		
		//line 48 "/usr/lib/haxe/std/Lambda.hx"
		return a;
	}
	
	
	public static <A> haxe.root.List<A> list(java.lang.Object it)
	{
		//line 57 "/usr/lib/haxe/std/Lambda.hx"
		haxe.root.List<A> l = new haxe.root.List<A>();
		//line 58 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 58 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 58 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 58 "/usr/lib/haxe/std/Lambda.hx"
				A i = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 59 "/usr/lib/haxe/std/Lambda.hx"
				l.add(i);
			}
			
		}
		
		//line 60 "/usr/lib/haxe/std/Lambda.hx"
		return l;
	}
	
	
	public static <A, B> haxe.root.List<B> map(java.lang.Object it, haxe.lang.Function f)
	{
		//line 71 "/usr/lib/haxe/std/Lambda.hx"
		haxe.root.List<B> l = new haxe.root.List<B>();
		//line 72 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 72 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 72 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 72 "/usr/lib/haxe/std/Lambda.hx"
				A x = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 73 "/usr/lib/haxe/std/Lambda.hx"
				l.add(((B) (f.__hx_invoke1_o(0.0, x)) ));
			}
			
		}
		
		//line 74 "/usr/lib/haxe/std/Lambda.hx"
		return l;
	}
	
	
	public static <A, B> haxe.root.List<B> mapi(java.lang.Object it, haxe.lang.Function f)
	{
		//line 85 "/usr/lib/haxe/std/Lambda.hx"
		haxe.root.List<B> l = new haxe.root.List<B>();
		//line 86 "/usr/lib/haxe/std/Lambda.hx"
		int i = 0;
		//line 87 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 87 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 87 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 87 "/usr/lib/haxe/std/Lambda.hx"
				A x = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 88 "/usr/lib/haxe/std/Lambda.hx"
				l.add(((B) (f.__hx_invoke2_o(((double) (i++) ), haxe.lang.Runtime.undefined, 0.0, x)) ));
			}
			
		}
		
		//line 89 "/usr/lib/haxe/std/Lambda.hx"
		return l;
	}
	
	
	public static <A> haxe.root.List<A> flatten(java.lang.Object it)
	{
		//line 98 "/usr/lib/haxe/std/Lambda.hx"
		haxe.root.List<A> l = new haxe.root.List<A>();
		//line 99 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 99 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 99 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 99 "/usr/lib/haxe/std/Lambda.hx"
				java.lang.Object e = ((java.lang.Object) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 100 "/usr/lib/haxe/std/Lambda.hx"
				{
					//line 100 "/usr/lib/haxe/std/Lambda.hx"
					java.lang.Object tmp1 = ((java.lang.Object) (haxe.lang.Runtime.callField(e, "iterator", null)) );
					//line 100 "/usr/lib/haxe/std/Lambda.hx"
					while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp1, "hasNext", null)))
					{
						//line 100 "/usr/lib/haxe/std/Lambda.hx"
						A x = ((A) (haxe.lang.Runtime.callField(tmp1, "next", null)) );
						//line 101 "/usr/lib/haxe/std/Lambda.hx"
						l.add(x);
					}
					
				}
				
			}
			
		}
		
		//line 102 "/usr/lib/haxe/std/Lambda.hx"
		return l;
	}
	
	
	public static <A, B> haxe.root.List<B> flatMap(java.lang.Object it, haxe.lang.Function f)
	{
		//line 113 "/usr/lib/haxe/std/Lambda.hx"
		return ((haxe.root.List<B>) (((haxe.root.List) (haxe.root.Lambda.flatten(((haxe.root.List<java.lang.Object>) (haxe.root.Lambda.map(((java.lang.Object) (it) ), ((haxe.lang.Function) (f) ))) ))) )) );
	}
	
	
	public static <A> boolean has(java.lang.Object it, A elt)
	{
		//line 125 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 125 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 125 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 125 "/usr/lib/haxe/std/Lambda.hx"
				A x = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 126 "/usr/lib/haxe/std/Lambda.hx"
				if (haxe.lang.Runtime.eq(x, elt)) 
				{
					//line 127 "/usr/lib/haxe/std/Lambda.hx"
					return true;
				}
				
			}
			
		}
		
		//line 128 "/usr/lib/haxe/std/Lambda.hx"
		return false;
	}
	
	
	public static <A> boolean exists(java.lang.Object it, haxe.lang.Function f)
	{
		//line 142 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 142 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 142 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 142 "/usr/lib/haxe/std/Lambda.hx"
				A x = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 143 "/usr/lib/haxe/std/Lambda.hx"
				if (haxe.lang.Runtime.toBool(f.__hx_invoke1_o(0.0, x))) 
				{
					//line 144 "/usr/lib/haxe/std/Lambda.hx"
					return true;
				}
				
			}
			
		}
		
		//line 145 "/usr/lib/haxe/std/Lambda.hx"
		return false;
	}
	
	
	public static <A> boolean foreach(java.lang.Object it, haxe.lang.Function f)
	{
		//line 161 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 161 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 161 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 161 "/usr/lib/haxe/std/Lambda.hx"
				A x = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 162 "/usr/lib/haxe/std/Lambda.hx"
				if ( ! (haxe.lang.Runtime.toBool(f.__hx_invoke1_o(0.0, x))) ) 
				{
					//line 163 "/usr/lib/haxe/std/Lambda.hx"
					return false;
				}
				
			}
			
		}
		
		//line 164 "/usr/lib/haxe/std/Lambda.hx"
		return true;
	}
	
	
	public static <A> void iter(java.lang.Object it, haxe.lang.Function f)
	{
		//line 173 "/usr/lib/haxe/std/Lambda.hx"
		java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
		//line 173 "/usr/lib/haxe/std/Lambda.hx"
		while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
		{
			//line 173 "/usr/lib/haxe/std/Lambda.hx"
			A x = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
			//line 174 "/usr/lib/haxe/std/Lambda.hx"
			f.__hx_invoke1_o(0.0, x);
		}
		
	}
	
	
	public static <A> haxe.root.List<A> filter(java.lang.Object it, haxe.lang.Function f)
	{
		//line 186 "/usr/lib/haxe/std/Lambda.hx"
		haxe.root.List<A> l = new haxe.root.List<A>();
		//line 187 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 187 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 187 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 187 "/usr/lib/haxe/std/Lambda.hx"
				A x = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 188 "/usr/lib/haxe/std/Lambda.hx"
				if (haxe.lang.Runtime.toBool(f.__hx_invoke1_o(0.0, x))) 
				{
					//line 189 "/usr/lib/haxe/std/Lambda.hx"
					l.add(x);
				}
				
			}
			
		}
		
		//line 190 "/usr/lib/haxe/std/Lambda.hx"
		return l;
	}
	
	
	public static <A, B> B fold(java.lang.Object it, haxe.lang.Function f, B first)
	{
		//line 206 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 206 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 206 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 206 "/usr/lib/haxe/std/Lambda.hx"
				A x = ((A) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 207 "/usr/lib/haxe/std/Lambda.hx"
				first = ((B) (f.__hx_invoke2_o(0.0, x, 0.0, first)) );
			}
			
		}
		
		//line 208 "/usr/lib/haxe/std/Lambda.hx"
		return first;
	}
	
	
	public static <A> int count(java.lang.Object it, haxe.lang.Function pred)
	{
		//line 218 "/usr/lib/haxe/std/Lambda.hx"
		int n = 0;
		//line 219 "/usr/lib/haxe/std/Lambda.hx"
		if (( pred == null )) 
		{
			//line 220 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 220 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 220 "/usr/lib/haxe/std/Lambda.hx"
				haxe.lang.Runtime.callField(tmp, "next", null);
				//line 221 "/usr/lib/haxe/std/Lambda.hx"
				 ++ n;
			}
			
		}
		else
		{
			//line 223 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp1 = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 223 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp1, "hasNext", null)))
			{
				//line 223 "/usr/lib/haxe/std/Lambda.hx"
				A x = ((A) (haxe.lang.Runtime.callField(tmp1, "next", null)) );
				//line 224 "/usr/lib/haxe/std/Lambda.hx"
				if (haxe.lang.Runtime.toBool(pred.__hx_invoke1_o(0.0, x))) 
				{
					//line 225 "/usr/lib/haxe/std/Lambda.hx"
					 ++ n;
				}
				
			}
			
		}
		
		//line 226 "/usr/lib/haxe/std/Lambda.hx"
		return n;
	}
	
	
	public static <T> boolean empty(java.lang.Object it)
	{
		//line 233 "/usr/lib/haxe/std/Lambda.hx"
		return  ! (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) ), "hasNext", null))) ;
	}
	
	
	public static <T> int indexOf(java.lang.Object it, T v)
	{
		//line 244 "/usr/lib/haxe/std/Lambda.hx"
		int i = 0;
		//line 245 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 245 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 245 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 245 "/usr/lib/haxe/std/Lambda.hx"
				T v2 = ((T) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 246 "/usr/lib/haxe/std/Lambda.hx"
				if (haxe.lang.Runtime.eq(v, v2)) 
				{
					//line 247 "/usr/lib/haxe/std/Lambda.hx"
					return i;
				}
				
				//line 248 "/usr/lib/haxe/std/Lambda.hx"
				 ++ i;
			}
			
		}
		
		//line 250 "/usr/lib/haxe/std/Lambda.hx"
		return -1;
	}
	
	
	public static <T> java.lang.Object find(java.lang.Object it, haxe.lang.Function f)
	{
		//line 264 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 264 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(it, "iterator", null)) );
			//line 264 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 264 "/usr/lib/haxe/std/Lambda.hx"
				T v = ((T) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 265 "/usr/lib/haxe/std/Lambda.hx"
				if (haxe.lang.Runtime.toBool(f.__hx_invoke1_o(0.0, v))) 
				{
					//line 265 "/usr/lib/haxe/std/Lambda.hx"
					return v;
				}
				
			}
			
		}
		
		//line 267 "/usr/lib/haxe/std/Lambda.hx"
		return null;
	}
	
	
	public static <T> haxe.root.List<T> concat(java.lang.Object a, java.lang.Object b)
	{
		//line 277 "/usr/lib/haxe/std/Lambda.hx"
		haxe.root.List<T> l = new haxe.root.List<T>();
		//line 278 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 278 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp = ((java.lang.Object) (haxe.lang.Runtime.callField(a, "iterator", null)) );
			//line 278 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp, "hasNext", null)))
			{
				//line 278 "/usr/lib/haxe/std/Lambda.hx"
				T x = ((T) (haxe.lang.Runtime.callField(tmp, "next", null)) );
				//line 279 "/usr/lib/haxe/std/Lambda.hx"
				l.add(x);
			}
			
		}
		
		//line 280 "/usr/lib/haxe/std/Lambda.hx"
		{
			//line 280 "/usr/lib/haxe/std/Lambda.hx"
			java.lang.Object tmp1 = ((java.lang.Object) (haxe.lang.Runtime.callField(b, "iterator", null)) );
			//line 280 "/usr/lib/haxe/std/Lambda.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(tmp1, "hasNext", null)))
			{
				//line 280 "/usr/lib/haxe/std/Lambda.hx"
				T x1 = ((T) (haxe.lang.Runtime.callField(tmp1, "next", null)) );
				//line 281 "/usr/lib/haxe/std/Lambda.hx"
				l.add(x1);
			}
			
		}
		
		//line 282 "/usr/lib/haxe/std/Lambda.hx"
		return l;
	}
	
	
	public static java.lang.Object __hx_createEmpty()
	{
		//line 37 "/usr/lib/haxe/std/Lambda.hx"
		return new haxe.root.Lambda(haxe.lang.EmptyObject.EMPTY);
	}
	
	
	public static java.lang.Object __hx_create(haxe.root.Array arr)
	{
		//line 37 "/usr/lib/haxe/std/Lambda.hx"
		return new haxe.root.Lambda();
	}
	
	
}


