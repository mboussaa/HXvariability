// Generated by Haxe 3.3.0

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert : global::haxe.lang.HxObject {
		
		static Assert() {
			global::utest.Assert.createAsync = ( (( global::utest.Assert_Anon_693__Fun.__hx_current != null )) ? (global::utest.Assert_Anon_693__Fun.__hx_current) : (global::utest.Assert_Anon_693__Fun.__hx_current = ((global::utest.Assert_Anon_693__Fun) (new global::utest.Assert_Anon_693__Fun()) )) );
			global::utest.Assert.createEvent = ( (( global::utest.Assert_Anon_705__Fun.__hx_current != null )) ? (global::utest.Assert_Anon_705__Fun.__hx_current) : (global::utest.Assert_Anon_705__Fun.__hx_current = ((global::utest.Assert_Anon_705__Fun) (new global::utest.Assert_Anon_705__Fun()) )) );
		}
		
		
		public Assert(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Assert() {
			global::utest.Assert.__hx_ctor_utest_Assert(this);
		}
		
		
		public static void __hx_ctor_utest_Assert(global::utest.Assert __temp_me34) {
		}
		
		
		public static global::List<object> results;
		
		public static global::haxe.lang.Function createAsync;
		
		public static global::haxe.lang.Function createEvent;
		
		public static new object __hx_createEmpty() {
			return new global::utest.Assert(global::haxe.lang.EmptyObject.EMPTY);
		}
		
		
		public static new object __hx_create(global::Array arr) {
			return new global::utest.Assert();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_Anon_694__Fun : global::haxe.lang.Function {
		
		public Assert_Anon_694__Fun() : base(0, 0) {
		}
		
		
		public static global::utest.Assert_Anon_694__Fun __hx_current;
		
		public override object __hx_invoke0_o() {
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_Anon_693__Fun : global::haxe.lang.Function {
		
		public Assert_Anon_693__Fun() : base(2, 0) {
		}
		
		
		public static global::utest.Assert_Anon_693__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> timeout = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::haxe.lang.Function f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (( (( __fn_dyn1 == null )) ? (null) : (((global::haxe.lang.Function) (__fn_dyn1) )) )) );
			return ( (( global::utest.Assert_Anon_694__Fun.__hx_current != null )) ? (global::utest.Assert_Anon_694__Fun.__hx_current) : (global::utest.Assert_Anon_694__Fun.__hx_current = ((global::utest.Assert_Anon_694__Fun) (new global::utest.Assert_Anon_694__Fun()) )) );
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_Anon_706__Fun : global::haxe.lang.Function {
		
		public Assert_Anon_706__Fun() : base(1, 0) {
		}
		
		
		public static global::utest.Assert_Anon_706__Fun __hx_current;
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			object e = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((object) (__fn_float1) )) : (((object) (__fn_dyn1) )) );
			return null;
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace utest {
	public class Assert_Anon_705__Fun : global::haxe.lang.Function {
		
		public Assert_Anon_705__Fun() : base(2, 0) {
		}
		
		
		public static global::utest.Assert_Anon_705__Fun __hx_current;
		
		public override object __hx_invoke2_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
			global::haxe.lang.Null<int> timeout = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (new global::haxe.lang.Null<int>(((int) (__fn_float2) ), true)) : (( (( __fn_dyn2 == null )) ? (default(global::haxe.lang.Null<int>)) : (global::haxe.lang.Null<object>.ofDynamic<int>(__fn_dyn2)) )) );
			global::haxe.lang.Function f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::haxe.lang.Function) (((object) (__fn_float1) )) )) : (((global::haxe.lang.Function) (__fn_dyn1) )) );
			return ( (( global::utest.Assert_Anon_706__Fun.__hx_current != null )) ? (global::utest.Assert_Anon_706__Fun.__hx_current) : (global::utest.Assert_Anon_706__Fun.__hx_current = ((global::utest.Assert_Anon_706__Fun) (new global::utest.Assert_Anon_706__Fun()) )) );
		}
		
		
	}
}


